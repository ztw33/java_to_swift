{"Vars": null, "interface_list": ["Serializable", "Comparable<File>"], "class_description": "An abstract representation of file and directory pathnames. User interfaces and operating systems use system-dependent pathname\n strings to name files and directories.  This class presents an\n abstract, system-independent view of hierarchical pathnames.  An\n abstract pathname has two components: The conversion of a pathname string to or from an abstract pathname is\n inherently system-dependent.  When an abstract pathname is converted into a\n pathname string, each name is separated from the next by a single copy of\n the default separator character.  The default name-separator\n character is defined by the system property file.separator, and\n is made available in the public static fields separator and separatorChar of this class.\n When a pathname string is converted into an abstract pathname, the names\n within it may be separated by the default name-separator character or by any\n other name-separator character that is supported by the underlying system. A pathname, whether abstract or in string form, may be either\n absolute or relative.  An absolute pathname is complete in\n that no other information is required in order to locate the file that it\n denotes.  A relative pathname, in contrast, must be interpreted in terms of\n information taken from some other pathname.  By default the classes in the\n java.io package always resolve relative pathnames against the\n current user directory.  This directory is named by the system property\n user.dir, and is typically the directory in which the Java\n virtual machine was invoked. The parent of an abstract pathname may be obtained by invoking\n the getParent() method of this class and consists of the pathname's\n prefix and each name in the pathname's name sequence except for the last.\n Each directory's absolute pathname is an ancestor of any File\n object with an absolute abstract pathname which begins with the directory's\n absolute pathname.  For example, the directory denoted by the abstract\n pathname \"/usr\" is an ancestor of the directory denoted by the\n pathname \"/usr/local/bin\". The prefix concept is used to handle root directories on UNIX platforms,\n and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\n as follows: Instances of this class may or may not denote an actual file-system\n object such as a file or a directory.  If it does denote such an object\n then that object resides in a partition.  A partition is an\n operating system-specific portion of storage for a file system.  A single\n storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\n contain multiple partitions.  The object, if any, will reside on the\n partition named by some ancestor of the absolute\n form of this pathname. A file system may implement restrictions to certain operations on the\n actual file-system object, such as reading, writing, and executing.  These\n restrictions are collectively known as access permissions.  The file\n system may have multiple sets of access permissions on a single object.\n For example, one set may apply to the object's owner, and another\n may apply to all other users.  The access permissions on an object may\n cause some methods in this class to fail. Instances of the File class are immutable; that is, once\n created, the abstract pathname represented by a File object\n will never change. The java.nio.file\n package defines interfaces and classes for the Java virtual machine to access\n files, file attributes, and file systems. This API may be used to overcome\n many of the limitations of the java.io.File class.\n The toPath method may be used to obtain a Path that uses the abstract path represented by a File object to\n locate a file. The resulting Path may be used with the Files class to provide more efficient and extensive access to\n additional file operations, file attributes, and I/O exceptions to help\n diagnose errors when an operation on a file fails. On Android strings are converted to UTF-8 byte sequences when sending filenames to\n the operating system, and byte sequences returned by the operating system (from the\n various list methods) are converted to strings by decoding them as UTF-8\n byte sequences. ", "class_inherit_list": ["Object"], "package_name": "java.io", "subclass_list": [], "class_name": "File", "Methods": [{"class_name": "File", "params": [{"param_name": ["pathname"], "param_description": " A pathname string", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a new File instance by converting the given\n pathname string into an abstract pathname.  If the given string is\n the empty string, then the result is the empty abstract pathname.\n"}, {"class_name": "File", "params": [{"param_name": ["parent"], "param_description": " The parent pathname string", "param_type": "String"}, {"param_name": ["child"], "param_description": " The child pathname string", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a new File instance from a parent pathname string\n and a child pathname string.\n\n \n If parent is null then the new\n File instance is created as if by invoking the\n single-argument File constructor on the given\n child pathname string.\n\n \n Otherwise the parent pathname string is taken to denote\n a directory, and the child pathname string is taken to\n denote either a directory or a file.  If the child pathname\n string is absolute then it is converted into a relative pathname in a\n system-dependent way.  If parent is the empty string then\n the new File instance is created by converting\n child into an abstract pathname and resolving the result\n against a system-dependent default directory.  Otherwise each pathname\n string is converted into an abstract pathname and the child abstract\n pathname is resolved against the parent.\n"}, {"class_name": "File", "params": [{"param_name": ["parent"], "param_description": " The parent abstract pathname", "param_type": "File"}, {"param_name": ["child"], "param_description": " The child pathname string", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a new File instance from a parent abstract\n pathname and a child pathname string.\n\n \n If parent is null then the new\n File instance is created as if by invoking the\n single-argument File constructor on the given\n child pathname string.\n\n \n Otherwise the parent abstract pathname is taken to\n denote a directory, and the child pathname string is taken\n to denote either a directory or a file.  If the child\n pathname string is absolute then it is converted into a relative\n pathname in a system-dependent way.  If parent is the empty\n abstract pathname then the new File instance is created by\n converting child into an abstract pathname and resolving\n the result against a system-dependent default directory.  Otherwise each\n pathname string is converted into an abstract pathname and the child\n abstract pathname is resolved against the parent.\n"}, {"class_name": "File", "params": [{"param_name": ["uri"], "param_description": " An absolute, hierarchical URI with a scheme equal to\n         \"file\", a non-empty path component, and undefined\n         authority, query, and fragment components", "param_type": "URI"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a new File instance by converting the given\n file: URI into an abstract pathname.\n\n \n The exact form of a file: URI is system-dependent, hence\n the transformation performed by this constructor is also\n system-dependent.\n\n \n For a given abstract pathname f it is guaranteed that\n\n \nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "canExecute", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the abstract pathname exists\n          and the application is allowed to execute the file"], "return_name": []}, "method_description": "Tests whether the application can execute the file denoted by this\n abstract pathname.\n"}, {"class_name": "File", "params": [], "method_name": "canRead", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file specified by this\n          abstract pathname exists and can be read by the\n          application; false otherwise"], "return_name": []}, "method_description": "Tests whether the application can read the file denoted by this\n abstract pathname.\n"}, {"class_name": "File", "params": [], "method_name": "canWrite", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file system actually\n          contains a file denoted by this abstract pathname and\n          the application is allowed to write to the file;\n          false otherwise."], "return_name": []}, "method_description": "Tests whether the application can modify the file denoted by this\n abstract pathname.\n"}, {"class_name": "File", "params": [{"param_name": ["pathname"], "param_description": " The abstract pathname to be compared to this abstract\n                    pathname", "param_type": "File"}], "method_name": "compareTo", "return_value": {"return_type": ["int"], "return_description": ["Zero if the argument is equal to this abstract pathname, a\n          value less than zero if this abstract pathname is\n          lexicographically less than the argument, or a value greater\n          than zero if this abstract pathname is lexicographically\n          greater than the argument"], "return_name": []}, "method_description": "Compares two abstract pathnames lexicographically.  The ordering\n defined by this method depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not.\n"}, {"class_name": "File", "params": [], "method_name": "createNewFile", "return_value": {"return_type": ["boolean"], "return_description": ["true if the named file does not exist and was\n          successfully created; false if the named file\n          already exists"], "return_name": []}, "method_description": "Atomically creates a new, empty file named by this abstract pathname if\n and only if a file with this name does not yet exist.  The check for the\n existence of the file and the creation of the file if it does not exist\n are a single operation that is atomic with respect to all other\n filesystem activities that might affect the file.\n \n\n Note: this method should not be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n FileLock\n facility should be used instead.\n"}, {"class_name": "File", "params": [{"param_name": ["prefix"], "param_description": " The prefix string to be used in generating the file's\n                    name; must be at least three characters long", "param_type": "String"}, {"param_name": ["suffix"], "param_description": " The suffix string to be used in generating the file's\n                    name; may be null, in which case the\n                    suffix \".tmp\" will be used", "param_type": "String"}, {"param_name": ["directory"], "param_description": " The directory in which the file is to be created, or\n                    null if the default temporary-file\n                    directory is to be used", "param_type": "File"}], "method_name": "createTempFile", "return_value": {"return_type": ["File"], "return_description": ["An abstract pathname denoting a newly-created empty file"], "return_name": []}, "method_description": "\n Creates a new empty file in the specified directory, using the\n given prefix and suffix strings to generate its name.  If this method\n returns successfully then it is guaranteed that:\n\n \n The prefix argument must be at least three characters\n long.  It is recommended that the prefix be a short, meaningful string\n such as \"hjb\" or \"mail\".  The\n suffix argument may be null, in which case the\n suffix \".tmp\" will be used.\n\n \n To create the new file, the prefix and the suffix may first be\n adjusted to fit the limitations of the underlying platform.  If the\n prefix is too long then it will be truncated, but its first three\n characters will always be preserved.  If the suffix is too long then it\n too will be truncated, but if it begins with a period character\n ('.') then the period and the first three characters\n following it will always be preserved.  Once these adjustments have been\n made the name of the new file will be generated by concatenating the\n prefix, five or more internally-generated characters, and the suffix.\n\n \n If the directory argument is null then the\n system-dependent default temporary-file directory will be used.  The\n default temporary-file directory is specified by the system property\n java.io.tmpdir.  On UNIX systems the default value of this\n property is typically \"/tmp\" or \"/var/tmp\"; on\n Microsoft Windows systems it is typically \"C:\\\\WINNT\\\\TEMP\".  A different\n value may be given to this system property when the Java virtual machine\n is invoked, but programmatic changes to this property are not guaranteed\n to have any effect upon the temporary directory used by this method.\n"}, {"class_name": "File", "params": [{"param_name": ["prefix"], "param_description": " The prefix string to be used in generating the file's\n                    name; must be at least three characters long", "param_type": "String"}, {"param_name": ["suffix"], "param_description": " The suffix string to be used in generating the file's\n                    name; may be null, in which case the\n                    suffix \".tmp\" will be used", "param_type": "String"}], "method_name": "createTempFile", "return_value": {"return_type": ["File"], "return_description": ["An abstract pathname denoting a newly-created empty file"], "return_name": []}, "method_description": "Creates an empty file in the default temporary-file directory, using\n the given prefix and suffix to generate its name. Invoking this method\n is equivalent to invoking createTempFile(prefix,\u00a0suffix,\u00a0null).\n\n \n The Files.createTempFile method provides an alternative method to create an\n empty file in the temporary-file directory. Files created by that method\n may have more restrictive access permissions to files created by this\n method and so may be more suited to security-sensitive applications.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "delete", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file or directory is\n          successfully deleted; false otherwise"], "return_name": []}, "method_description": "Deletes the file or directory denoted by this abstract pathname.  If\n this pathname denotes a directory, then the directory must be empty in\n order to be deleted.\n\n \n Note that the Files class defines the delete method to throw an IOException\n when a file cannot be deleted. This is useful for error reporting and to\n diagnose why a file cannot be deleted.\n"}, {"class_name": "File", "params": [], "method_name": "deleteOnExit", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Requests that the file or directory denoted by this abstract\n pathname be deleted when the virtual machine terminates.\n Files (or directories) are deleted in the reverse order that\n they are registered. Invoking this method to delete a file or\n directory that is already registered for deletion has no effect.\n Deletion will be attempted only for normal termination of the\n virtual machine, as defined by the Java Language Specification.\n\n \n Once deletion has been requested, it is not possible to cancel the\n request.  This method should therefore be used with care.\n\n \n\n Note: this method should not be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n FileLock\n facility should be used instead.\n\n \nNote that on Android, the application lifecycle does not include VM termination,\n so calling this method will not ensure that files are deleted. Instead, you should\n use the most appropriate out of:\n \nSee also:\n"}, {"class_name": "File", "params": [{"param_name": ["obj"], "param_description": " The object to be compared with this abstract pathname", "param_type": "Object"}], "method_name": "equals", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the objects are the same;\n          false otherwise"], "return_name": []}, "method_description": "Tests this abstract pathname for equality with the given object.\n Returns true if and only if the argument is not\n null and is an abstract pathname that denotes the same file\n or directory as this abstract pathname.  Whether or not two abstract\n pathnames are equal depends upon the underlying system.  On UNIX\n systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\n systems it is not.\n"}, {"class_name": "File", "params": [], "method_name": "exists", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file or directory denoted\n          by this abstract pathname exists; false otherwise"], "return_name": []}, "method_description": "Tests whether the file or directory denoted by this abstract pathname\n exists.\n"}, {"class_name": "File", "params": [], "method_name": "getAbsoluteFile", "return_value": {"return_type": ["File"], "return_description": ["The absolute abstract pathname denoting the same file or\n          directory as this abstract pathname"], "return_name": []}, "method_description": "Returns the absolute form of this abstract pathname.  Equivalent to\n new\u00a0File(this.getAbsolutePath()).\n"}, {"class_name": "File", "params": [], "method_name": "getAbsolutePath", "return_value": {"return_type": ["String"], "return_description": ["The absolute pathname string denoting the same file or\n          directory as this abstract pathname"], "return_name": []}, "method_description": "Returns the absolute path of this file. An absolute path is a path that starts at a root\n of the file system. On Android, there is only one root: /.\n\n \nA common use for absolute paths is when passing paths to a Process as\n command-line arguments, to remove the requirement implied by relative paths, that the\n child must have the same working directory as its parent.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "getCanonicalFile", "return_value": {"return_type": ["File"], "return_description": ["The canonical pathname string denoting the same file or\n          directory as this abstract pathname"], "return_name": []}, "method_description": "Returns the canonical form of this abstract pathname.  Equivalent to\n new\u00a0File(this.getCanonicalPath()).\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "getCanonicalPath", "return_value": {"return_type": ["String"], "return_description": ["The canonical pathname string denoting the same file or\n          directory as this abstract pathname"], "return_name": []}, "method_description": "Returns the canonical pathname string of this abstract pathname.\n\n \n A canonical pathname is both absolute and unique.  The precise\n definition of canonical form is system-dependent.  This method first\n converts this pathname to absolute form if necessary, as if by invoking the\n getAbsolutePath() method, and then maps it to its unique form in a\n system-dependent way.  This typically involves removing redundant names\n such as \".\" and \"..\" from the pathname, resolving\n symbolic links (on UNIX platforms), and converting drive letters to a\n standard case (on Microsoft Windows platforms).\n\n \n Every pathname that denotes an existing file or directory has a\n unique canonical form.  Every pathname that denotes a nonexistent file\n or directory also has a unique canonical form.  The canonical form of\n the pathname of a nonexistent file or directory may be different from\n the canonical form of the same pathname after the file or directory is\n created.  Similarly, the canonical form of the pathname of an existing\n file or directory may be different from the canonical form of the same\n pathname after the file or directory is deleted.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "getFreeSpace", "return_value": {"return_type": ["long"], "return_description": ["The number of unallocated bytes on the partition or 0L\n          if the abstract pathname does not name a partition.  This\n          value will be less than or equal to the total file system size\n          returned by getTotalSpace()."], "return_name": []}, "method_description": "Returns the number of unallocated bytes in the partition named by this abstract path name.\n\n \n The returned number of unallocated bytes is a hint, but not\n a guarantee, that it is possible to use most or any of these\n bytes.  The number of unallocated bytes is most likely to be\n accurate immediately after this call.  It is likely to be made\n inaccurate by any external I/O operations including those made\n on the system outside of this virtual machine.  This method\n makes no guarantee that write operations to this file system\n will succeed.\n"}, {"class_name": "File", "params": [], "method_name": "getName", "return_value": {"return_type": ["String"], "return_description": ["The name of the file or directory denoted by this abstract\n          pathname, or the empty string if this pathname's name sequence\n          is empty"], "return_name": []}, "method_description": "Returns the name of the file or directory denoted by this abstract\n pathname.  This is just the last name in the pathname's name\n sequence.  If the pathname's name sequence is empty, then the empty\n string is returned.\n"}, {"class_name": "File", "params": [], "method_name": "getParent", "return_value": {"return_type": ["String"], "return_description": ["The pathname string of the parent directory named by this\n          abstract pathname, or null if this pathname\n          does not name a parent"], "return_name": []}, "method_description": "Returns the pathname string of this abstract pathname's parent, or\n null if this pathname does not name a parent directory.\n\n \n The parent of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\n"}, {"class_name": "File", "params": [], "method_name": "getParentFile", "return_value": {"return_type": ["File"], "return_description": ["The abstract pathname of the parent directory named by this\n          abstract pathname, or null if this pathname\n          does not name a parent"], "return_name": []}, "method_description": "Returns the abstract pathname of this abstract pathname's parent,\n or null if this pathname does not name a parent\n directory.\n\n \n The parent of an abstract pathname consists of the\n pathname's prefix, if any, and each name in the pathname's name\n sequence except for the last.  If the name sequence is empty then\n the pathname does not name a parent directory.\n"}, {"class_name": "File", "params": [], "method_name": "getPath", "return_value": {"return_type": ["String"], "return_description": ["The string form of this abstract pathname"], "return_name": []}, "method_description": "Converts this abstract pathname into a pathname string.  The resulting\n string uses the default name-separator character to\n separate the names in the name sequence.\n"}, {"class_name": "File", "params": [], "method_name": "getTotalSpace", "return_value": {"return_type": ["long"], "return_description": ["The size, in bytes, of the partition or 0L if this\n          abstract pathname does not name a partition"], "return_name": []}, "method_description": "Returns the size of the partition named by this\n abstract pathname.\n"}, {"class_name": "File", "params": [], "method_name": "getUsableSpace", "return_value": {"return_type": ["long"], "return_description": ["The number of available bytes on the partition or 0L\n          if the abstract pathname does not name a partition.  On\n          systems where this information is not available, this method\n          will be equivalent to a call to getFreeSpace()."], "return_name": []}, "method_description": "Returns the number of bytes available to this virtual machine on the\n partition named by this abstract pathname.  When\n possible, this method checks for write permissions and other operating\n system restrictions and will therefore usually provide a more accurate\n estimate of how much new data can actually be written than getFreeSpace().\n\n \n The returned number of available bytes is a hint, but not a\n guarantee, that it is possible to use most or any of these bytes.  The\n number of unallocated bytes is most likely to be accurate immediately\n after this call.  It is likely to be made inaccurate by any external\n I/O operations including those made on the system outside of this\n virtual machine.  This method makes no guarantee that write operations\n to this file system will succeed.\n\n \n On Android (and other Unix-based systems), this method returns the number of free bytes\n available to non-root users, regardless of whether you're actually running as root,\n and regardless of any quota or other restrictions that might apply to the user.\n (The getFreeSpace method returns the number of bytes potentially available to root.)\n"}, {"class_name": "File", "params": [], "method_name": "hashCode", "return_value": {"return_type": ["int"], "return_description": ["A hash code for this abstract pathname"], "return_name": []}, "method_description": "Computes a hash code for this abstract pathname.  Because equality of\n abstract pathnames is inherently system-dependent, so is the computation\n of their hash codes.  On UNIX systems, the hash code of an abstract\n pathname is equal to the exclusive or of the hash code\n of its pathname string and the decimal value\n 1234321.  On Microsoft Windows systems, the hash\n code is equal to the exclusive or of the hash code of\n its pathname string converted to lower case and the decimal\n value 1234321.  Locale is not taken into account on\n lowercasing the pathname string.\n"}, {"class_name": "File", "params": [], "method_name": "isAbsolute", "return_value": {"return_type": ["boolean"], "return_description": ["true if this abstract pathname is absolute,\n          false otherwise"], "return_name": []}, "method_description": "Tests whether this abstract pathname is absolute.  The definition of\n absolute pathname is system dependent.  On Android, absolute paths start with\n the character '/'.\n"}, {"class_name": "File", "params": [], "method_name": "isDirectory", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file denoted by this\n          abstract pathname exists and is a directory;\n          false otherwise"], "return_name": []}, "method_description": "Tests whether the file denoted by this abstract pathname is a\n directory.\n\n \n Where it is required to distinguish an I/O exception from the case\n that the file is not a directory, or where several attributes of the\n same file are required at the same time, then the Files.readAttributes method may be used.\n"}, {"class_name": "File", "params": [], "method_name": "isFile", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file denoted by this\n          abstract pathname exists and is a normal file;\n          false otherwise"], "return_name": []}, "method_description": "Tests whether the file denoted by this abstract pathname is a normal\n file.  A file is normal if it is not a directory and, in\n addition, satisfies other system-dependent criteria.  Any non-directory\n file created by a Java application is guaranteed to be a normal file.\n\n \n Where it is required to distinguish an I/O exception from the case\n that the file is not a normal file, or where several attributes of the\n same file are required at the same time, then the Files.readAttributes method may be used.\n"}, {"class_name": "File", "params": [], "method_name": "isHidden", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the file denoted by this\n          abstract pathname is hidden according to the conventions of the\n          underlying platform"], "return_name": []}, "method_description": "Tests whether the file named by this abstract pathname is a hidden\n file.  The exact definition of hidden is system-dependent.  On\n UNIX systems, a file is considered to be hidden if its name begins with\n a period character ('.').  On Microsoft Windows systems, a file is\n considered to be hidden if it has been marked as such in the filesystem.\n"}, {"class_name": "File", "params": [], "method_name": "lastModified", "return_value": {"return_type": ["long"], "return_description": ["A long value representing the time the file was\n          last modified, measured in milliseconds since the epoch\n          (00:00:00 GMT, January 1, 1970), or 0L if the\n          file does not exist or if an I/O error occurs"], "return_name": []}, "method_description": "Returns the time that the file denoted by this abstract pathname was\n last modified.\n\n \n Where it is required to distinguish an I/O exception from the case\n where 0L is returned, or where several attributes of the\n same file are required at the same time, or where the time of last\n access or the creation time are required, then the Files.readAttributes method may be used.\n"}, {"class_name": "File", "params": [], "method_name": "length", "return_value": {"return_type": ["long"], "return_description": ["The length, in bytes, of the file denoted by this abstract\n          pathname, or 0L if the file does not exist.  Some\n          operating systems may return 0L for pathnames\n          denoting system-dependent entities such as devices or pipes."], "return_name": []}, "method_description": "Returns the length of the file denoted by this abstract pathname.\n The return value is unspecified if this pathname denotes a directory.\n\n \n Where it is required to distinguish an I/O exception from the case\n that 0L is returned, or where several attributes of the same file\n are required at the same time, then the Files.readAttributes method may be used.\n"}, {"class_name": "File", "params": [{"param_name": ["filter"], "param_description": " A filename filter", "param_type": "FilenameFilter"}], "method_name": "list", "return_value": {"return_type": ["String[]"], "return_description": ["An array of strings naming the files and directories in the\n          directory denoted by this abstract pathname that were accepted\n          by the given filter.  The array will be empty if the\n          directory is empty or if no names were accepted by the filter.\n          Returns null if this abstract pathname does not denote\n          a directory, or if an I/O error occurs."], "return_name": []}, "method_description": "Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname that satisfy the specified\n filter.  The behavior of this method is the same as that of the\n list() method, except that the strings in the returned array\n must satisfy the filter.  If the given filter is null\n then all names are accepted.  Otherwise, a name satisfies the filter if\n and only if the value true results when the FilenameFilter.accept(File,\u00a0String) method\n of the filter is invoked on this abstract pathname and the name of a\n file or directory in the directory that it denotes.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "list", "return_value": {"return_type": ["String[]"], "return_description": ["An array of strings naming the files and directories in the\n          directory denoted by this abstract pathname.  The array will be\n          empty if the directory is empty.  Returns null if\n          this abstract pathname does not denote a directory, or if an\n          I/O error occurs."], "return_name": []}, "method_description": "Returns an array of strings naming the files and directories in the\n directory denoted by this abstract pathname.\n\n \n If this abstract pathname does not denote a directory, then this\n method returns null.  Otherwise an array of strings is\n returned, one for each file or directory in the directory.  Names\n denoting the directory itself and the directory's parent directory are\n not included in the result.  Each string is a file name rather than a\n complete path.\n\n \n There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n \n Note that the Files class defines the newDirectoryStream method to\n open a directory and iterate over the names of the files in the directory.\n This may use less resources when working with very large directories, and\n may be more responsive when working with remote directories.\n"}, {"class_name": "File", "params": [], "method_name": "listFiles", "return_value": {"return_type": ["File[]"], "return_description": ["An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract pathname.\n          The array will be empty if the directory is empty.  Returns\n          null if this abstract pathname does not denote a\n          directory, or if an I/O error occurs."], "return_name": []}, "method_description": "Returns an array of abstract pathnames denoting the files in the\n directory denoted by this abstract pathname.\n\n \n If this abstract pathname does not denote a directory, then this\n method returns null.  Otherwise an array of File objects\n is returned, one for each file or directory in the directory.  Pathnames\n denoting the directory itself and the directory's parent directory are\n not included in the result.  Each resulting abstract pathname is\n constructed from this abstract pathname using the File(File,\u00a0String) constructor.  Therefore if this\n pathname is absolute then each resulting pathname is absolute; if this\n pathname is relative then each resulting pathname will be relative to\n the same directory.\n\n \n There is no guarantee that the name strings in the resulting array\n will appear in any specific order; they are not, in particular,\n guaranteed to appear in alphabetical order.\n\n \n Note that the Files class defines the newDirectoryStream method\n to open a directory and iterate over the names of the files in the\n directory. This may use less resources when working with very large\n directories.\n"}, {"class_name": "File", "params": [{"param_name": ["filter"], "param_description": " A file filter", "param_type": "FileFilter"}], "method_name": "listFiles", "return_value": {"return_type": ["File[]"], "return_description": ["An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract pathname.\n          The array will be empty if the directory is empty.  Returns\n          null if this abstract pathname does not denote a\n          directory, or if an I/O error occurs."], "return_name": []}, "method_description": "Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the same\n as that of the listFiles() method, except that the pathnames in\n the returned array must satisfy the filter.  If the given filter\n is null then all pathnames are accepted.  Otherwise, a pathname\n satisfies the filter if and only if the value true results when\n the FileFilter.accept(File) method of the\n filter is invoked on the pathname.\nSee also:\n"}, {"class_name": "File", "params": [{"param_name": ["filter"], "param_description": " A filename filter", "param_type": "FilenameFilter"}], "method_name": "listFiles", "return_value": {"return_type": ["File[]"], "return_description": ["An array of abstract pathnames denoting the files and\n          directories in the directory denoted by this abstract pathname.\n          The array will be empty if the directory is empty.  Returns\n          null if this abstract pathname does not denote a\n          directory, or if an I/O error occurs."], "return_name": []}, "method_description": "Returns an array of abstract pathnames denoting the files and\n directories in the directory denoted by this abstract pathname that\n satisfy the specified filter.  The behavior of this method is the same\n as that of the listFiles() method, except that the pathnames in\n the returned array must satisfy the filter.  If the given filter\n is null then all pathnames are accepted.  Otherwise, a pathname\n satisfies the filter if and only if the value true results when\n the FilenameFilter.accept(File,\u00a0String) method of the filter is\n invoked on this abstract pathname and the name of a file or directory in\n the directory that it denotes.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "listRoots", "return_value": {"return_type": ["File[]"], "return_description": [""], "return_name": []}, "method_description": "Returns the file system roots. On Android and other Unix systems, there is\n a single root, /.\n\n"}, {"class_name": "File", "params": [], "method_name": "mkdir", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the directory was\n          created; false otherwise"], "return_name": []}, "method_description": "Creates the directory named by this abstract pathname.\n"}, {"class_name": "File", "params": [], "method_name": "mkdirs", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the directory was created,\n          along with all necessary parent directories; false\n          otherwise"], "return_name": []}, "method_description": "Creates the directory named by this abstract pathname, including any\n necessary but nonexistent parent directories.  Note that if this\n operation fails it may have succeeded in creating some of the necessary\n parent directories.\n"}, {"class_name": "File", "params": [{"param_name": ["dest"], "param_description": " The new abstract pathname for the named file", "param_type": "File"}], "method_name": "renameTo", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the renaming succeeded;\n          false otherwise"], "return_name": []}, "method_description": "Renames the file denoted by this abstract pathname.\n\n \nMany failures are possible. Some of the more likely failures include:\n \nThe return value should always be checked to make sure\n that the rename operation was successful.\n\n \n Note that the Files class defines the move method to move or rename a file in a\n platform independent manner.\n"}, {"class_name": "File", "params": [{"param_name": ["executable"], "param_description": " If true, sets the access permission to allow execute\n          operations; if false to disallow execute operations", "param_type": "boolean"}, {"param_name": ["ownerOnly"], "param_description": " If true, the execute permission applies only to the\n          owner's execute permission; otherwise, it applies to everybody.\n          If the underlying file system can not distinguish the owner's\n          execute permission from that of others, then the permission will\n          apply to everybody, regardless of this value.", "param_type": "boolean"}], "method_name": "setExecutable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          executable is false and the underlying\n          file system does not implement an execute permission, then the\n          operation will fail."], "return_name": []}, "method_description": "Sets the owner's or everybody's execute permission for this abstract\n pathname.\n\n \n The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required.\n"}, {"class_name": "File", "params": [{"param_name": ["executable"], "param_description": " If true, sets the access permission to allow execute\n          operations; if false to disallow execute operations", "param_type": "boolean"}], "method_name": "setExecutable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded.  The\n           operation will fail if the user does not have permission to\n           change the access permissions of this abstract pathname.  If\n           executable is false and the underlying\n           file system does not implement an execute permission, then the\n           operation will fail."], "return_name": []}, "method_description": "A convenience method to set the owner's execute permission for this\n abstract pathname.\n\n \nAn invocation of this method of the form file.setExcutable(arg)\n behaves in exactly the same way as the invocation\n\n \n"}, {"class_name": "File", "params": [{"param_name": ["time"], "param_description": " The new last-modified time, measured in milliseconds since\n               the epoch (00:00:00 GMT, January 1, 1970)", "param_type": "long"}], "method_name": "setLastModified", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded;\n          false otherwise"], "return_name": []}, "method_description": "Sets the last-modified time of the file or directory named by this\n abstract pathname.\n\n \n All platforms support file-modification times to the nearest second,\n but some provide more precision.  The argument will be truncated to fit\n the supported precision.  If the operation succeeds and no intervening\n operations on the file take place, then the next invocation of the\n lastModified() method will return the (possibly\n truncated) time argument that was passed to this method.\n"}, {"class_name": "File", "params": [], "method_name": "setReadOnly", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded;\n          false otherwise"], "return_name": []}, "method_description": "Marks the file or directory named by this abstract pathname so that\n only read operations are allowed. After invoking this method the file\n or directory will not change until it is either deleted or marked\n to allow write access. Whether or not a read-only file or\n directory may be deleted depends upon the underlying system.\n"}, {"class_name": "File", "params": [{"param_name": ["readable"], "param_description": " If true, sets the access permission to allow read\n          operations; if false to disallow read operations", "param_type": "boolean"}], "method_name": "setReadable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          readable is false and the underlying\n          file system does not implement a read permission, then the\n          operation will fail."], "return_name": []}, "method_description": "A convenience method to set the owner's read permission for this abstract\n pathname.\n\n \nAn invocation of this method of the form file.setReadable(arg)\n behaves in exactly the same way as the invocation\n\n \n"}, {"class_name": "File", "params": [{"param_name": ["readable"], "param_description": " If true, sets the access permission to allow read\n          operations; if false to disallow read operations", "param_type": "boolean"}, {"param_name": ["ownerOnly"], "param_description": " If true, the read permission applies only to the\n          owner's read permission; otherwise, it applies to everybody.  If\n          the underlying file system can not distinguish the owner's read\n          permission from that of others, then the permission will apply to\n          everybody, regardless of this value.", "param_type": "boolean"}], "method_name": "setReadable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname.  If\n          readable is false and the underlying\n          file system does not implement a read permission, then the\n          operation will fail."], "return_name": []}, "method_description": "Sets the owner's or everybody's read permission for this abstract\n pathname.\n\n \n The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required.\n"}, {"class_name": "File", "params": [{"param_name": ["writable"], "param_description": " If true, sets the access permission to allow write\n          operations; if false to disallow write operations", "param_type": "boolean"}, {"param_name": ["ownerOnly"], "param_description": " If true, the write permission applies only to the\n          owner's write permission; otherwise, it applies to everybody.  If\n          the underlying file system can not distinguish the owner's write\n          permission from that of others, then the permission will apply to\n          everybody, regardless of this value.", "param_type": "boolean"}], "method_name": "setWritable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded. The\n          operation will fail if the user does not have permission to change\n          the access permissions of this abstract pathname."], "return_name": []}, "method_description": "Sets the owner's or everybody's write permission for this abstract\n pathname.\n\n \n The Files class defines methods that operate on\n file attributes including file permissions. This may be used when finer\n manipulation of file permissions is required.\n"}, {"class_name": "File", "params": [{"param_name": ["writable"], "param_description": " If true, sets the access permission to allow write\n          operations; if false to disallow write operations", "param_type": "boolean"}], "method_name": "setWritable", "return_value": {"return_type": ["boolean"], "return_description": ["true if and only if the operation succeeded.  The\n          operation will fail if the user does not have permission to\n          change the access permissions of this abstract pathname."], "return_name": []}, "method_description": "A convenience method to set the owner's write permission for this abstract\n pathname.\n\n \n An invocation of this method of the form file.setWritable(arg)\n behaves in exactly the same way as the invocation\n\n \n"}, {"class_name": "File", "params": [], "method_name": "toPath", "return_value": {"return_type": ["Path"], "return_description": ["a Path constructed from this abstract path"], "return_name": []}, "method_description": "Returns a java.nio.file.Path object constructed from the\n this abstract path. The resulting Path is associated with the\n default-filesystem.\n\n \n The first invocation of this method works as if invoking it were\n equivalent to evaluating the expression:\n \n If this abstract pathname is the empty abstract pathname then this\n method returns a Path that may be used to access the current\n user directory.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "toString", "return_value": {"return_type": ["String"], "return_description": ["The string form of this abstract pathname"], "return_name": []}, "method_description": "Returns the pathname string of this abstract pathname.  This is just the\n string returned by the getPath() method.\n"}, {"class_name": "File", "params": [], "method_name": "toURI", "return_value": {"return_type": ["URI"], "return_description": ["An absolute, hierarchical URI with a scheme equal to\n          \"file\", a path representing this abstract pathname,\n          and undefined authority, query, and fragment components"], "return_name": []}, "method_description": "Constructs a file: URI that represents this abstract pathname.\n\n \n The exact form of the URI is system-dependent.  If it can be\n determined that the file denoted by this abstract pathname is a\n directory, then the resulting URI will end with a slash.\n\n \n For a given abstract pathname f, it is guaranteed that\n\n \n Note that when this abstract pathname represents a UNC pathname then\n all components of the UNC (including the server name component) are encoded\n in the URI path. The authority component is undefined, meaning\n that it is represented as null. The Path class defines the\n toUri method to encode the server name in the authority\n component of the resulting URI. The toPath method\n may be used to obtain a Path representing this abstract pathname.\nSee also:\n"}, {"class_name": "File", "params": [], "method_name": "toURL", "return_value": {"return_type": ["URL"], "return_description": ["A URL object representing the equivalent file URL"], "return_name": []}, "method_description": "\n\n\n      This method was deprecated\n      in API level 9.\n    This method does not automatically escape characters that\n are illegal in URLs.  It is recommended that new code convert an\n abstract pathname into a URL by first converting it into a URI, via the\n toURI method, and then converting the URI into a URL\n via the URI.toURL method.\n\n  \nConverts this abstract pathname into a file: URL.  The\n exact form of the URL is system-dependent.  If it can be determined that\n the file denoted by this abstract pathname is a directory, then the\n resulting URL will end with a slash.\nSee also:\n"}]}
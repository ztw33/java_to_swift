{"Vars": null, "interface_list": [""], "class_description": "A file output stream is an output stream for writing data to a\n File or to a FileDescriptor. Whether or not\n a file is available or may be created depends upon the underlying\n platform.  Some platforms, in particular, allow a file to be opened\n for writing by only one FileOutputStream (or other\n file-writing object) at a time.  In such situations the constructors in\n this class will fail if the file involved is already open. FileOutputStream is meant for writing streams of raw bytes\n such as image data. For writing streams of characters, consider using\n FileWriter. ", "class_inherit_list": ["OutputStream"], "package_name": "java.io", "subclass_list": ["ParcelFileDescriptor.AutoCloseOutputStream", "ParcelFileDescriptor.AutoCloseOutputStream", "ParcelFileDescriptor.close()"], "class_name": "FileOutputStream", "Methods": [{"class_name": "FileOutputStream", "params": [{"param_name": ["name"], "param_description": " the system-dependent filename", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a file output stream to write to the file with the\n specified name. A new FileDescriptor object is\n created to represent this file connection.\n \n\n First, if there is a security manager, its checkWrite\n method is called with name as its argument.\n \n\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["name"], "param_description": " the system-dependent file name", "param_type": "String"}, {"param_name": ["append"], "param_description": " if true, then bytes will be written\n                   to the end of the file rather than the beginning", "param_type": "boolean"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a file output stream to write to the file with the specified\n name.  If the second argument is true, then\n bytes will be written to the end of the file rather than the beginning.\n A new FileDescriptor object is created to represent this\n file connection.\n \n\n First, if there is a security manager, its checkWrite\n method is called with name as its argument.\n \n\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["file"], "param_description": " the file to be opened for writing.", "param_type": "File"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a file output stream to write to the file represented by\n the specified File object. A new\n FileDescriptor object is created to represent this\n file connection.\n \n\n First, if there is a security manager, its checkWrite\n method is called with the path represented by the file\n argument as its argument.\n \n\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["file"], "param_description": " the file to be opened for writing.", "param_type": "File"}, {"param_name": ["append"], "param_description": " if true, then bytes will be written\n                   to the end of the file rather than the beginning", "param_type": "boolean"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a file output stream to write to the file represented by\n the specified File object. If the second argument is\n true, then bytes will be written to the end of the file\n rather than the beginning. A new FileDescriptor object is\n created to represent this file connection.\n \n\n First, if there is a security manager, its checkWrite\n method is called with the path represented by the file\n argument as its argument.\n \n\n If the file exists but is a directory rather than a regular file, does\n not exist but cannot be created, or cannot be opened for any other\n reason then a FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["fdObj"], "param_description": " the file descriptor to be opened for writing\n", "param_type": "FileDescriptor"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a file output stream to write to the specified file\n descriptor, which represents an existing connection to an actual\n file in the file system.\n \n\n First, if there is a security manager, its checkWrite\n method is called with the file descriptor fdObj\n argument as its argument.\n \n\n If fdObj is null then a NullPointerException\n is thrown.\n \n\n This constructor does not throw an exception if fdObj\n is invalid.\n However, if the methods are invoked on the resulting stream to attempt\n I/O on the stream, an IOException is thrown.\n"}, {"class_name": "FileOutputStream", "params": [], "method_name": "close", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Closes this file output stream and releases any system resources\n associated with this stream. This file output stream may no longer\n be used for writing bytes.\n\n \n If this stream has an associated channel then the channel is closed\n as well.\n"}, {"class_name": "FileOutputStream", "params": [], "method_name": "getChannel", "return_value": {"return_type": ["FileChannel"], "return_description": ["the file channel associated with this file output stream"], "return_name": []}, "method_description": "Returns the unique FileChannel\n object associated with this file output stream.\n\n \n The initial position of the returned channel will be equal to the\n number of bytes written to the file so far unless this stream is in\n append mode, in which case it will be equal to the size of the file.\n Writing bytes to this stream will increment the channel's position\n accordingly.  Changing the channel's position, either explicitly or by\n writing, will change this stream's file position.\n"}, {"class_name": "FileOutputStream", "params": [], "method_name": "getFD", "return_value": {"return_type": ["FileDescriptor"], "return_description": ["the FileDescriptor object that represents\n          the connection to the file in the file system being used\n          by this FileOutputStream object."], "return_name": []}, "method_description": "Returns the file descriptor associated with this stream.\nSee also:\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["b"], "param_description": " the data.", "param_type": "byte[]"}], "method_name": "write", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Writes b.length bytes from the specified byte array\n to this file output stream.\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["b"], "param_description": " the data.", "param_type": "byte[]"}, {"param_name": ["off"], "param_description": " the start offset in the data.", "param_type": "int"}, {"param_name": ["len"], "param_description": " the number of bytes to write.", "param_type": "int"}], "method_name": "write", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Writes len bytes from the specified byte array\n starting at offset off to this file output stream.\n"}, {"class_name": "FileOutputStream", "params": [{"param_name": ["b"], "param_description": " the byte to be written.", "param_type": "int"}], "method_name": "write", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Writes the specified byte to this file output stream. Implements\n the write method of OutputStream.\n"}]}
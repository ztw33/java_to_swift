{"Vars": null, "interface_list": ["Serializable", "Comparable<String>", "CharSequence"], "class_description": "The String class represents character strings. All\n string literals in Java programs, such as \"abc\", are\n implemented as instances of this class. Strings are constant; their values cannot be changed after they\n are created. String buffers support mutable strings.\n Because String objects are immutable they can be shared. For example: is equivalent to: Here are some more examples of how strings can be used: The class String includes methods for examining\n individual characters of the sequence, for comparing strings, for\n searching strings, for extracting substrings, and for creating a\n copy of a string with all characters translated to uppercase or to\n lowercase. Case mapping is based on the Unicode Standard version\n specified by the Character class. The Java language provides special support for the string\n concatenation operator (\u00a0+\u00a0), and for conversion of\n other objects to strings. String concatenation is implemented\n through the StringBuilder(or StringBuffer)\n class and its append method.\n String conversions are implemented through the method\n toString, defined by Object and\n inherited by all classes in Java. For additional information on\n string concatenation and conversion, see Gosling, Joy, and Steele,\n The Java Language Specification. Unless otherwise noted, passing a null argument to a constructor\n or method in this class will cause a NullPointerException to be\n thrown. A String represents a string in the UTF-16 format\n in which supplementary characters are represented by surrogate\n pairs (see the section Unicode\n Character Representations in the Character class for\n more information).\n Index values refer to char code units, so a supplementary\n character uses two positions in a String. The String class provides methods for dealing with\n Unicode code points (i.e., characters), in addition to those for\n dealing with Unicode code units (i.e., char values). ", "class_inherit_list": ["Object"], "package_name": "java.lang", "subclass_list": [], "class_name": "String", "Methods": [{"class_name": "String", "params": [], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Initializes a newly created String object so that it represents\n an empty character sequence.  Note that use of this constructor is\n unnecessary since Strings are immutable.\n\n"}, {"class_name": "String", "params": [{"param_name": ["original"], "param_description": " A String\n", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Initializes a newly created String object so that it represents\n the same sequence of characters as the argument; in other words, the\n newly created string is a copy of the argument string. Unless an\n explicit copy of original is needed, use of this constructor is\n unnecessary since Strings are immutable.\n"}, {"class_name": "String", "params": [{"param_name": ["value"], "param_description": " The initial value of the string\n", "param_type": "char[]"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Allocates a new String so that it represents the sequence of\n characters currently contained in the character array argument. The\n contents of the character array are copied; subsequent modification of\n the character array does not affect the newly created string.\n"}, {"class_name": "String", "params": [{"param_name": ["value"], "param_description": " Array that is the source of characters", "param_type": "char[]"}, {"param_name": ["offset"], "param_description": " The initial offset", "param_type": "int"}, {"param_name": ["count"], "param_description": " The length", "param_type": "int"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Allocates a new String that contains characters from a subarray\n of the character array argument. The offset argument is the\n index of the first character of the subarray and the count\n argument specifies the length of the subarray. The contents of the\n subarray are copied; subsequent modification of the character array does\n not affect the newly created string.\n"}, {"class_name": "String", "params": [{"param_name": ["codePoints"], "param_description": " Array that is the source of Unicode code points", "param_type": "int[]"}, {"param_name": ["offset"], "param_description": " The initial offset", "param_type": "int"}, {"param_name": ["count"], "param_description": " The length", "param_type": "int"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Allocates a new String that contains characters from a subarray\n of the Unicode code point array\n argument.  The offset argument is the index of the first code\n point of the subarray and the count argument specifies the\n length of the subarray.  The contents of the subarray are converted to\n chars; subsequent modification of the int array does not\n affect the newly created string.\n"}, {"class_name": "String", "params": [{"param_name": ["ascii"], "param_description": " The bytes to be converted to characters", "param_type": "byte[]"}, {"param_name": ["hibyte"], "param_description": " The top 8 bits of each 16-bit Unicode code unit", "param_type": "int"}, {"param_name": ["offset"], "param_description": " The initial offset", "param_type": "int"}, {"param_name": ["count"], "param_description": " The length", "param_type": "int"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "\n\n\n      This constructor was deprecated\n      in API level 1.\n    This method does not properly convert bytes into characters.\n As of JDK\u00a01.1, the preferred way to do this is via the\n String constructors that take a Charset, charset name, or that use the platform's\n default charset.\n  \nAllocates a new String constructed from a subarray of an array\n of 8-bit integer values.\n\n \n The offset argument is the index of the first byte of the\n subarray, and the count argument specifies the length of the\n subarray.\n\n \n Each byte in the subarray is converted to a char as\n specified in the method above.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["ascii"], "param_description": " The bytes to be converted to characters", "param_type": "byte[]"}, {"param_name": ["hibyte"], "param_description": " The top 8 bits of each 16-bit Unicode code unit", "param_type": "int"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "\n\n\n      This constructor was deprecated\n      in API level 1.\n    This method does not properly convert bytes into\n characters.  As of JDK\u00a01.1, the preferred way to do this is via the\n String constructors that take a Charset, charset name, or that use the platform's\n default charset.\n  \nAllocates a new String containing characters constructed from\n an array of 8-bit integer values. Each character cin the\n resulting string is constructed from the corresponding component\n b in the byte array such that:\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}, {"param_name": ["offset"], "param_description": " The index of the first byte to decode", "param_type": "int"}, {"param_name": ["length"], "param_description": " The number of bytes to decode", "param_type": "int"}, {"param_name": ["charsetName"], "param_description": " The name of a supported charset", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified subarray of\n bytes using the specified charset.  The length of the new String\n is a function of the charset, and hence may not be equal to the length\n of the subarray.\n\n \n The behavior of this constructor when the given bytes are not valid\n in the given charset is unspecified.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}, {"param_name": ["offset"], "param_description": " The index of the first byte to decode", "param_type": "int"}, {"param_name": ["length"], "param_description": " The number of bytes to decode", "param_type": "int"}, {"param_name": ["charset"], "param_description": " The charset to be used to\n         decode the bytes", "param_type": "Charset"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified subarray of\n bytes using the specified charset.\n The length of the new String is a function of the charset, and\n hence may not be equal to the length of the subarray.\n\n \n This method always replaces malformed-input and unmappable-character\n sequences with this charset's default replacement string.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}, {"param_name": ["charsetName"], "param_description": " The name of a supported charset", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified array of bytes\n using the specified charset.  The\n length of the new String is a function of the charset, and hence\n may not be equal to the length of the byte array.\n\n \n The behavior of this constructor when the given bytes are not valid\n in the given charset is unspecified.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}, {"param_name": ["charset"], "param_description": " The charset to be used to\n         decode the bytes", "param_type": "Charset"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified array of\n bytes using the specified charset.\n The length of the new String is a function of the charset, and\n hence may not be equal to the length of the byte array.\n\n \n This method always replaces malformed-input and unmappable-character\n sequences with this charset's default replacement string.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}, {"param_name": ["offset"], "param_description": " The index of the first byte to decode", "param_type": "int"}, {"param_name": ["length"], "param_description": " The number of bytes to decode", "param_type": "int"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified subarray of\n bytes using the platform's default charset.  The length of the new\n String is a function of the charset, and hence may not be equal\n to the length of the subarray.\n\n \n The behavior of this constructor when the given bytes are not valid\n in the default charset is unspecified.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["bytes"], "param_description": " The bytes to be decoded into characters", "param_type": "byte[]"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Constructs a new String by decoding the specified array of bytes\n using the platform's default charset.  The length of the new String is a function of the charset, and hence may not be equal to the\n length of the byte array.\n\n \n The behavior of this constructor when the given bytes are not valid\n in the default charset is unspecified.  The CharsetDecoder class should be used when more control\n over the decoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["buffer"], "param_description": " A StringBuffer\n", "param_type": "StringBuffer"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Allocates a new string that contains the sequence of characters\n currently contained in the string buffer argument. The contents of the\n string buffer are copied; subsequent modification of the string buffer\n does not affect the newly created string.\n"}, {"class_name": "String", "params": [{"param_name": ["builder"], "param_description": " A StringBuilder", "param_type": "StringBuilder"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Allocates a new string that contains the sequence of characters\n currently contained in the string builder argument. The contents of the\n string builder are copied; subsequent modification of the string builder\n does not affect the newly created string.\n\n \n This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred.\n"}, {"class_name": "String", "params": [{"param_name": ["index"], "param_description": " the index of the char value.", "param_type": "int"}], "method_name": "charAt", "return_value": {"return_type": ["char"], "return_description": ["the char value at the specified index of this string.\n             The first char value is at index 0."], "return_name": []}, "method_description": "Returns the char value at the\n specified index. An index ranges from 0 to\n length() - 1. The first char value of the sequence\n is at index 0, the next at index 1,\n and so on, as for array indexing.\n\n \nIf the char value specified by the index is a\n surrogate, the surrogate\n value is returned.\n"}, {"class_name": "String", "params": [{"param_name": ["index"], "param_description": " the index to the char values", "param_type": "int"}], "method_name": "codePointAt", "return_value": {"return_type": ["int"], "return_description": ["the code point value of the character at the\n             index"], "return_name": []}, "method_description": "Returns the character (Unicode code point) at the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 0 to\n length()- 1.\n\n \n If the char value specified at the given index\n is in the high-surrogate range, the following index is less\n than the length of this String, and the\n char value at the following index is in the\n low-surrogate range, then the supplementary code point\n corresponding to this surrogate pair is returned. Otherwise,\n the char value at the given index is returned.\n"}, {"class_name": "String", "params": [{"param_name": ["index"], "param_description": " the index following the code point that should be returned", "param_type": "int"}], "method_name": "codePointBefore", "return_value": {"return_type": ["int"], "return_description": ["the Unicode code point value before the given index."], "return_name": []}, "method_description": "Returns the character (Unicode code point) before the specified\n index. The index refers to char values\n (Unicode code units) and ranges from 1 to length.\n\n \n If the char value at (index - 1)\n is in the low-surrogate range, (index - 2) is not\n negative, and the char value at (index -\n 2) is in the high-surrogate range, then the\n supplementary code point value of the surrogate pair is\n returned. If the char value at index -\n 1 is an unpaired low-surrogate or a high-surrogate, the\n surrogate value is returned.\n"}, {"class_name": "String", "params": [{"param_name": ["beginIndex"], "param_description": " the index to the first char of\n the text range.", "param_type": "int"}, {"param_name": ["endIndex"], "param_description": " the index after the last char of\n the text range.", "param_type": "int"}], "method_name": "codePointCount", "return_value": {"return_type": ["int"], "return_description": ["the number of Unicode code points in the specified text\n range"], "return_name": []}, "method_description": "Returns the number of Unicode code points in the specified text\n range of this String. The text range begins at the\n specified beginIndex and extends to the\n char at index endIndex - 1. Thus the\n length (in chars) of the text range is\n endIndex-beginIndex. Unpaired surrogates within\n the text range count as one code point each.\n"}, {"class_name": "String", "params": [{"param_name": ["anotherString"], "param_description": " the String to be compared.", "param_type": "String"}], "method_name": "compareTo", "return_value": {"return_type": ["int"], "return_description": ["the value 0 if the argument string is equal to\n          this string; a value less than 0 if this string\n          is lexicographically less than the string argument; and a\n          value greater than 0 if this string is\n          lexicographically greater than the string argument."], "return_name": []}, "method_description": "Compares two strings lexicographically.\n The comparison is based on the Unicode value of each character in\n the strings. The character sequence represented by this\n String object is compared lexicographically to the\n character sequence represented by the argument string. The result is\n a negative integer if this String object\n lexicographically precedes the argument string. The result is a\n positive integer if this String object lexicographically\n follows the argument string. The result is zero if the strings\n are equal; compareTo returns 0 exactly when\n the equals(Object) method would return true.\n \n\n This is the definition of lexicographic ordering. If two strings are\n different, then either they have different characters at some index\n that is a valid index for both strings, or their lengths are different,\n or both. If they have different characters at one or more index\n positions, let k be the smallest such index; then the string\n whose character at position k has the smaller value, as\n determined by using the < operator, lexicographically precedes the\n other string. In this case, compareTo returns the\n difference of the two character values at position k in\n the two string -- that is, the value:\n \n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the String to be compared.", "param_type": "String"}], "method_name": "compareToIgnoreCase", "return_value": {"return_type": ["int"], "return_description": ["a negative integer, zero, or a positive integer as the\n          specified String is greater than, equal to, or less\n          than this String, ignoring case considerations."], "return_name": []}, "method_description": "Compares two strings lexicographically, ignoring case\n differences. This method returns an integer whose sign is that of\n calling compareTo with normalized versions of the strings\n where case differences have been eliminated by calling\n Character.toLowerCase(Character.toUpperCase(character)) on\n each character.\n \n\n Note that this method does not take locale into account,\n and will result in an unsatisfactory ordering for certain locales.\n The java.text package provides collators to allow\n locale-sensitive ordering.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the String that is concatenated to the end\n                of this String.", "param_type": "String"}], "method_name": "concat", "return_value": {"return_type": ["String"], "return_description": ["a string that represents the concatenation of this object's\n          characters followed by the string argument's characters."], "return_name": []}, "method_description": "Concatenates the specified string to the end of this string.\n \n\n If the length of the argument string is 0, then this\n String object is returned. Otherwise, a\n String object is returned that represents a character\n sequence that is the concatenation of the character sequence\n represented by this String object and the character\n sequence represented by the argument string.\n\n Examples:\n \n"}, {"class_name": "String", "params": [{"param_name": ["s"], "param_description": " the sequence to search for", "param_type": "CharSequence"}], "method_name": "contains", "return_value": {"return_type": ["boolean"], "return_description": ["true if this string contains s, false otherwise"], "return_name": []}, "method_description": "Returns true if and only if this string contains the specified\n sequence of char values.\n"}, {"class_name": "String", "params": [{"param_name": ["sb"], "param_description": " The StringBuffer to compare this String against", "param_type": "StringBuffer"}], "method_name": "contentEquals", "return_value": {"return_type": ["boolean"], "return_description": ["true if this String represents the same\n          sequence of characters as the specified StringBuffer,\n          false otherwise"], "return_name": []}, "method_description": "Compares this string to the specified StringBuffer.  The result\n is true if and only if this String represents the same\n sequence of characters as the specified StringBuffer. This method\n synchronizes on the StringBuffer.\n"}, {"class_name": "String", "params": [{"param_name": ["cs"], "param_description": " The sequence to compare this String against", "param_type": "CharSequence"}], "method_name": "contentEquals", "return_value": {"return_type": ["boolean"], "return_description": ["true if this String represents the same\n          sequence of char values as the specified sequence, false otherwise"], "return_name": []}, "method_description": "Compares this string to the specified CharSequence.  The\n result is true if and only if this String represents the\n same sequence of char values as the specified sequence. Note that if the\n CharSequence is a StringBuffer then the method\n synchronizes on it.\n"}, {"class_name": "String", "params": [{"param_name": ["data"], "param_description": " the character array.", "param_type": "char[]"}, {"param_name": ["offset"], "param_description": " initial offset of the subarray.", "param_type": "int"}, {"param_name": ["count"], "param_description": " length of the subarray.", "param_type": "int"}], "method_name": "copyValueOf", "return_value": {"return_type": ["String"], "return_description": ["a String that contains the characters of the\n          specified subarray of the character array."], "return_name": []}, "method_description": "Equivalent to valueOf(char[], int, int).\n"}, {"class_name": "String", "params": [{"param_name": ["data"], "param_description": " the character array.", "param_type": "char[]"}], "method_name": "copyValueOf", "return_value": {"return_type": ["String"], "return_description": ["a String that contains the characters of the\n          character array."], "return_name": []}, "method_description": "Equivalent to valueOf(char[]).\n"}, {"class_name": "String", "params": [{"param_name": ["suffix"], "param_description": " the suffix.", "param_type": "String"}], "method_name": "endsWith", "return_value": {"return_type": ["boolean"], "return_description": ["true if the character sequence represented by the\n          argument is a suffix of the character sequence represented by\n          this object; false otherwise. Note that the\n          result will be true if the argument is the\n          empty string or is equal to this String object\n          as determined by the equals(Object) method."], "return_name": []}, "method_description": "Tests if this string ends with the specified suffix.\n"}, {"class_name": "String", "params": [{"param_name": ["anObject"], "param_description": " The object to compare this String against", "param_type": "Object"}], "method_name": "equals", "return_value": {"return_type": ["boolean"], "return_description": ["true if the given object represents a String\n          equivalent to this string, false otherwise"], "return_name": []}, "method_description": "Compares this string to the specified object.  The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this\n object.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["anotherString"], "param_description": " The String to compare this String against", "param_type": "String"}], "method_name": "equalsIgnoreCase", "return_value": {"return_type": ["boolean"], "return_description": ["true if the argument is not null and it\n          represents an equivalent String ignoring case; false otherwise"], "return_name": []}, "method_description": "Compares this String to another String, ignoring case\n considerations.  Two strings are considered equal ignoring case if they\n are of the same length and corresponding characters in the two strings\n are equal ignoring case.\n\n \n Two characters c1 and c2 are considered the same\n ignoring case if at least one of the following is true:\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["l"], "param_description": " The locale to apply during\n         formatting.  If l is null then no localization\n         is applied.", "param_type": "Locale"}, {"param_name": ["format"], "param_description": " A format string", "param_type": "String"}, {"param_name": ["args"], "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the\n         conversion.", "param_type": "Object..."}], "method_name": "format", "return_value": {"return_type": ["String"], "return_description": ["A formatted string"], "return_name": []}, "method_description": "Returns a formatted string using the specified locale, format string,\n and arguments.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["format"], "param_description": " A format string", "param_type": "String"}, {"param_name": ["args"], "param_description": " Arguments referenced by the format specifiers in the format\n         string.  If there are more arguments than format specifiers, the\n         extra arguments are ignored.  The number of arguments is\n         variable and may be zero.  The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         The Java\u2122 Virtual Machine Specification.\n         The behaviour on a\n         null argument depends on the conversion.", "param_type": "Object..."}], "method_name": "format", "return_value": {"return_type": ["String"], "return_description": ["A formatted string"], "return_name": []}, "method_description": "Returns a formatted string using the specified format string and\n arguments.\n\n \n The locale always used is the one returned by Locale.getDefault().\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["charsetName"], "param_description": " The name of a supported charset", "param_type": "String"}], "method_name": "getBytes", "return_value": {"return_type": ["byte[]"], "return_description": ["The resultant byte array"], "return_name": []}, "method_description": "Encodes this String into a sequence of bytes using the named\n charset, storing the result into a new byte array.\n\n \n The behavior of this method when this string cannot be encoded in\n the given charset is unspecified.  The CharsetEncoder class should be used when more control\n over the encoding process is required.\n"}, {"class_name": "String", "params": [], "method_name": "getBytes", "return_value": {"return_type": ["byte[]"], "return_description": ["The resultant byte array"], "return_name": []}, "method_description": "Encodes this String into a sequence of bytes using the\n platform's default charset, storing the result into a new byte array.\n\n \n The behavior of this method when this string cannot be encoded in\n the default charset is unspecified.  The CharsetEncoder class should be used when more control\n over the encoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["charset"], "param_description": " The Charset to be used to encode\n         the String", "param_type": "Charset"}], "method_name": "getBytes", "return_value": {"return_type": ["byte[]"], "return_description": ["The resultant byte array"], "return_name": []}, "method_description": "Encodes this String into a sequence of bytes using the given\n charset, storing the result into a\n new byte array.\n\n \n This method always replaces malformed-input and unmappable-character\n sequences with this charset's default replacement byte array.  The\n CharsetEncoder class should be used when more\n control over the encoding process is required.\n"}, {"class_name": "String", "params": [{"param_name": ["srcBegin"], "param_description": " Index of the first character in the string to copy", "param_type": "int"}, {"param_name": ["srcEnd"], "param_description": " Index after the last character in the string to copy", "param_type": "int"}, {"param_name": ["dst"], "param_description": " The destination array", "param_type": "byte[]"}, {"param_name": ["dstBegin"], "param_description": " The start offset in the destination array", "param_type": "int"}], "method_name": "getBytes", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "\n\n\n      This method was deprecated\n      in API level 1.\n    This method does not properly convert characters into\n bytes.  As of JDK\u00a01.1, the preferred way to do this is via the\n getBytes() method, which uses the platform's default charset.\n  \nCopies characters from this string into the destination byte array. Each\n byte receives the 8 low-order bits of the corresponding character. The\n eight high-order bits of each character are not copied and do not\n participate in the transfer in any way.\n\n \n The first character to be copied is at index srcBegin; the\n last character to be copied is at index srcEnd-1.  The total\n number of characters to be copied is srcEnd-srcBegin. The\n characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:\n\n \n"}, {"class_name": "String", "params": [{"param_name": ["srcBegin"], "param_description": " index of the first character in the string\n                        to copy.", "param_type": "int"}, {"param_name": ["srcEnd"], "param_description": " index after the last character in the string\n                        to copy.", "param_type": "int"}, {"param_name": ["dst"], "param_description": " the destination array.", "param_type": "char[]"}, {"param_name": ["dstBegin"], "param_description": " the start offset in the destination array.", "param_type": "int"}], "method_name": "getChars", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Copies characters from this string into the destination character\n array.\n \n\n The first character to be copied is at index srcBegin;\n the last character to be copied is at index srcEnd-1\n (thus the total number of characters to be copied is\n srcEnd-srcBegin). The characters are copied into the\n subarray of dst starting at index dstBegin\n and ending at index:\n \n"}, {"class_name": "String", "params": [], "method_name": "hashCode", "return_value": {"return_type": ["int"], "return_description": ["a hash code value for this object."], "return_name": []}, "method_description": "Returns a hash code for this string. The hash code for a\n String object is computed as\n \n"}, {"class_name": "String", "params": [{"param_name": ["ch"], "param_description": " a character (Unicode code point).", "param_type": "int"}, {"param_name": ["fromIndex"], "param_description": " the index to start the search from.", "param_type": "int"}], "method_name": "indexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the first occurrence of the character in the\n          character sequence represented by this object that is greater\n          than or equal to fromIndex, or -1\n          if the character does not occur."], "return_name": []}, "method_description": "Returns the index within this string of the first occurrence of the\n specified character, starting the search at the specified index.\n \n\n If a character with value ch occurs in the\n character sequence represented by this String\n object at an index no smaller than fromIndex, then\n the index of the first such occurrence is returned. For values\n of ch in the range from 0 to 0xFFFF (inclusive),\n this is the smallest value k such that:\n \n\n There is no restriction on the value of fromIndex. If it\n is negative, it has the same effect as if it were zero: this entire\n string may be searched. If it is greater than the length of this\n string, it has the same effect as if it were equal to the length of\n this string: -1 is returned.\n\n \nAll indices are specified in char values\n (Unicode code units).\n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the substring to search for.", "param_type": "String"}], "method_name": "indexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the first occurrence of the specified substring,\n          or -1 if there is no such occurrence."], "return_name": []}, "method_description": "Returns the index within this string of the first occurrence of the\n specified substring.\n\n \nThe returned index is the smallest value k for which:\n \n"}, {"class_name": "String", "params": [{"param_name": ["ch"], "param_description": " a character (Unicode code point).", "param_type": "int"}], "method_name": "indexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the first occurrence of the character in the\n          character sequence represented by this object, or\n          -1 if the character does not occur."], "return_name": []}, "method_description": "Returns the index within this string of the first occurrence of\n the specified character. If a character with value\n ch occurs in the character sequence represented by\n this String object, then the index (in Unicode\n code units) of the first such occurrence is returned. For\n values of ch in the range from 0 to 0xFFFF\n (inclusive), this is the smallest value k such that:\n \n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the substring to search for.", "param_type": "String"}, {"param_name": ["fromIndex"], "param_description": " the index from which to start the search.", "param_type": "int"}], "method_name": "indexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the first occurrence of the specified substring,\n          starting at the specified index,\n          or -1 if there is no such occurrence."], "return_name": []}, "method_description": "Returns the index within this string of the first occurrence of the\n specified substring, starting at the specified index.\n\n \nThe returned index is the smallest value k for which:\n \n"}, {"class_name": "String", "params": [], "method_name": "intern", "return_value": {"return_type": ["String"], "return_description": ["a string that has the same contents as this string, but is\n          guaranteed to be from a pool of unique strings."], "return_name": []}, "method_description": "Returns a canonical representation for the string object.\n \n\n A pool of strings, initially empty, is maintained privately by the\n class String.\n \n\n When the intern method is invoked, if the pool already contains a\n string equal to this String object as determined by\n the equals(Object) method, then the string from the pool is\n returned. Otherwise, this String object is added to the\n pool and a reference to this String object is returned.\n \n\n It follows that for any two strings s and t,\n s.intern() == t.intern() is true\n if and only if s.equals(t) is true.\n \n\n All literal strings and string-valued constant expressions are\n interned. String literals are defined in section 3.10.5 of the\n The Java\u2122 Language Specification.\n"}, {"class_name": "String", "params": [], "method_name": "isEmpty", "return_value": {"return_type": ["boolean"], "return_description": ["true if length() is 0, otherwise\n false"], "return_name": []}, "method_description": "Returns true if, and only if, length() is 0.\n"}, {"class_name": "String", "params": [{"param_name": ["delimiter"], "param_description": " the delimiter that separates each element", "param_type": "CharSequence"}, {"param_name": ["elements"], "param_description": " the elements to join together.", "param_type": "CharSequence..."}], "method_name": "join", "return_value": {"return_type": ["String"], "return_description": ["a new String that is composed of the elements\n         separated by the delimiter"], "return_name": []}, "method_description": "Returns a new String composed of copies of the\n CharSequence elements joined together with a copy of\n the specified delimiter.\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["delimiter"], "param_description": " a sequence of characters that is used to separate each\n         of the elements in the resulting String", "param_type": "CharSequence"}, {"param_name": ["elements"], "param_description": " an Iterable that will have its elements\n         joined together.", "param_type": "Iterable"}], "method_name": "join", "return_value": {"return_type": ["String"], "return_description": ["a new String that is composed from the elements\n         argument"], "return_name": []}, "method_description": "Returns a new String composed of copies of the\n CharSequence elements joined together with a copy of the\n specified delimiter.\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["ch"], "param_description": " a character (Unicode code point).", "param_type": "int"}], "method_name": "lastIndexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the last occurrence of the character in the\n          character sequence represented by this object, or\n          -1 if the character does not occur."], "return_name": []}, "method_description": "Returns the index within this string of the last occurrence of\n the specified character. For values of ch in the\n range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n units) returned is the largest value k such that:\n \n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the substring to search for.", "param_type": "String"}, {"param_name": ["fromIndex"], "param_description": " the index to start the search from.", "param_type": "int"}], "method_name": "lastIndexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the last occurrence of the specified substring,\n          searching backward from the specified index,\n          or -1 if there is no such occurrence."], "return_name": []}, "method_description": "Returns the index within this string of the last occurrence of the\n specified substring, searching backward starting at the specified index.\n\n \nThe returned index is the largest value k for which:\n \n"}, {"class_name": "String", "params": [{"param_name": ["str"], "param_description": " the substring to search for.", "param_type": "String"}], "method_name": "lastIndexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the last occurrence of the specified substring,\n          or -1 if there is no such occurrence."], "return_name": []}, "method_description": "Returns the index within this string of the last occurrence of the\n specified substring.  The last occurrence of the empty string \"\"\n is considered to occur at the index value this.length().\n\n \nThe returned index is the largest value k for which:\n \n"}, {"class_name": "String", "params": [{"param_name": ["ch"], "param_description": " a character (Unicode code point).", "param_type": "int"}, {"param_name": ["fromIndex"], "param_description": " the index to start the search from. There is no\n          restriction on the value of fromIndex. If it is\n          greater than or equal to the length of this string, it has\n          the same effect as if it were equal to one less than the\n          length of this string: this entire string may be searched.\n          If it is negative, it has the same effect as if it were -1:\n          -1 is returned.", "param_type": "int"}], "method_name": "lastIndexOf", "return_value": {"return_type": ["int"], "return_description": ["the index of the last occurrence of the character in the\n          character sequence represented by this object that is less\n          than or equal to fromIndex, or -1\n          if the character does not occur before that point."], "return_name": []}, "method_description": "Returns the index within this string of the last occurrence of\n the specified character, searching backward starting at the\n specified index. For values of ch in the range\n from 0 to 0xFFFF (inclusive), the index returned is the largest\n value k such that:\n \nAll indices are specified in char values\n (Unicode code units).\n"}, {"class_name": "String", "params": [], "method_name": "length", "return_value": {"return_type": ["int"], "return_description": ["the length of the sequence of characters represented by this\n          object."], "return_name": []}, "method_description": "Returns the length of this string.\n The length is equal to the number of Unicode\n code units in the string.\n"}, {"class_name": "String", "params": [{"param_name": ["regex"], "param_description": " the regular expression to which this string is to be matched", "param_type": "String"}], "method_name": "matches", "return_value": {"return_type": ["boolean"], "return_description": ["true if, and only if, this string matches the\n          given regular expression"], "return_name": []}, "method_description": "Tells whether or not this string matches the given regular expression.\n\n \n An invocation of this method of the form\n str.matches(regex) yields exactly the\n same result as the expression\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["index"], "param_description": " the index to be offset", "param_type": "int"}, {"param_name": ["codePointOffset"], "param_description": " the offset in code points", "param_type": "int"}], "method_name": "offsetByCodePoints", "return_value": {"return_type": ["int"], "return_description": ["the index within this String"], "return_name": []}, "method_description": "Returns the index within this String that is\n offset from the given index by\n codePointOffset code points. Unpaired surrogates\n within the text range given by index and\n codePointOffset count as one code point each.\n"}, {"class_name": "String", "params": [{"param_name": ["ignoreCase"], "param_description": " if true, ignore case when comparing\n                       characters.", "param_type": "boolean"}, {"param_name": ["toffset"], "param_description": " the starting offset of the subregion in this\n                       string.", "param_type": "int"}, {"param_name": ["other"], "param_description": " the string argument.", "param_type": "String"}, {"param_name": ["ooffset"], "param_description": " the starting offset of the subregion in the string\n                       argument.", "param_type": "int"}, {"param_name": ["len"], "param_description": " the number of characters to compare.", "param_type": "int"}], "method_name": "regionMatches", "return_value": {"return_type": ["boolean"], "return_description": ["true if the specified subregion of this string\n          matches the specified subregion of the string argument;\n          false otherwise. Whether the matching is exact\n          or case insensitive depends on the ignoreCase\n          argument."], "return_name": []}, "method_description": "Tests if two string regions are equal.\n \n\n A substring of this String object is compared to a substring\n of the argument other. The result is true if these\n substrings represent character sequences that are the same, ignoring\n case if and only if ignoreCase is true. The substring of\n this String object to be compared begins at index\n toffset and has length len. The substring of\n other to be compared begins at index ooffset and\n has length len. The result is false if and only if\n at least one of the following is true:\n \n"}, {"class_name": "String", "params": [{"param_name": ["toffset"], "param_description": " the starting offset of the subregion in this string.", "param_type": "int"}, {"param_name": ["other"], "param_description": " the string argument.", "param_type": "String"}, {"param_name": ["ooffset"], "param_description": " the starting offset of the subregion in the string\n                    argument.", "param_type": "int"}, {"param_name": ["len"], "param_description": " the number of characters to compare.", "param_type": "int"}], "method_name": "regionMatches", "return_value": {"return_type": ["boolean"], "return_description": ["true if the specified subregion of this string\n          exactly matches the specified subregion of the string argument;\n          false otherwise."], "return_name": []}, "method_description": "Tests if two string regions are equal.\n \n\n A substring of this String object is compared to a substring\n of the argument other. The result is true if these substrings\n represent identical character sequences. The substring of this\n String object to be compared begins at index toffset\n and has length len. The substring of other to be compared\n begins at index ooffset and has length len. The\n result is false if and only if at least one of the following\n is true:\n \n"}, {"class_name": "String", "params": [{"param_name": ["target"], "param_description": " The sequence of char values to be replaced", "param_type": "CharSequence"}, {"param_name": ["replacement"], "param_description": " The replacement sequence of char values", "param_type": "CharSequence"}], "method_name": "replace", "return_value": {"return_type": ["String"], "return_description": ["The resulting string"], "return_name": []}, "method_description": "Replaces each substring of this string that matches the literal target\n sequence with the specified literal replacement sequence. The\n replacement proceeds from the beginning of the string to the end, for\n example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n \"ba\" rather than \"ab\".\n"}, {"class_name": "String", "params": [{"param_name": ["oldChar"], "param_description": " the old character.", "param_type": "char"}, {"param_name": ["newChar"], "param_description": " the new character.", "param_type": "char"}], "method_name": "replace", "return_value": {"return_type": ["String"], "return_description": ["a string derived from this string by replacing every\n          occurrence of oldChar with newChar."], "return_name": []}, "method_description": "Returns a string resulting from replacing all occurrences of\n oldChar in this string with newChar.\n \n\n If the character oldChar does not occur in the\n character sequence represented by this String object,\n then a reference to this String object is returned.\n Otherwise, a String object is returned that\n represents a character sequence identical to the character sequence\n represented by this String object, except that every\n occurrence of oldChar is replaced by an occurrence\n of newChar.\n \n\n Examples:\n \n"}, {"class_name": "String", "params": [{"param_name": ["regex"], "param_description": " the regular expression to which this string is to be matched", "param_type": "String"}, {"param_name": ["replacement"], "param_description": " the string to be substituted for each match", "param_type": "String"}], "method_name": "replaceAll", "return_value": {"return_type": ["String"], "return_description": ["The resulting String"], "return_name": []}, "method_description": "Replaces each substring of this string that matches the given regular expression with the\n given replacement.\n\n \n An invocation of this method of the form\n str.replaceAll(regex, repl)\n yields exactly the same result as the expression\n\n \n\n Note that backslashes (\\) and dollar signs ($) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n Matcher.replaceAll.\n Use Matcher.quoteReplacement(String) to suppress the special\n meaning of these characters, if desired.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["regex"], "param_description": " the regular expression to which this string is to be matched", "param_type": "String"}, {"param_name": ["replacement"], "param_description": " the string to be substituted for the first match", "param_type": "String"}], "method_name": "replaceFirst", "return_value": {"return_type": ["String"], "return_description": ["The resulting String"], "return_name": []}, "method_description": "Replaces the first substring of this string that matches the given regular expression with the\n given replacement.\n\n \n An invocation of this method of the form\n str.replaceFirst(regex, repl)\n yields exactly the same result as the expression\n\n \n\n Note that backslashes (\\) and dollar signs ($) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n Matcher.replaceFirst(String).\n Use Matcher.quoteReplacement(String) to suppress the special\n meaning of these characters, if desired.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["regex"], "param_description": " the delimiting regular expression", "param_type": "String"}, {"param_name": ["limit"], "param_description": " the result threshold, as described above", "param_type": "int"}], "method_name": "split", "return_value": {"return_type": ["String[]"], "return_description": ["the array of strings computed by splitting this string\n          around matches of the given regular expression"], "return_name": []}, "method_description": "Splits this string around matches of the given\n regular expression.\n\n \n The array returned by this method contains each substring of this\n string that is terminated by another substring that matches the given\n expression or is terminated by the end of the string.  The substrings in\n the array are in the order in which they occur in this string.  If the\n expression does not match any part of the input then the resulting array\n has just one element, namely this string.\n\n \n When there is a positive-width match at the beginning of this\n string then an empty leading substring is included at the beginning\n of the resulting array. A zero-width match at the beginning however\n never produces such empty leading substring.\n\n \n The limit parameter controls the number of times the\n pattern is applied and therefore affects the length of the resulting\n array.  If the limit n is greater than zero then the pattern\n will be applied at most n\u00a0-\u00a01 times, the array's\n length will be no greater than n, and the array's last entry\n will contain all input beyond the last matched delimiter.  If n\n is non-positive then the pattern will be applied as many times as\n possible and the array can have any length.  If n is zero then\n the pattern will be applied as many times as possible, the array can\n have any length, and trailing empty strings will be discarded.\n\n \n The string \"boo:and:foo\", for example, yields the\n following results with these parameters:\n\n \n An invocation of this method of the form\n str.split(regex,\u00a0n)\n yields the same result as the expression\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["regex"], "param_description": " the delimiting regular expression", "param_type": "String"}], "method_name": "split", "return_value": {"return_type": ["String[]"], "return_description": ["the array of strings computed by splitting this string\n          around matches of the given regular expression"], "return_name": []}, "method_description": "Splits this string around matches of the given regular expression.\n\n \n This method works as if by invoking the two-argument split method with the given expression and a limit\n argument of zero.  Trailing empty strings are therefore not included in\n the resulting array.\n\n \n The string \"boo:and:foo\", for example, yields the following\n results with these expressions:\n\n \nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["prefix"], "param_description": " the prefix.", "param_type": "String"}], "method_name": "startsWith", "return_value": {"return_type": ["boolean"], "return_description": ["true if the character sequence represented by the\n          argument is a prefix of the character sequence represented by\n          this string; false otherwise.\n          Note also that true will be returned if the\n          argument is an empty string or is equal to this\n          String object as determined by the\n          equals(Object) method."], "return_name": []}, "method_description": "Tests if this string starts with the specified prefix.\n"}, {"class_name": "String", "params": [{"param_name": ["prefix"], "param_description": " the prefix.", "param_type": "String"}, {"param_name": ["toffset"], "param_description": " where to begin looking in this string.", "param_type": "int"}], "method_name": "startsWith", "return_value": {"return_type": ["boolean"], "return_description": ["true if the character sequence represented by the\n          argument is a prefix of the substring of this object starting\n          at index toffset; false otherwise.\n          The result is false if toffset is\n          negative or greater than the length of this\n          String object; otherwise the result is the same\n          as the result of the expression\n          \n          this.substring(toffset).startsWith(prefix)"], "return_name": []}, "method_description": "Tests if the substring of this string beginning at the\n specified index starts with the specified prefix.\n"}, {"class_name": "String", "params": [{"param_name": ["beginIndex"], "param_description": " the begin index, inclusive.", "param_type": "int"}, {"param_name": ["endIndex"], "param_description": " the end index, exclusive.", "param_type": "int"}], "method_name": "subSequence", "return_value": {"return_type": ["CharSequence"], "return_description": ["the specified subsequence."], "return_name": []}, "method_description": "Returns a character sequence that is a subsequence of this sequence.\n\n \n An invocation of this method of the form\n\n \n"}, {"class_name": "String", "params": [{"param_name": ["beginIndex"], "param_description": " the beginning index, inclusive.", "param_type": "int"}, {"param_name": ["endIndex"], "param_description": " the ending index, exclusive.", "param_type": "int"}], "method_name": "substring", "return_value": {"return_type": ["String"], "return_description": ["the specified substring."], "return_name": []}, "method_description": "Returns a string that is a substring of this string. The\n substring begins at the specified beginIndex and\n extends to the character at index endIndex - 1.\n Thus the length of the substring is endIndex-beginIndex.\n \n\n Examples:\n \n"}, {"class_name": "String", "params": [{"param_name": ["beginIndex"], "param_description": " the beginning index, inclusive.", "param_type": "int"}], "method_name": "substring", "return_value": {"return_type": ["String"], "return_description": ["the specified substring."], "return_name": []}, "method_description": "Returns a string that is a substring of this string. The\n substring begins with the character at the specified index and\n extends to the end of this string. \n\n Examples:\n \n"}, {"class_name": "String", "params": [], "method_name": "toCharArray", "return_value": {"return_type": ["char[]"], "return_description": ["a newly allocated character array whose length is the length\n          of this string and whose contents are initialized to contain\n          the character sequence represented by this string."], "return_name": []}, "method_description": "Converts this string to a new character array.\n"}, {"class_name": "String", "params": [], "method_name": "toLowerCase", "return_value": {"return_type": ["String"], "return_description": ["the String, converted to lowercase."], "return_name": []}, "method_description": "Converts all of the characters in this String to lower\n case using the rules of the default locale. This is equivalent to calling\n toLowerCase(Locale.getDefault()).\n \n\nNote: This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, \"TITLE\".toLowerCase() in a Turkish locale\n returns \"t\\u0131tle\", where '\\u0131' is the\n LATIN SMALL LETTER DOTLESS I character.\n To obtain correct results for locale insensitive strings, use\n toLowerCase(Locale.ROOT).\n \n\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["locale"], "param_description": " use the case transformation rules for this locale", "param_type": "Locale"}], "method_name": "toLowerCase", "return_value": {"return_type": ["String"], "return_description": ["the String, converted to lowercase."], "return_name": []}, "method_description": "Converts all of the characters in this String to lower\n case using the rules of the given Locale.  Case mapping is based\n on the Unicode Standard version specified by the Character\n class. Since case mappings are not always 1:1 char mappings, the resulting\n String may be a different length than the original String.\n \n\n Examples of lowercase  mappings are in the following table:\n \nSee also:\n"}, {"class_name": "String", "params": [], "method_name": "toString", "return_value": {"return_type": ["String"], "return_description": ["the string itself."], "return_name": []}, "method_description": "This object (which is already a string!) is itself returned.\n"}, {"class_name": "String", "params": [{"param_name": ["locale"], "param_description": " use the case transformation rules for this locale", "param_type": "Locale"}], "method_name": "toUpperCase", "return_value": {"return_type": ["String"], "return_description": ["the String, converted to uppercase."], "return_name": []}, "method_description": "Converts all of the characters in this String to upper\n case using the rules of the given Locale. Case mapping is based\n on the Unicode Standard version specified by the Character\n class. Since case mappings are not always 1:1 char mappings, the resulting\n String may be a different length than the original String.\n \n\n Examples of locale-sensitive and 1:M case mappings are in the following table.\n\n \nSee also:\n"}, {"class_name": "String", "params": [], "method_name": "toUpperCase", "return_value": {"return_type": ["String"], "return_description": ["the String, converted to uppercase."], "return_name": []}, "method_description": "Converts all of the characters in this String to upper\n case using the rules of the default locale. This method is equivalent to\n toUpperCase(Locale.getDefault()).\n \n\nNote: This method is locale sensitive, and may produce unexpected\n results if used for strings that are intended to be interpreted locale\n independently.\n Examples are programming language identifiers, protocol keys, and HTML\n tags.\n For instance, \"title\".toUpperCase() in a Turkish locale\n returns \"T\\u0130TLE\", where '\\u0130' is the\n LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n To obtain correct results for locale insensitive strings, use\n toUpperCase(Locale.ROOT).\n \n\nSee also:\n"}, {"class_name": "String", "params": [], "method_name": "trim", "return_value": {"return_type": ["String"], "return_description": ["A string whose value is this string, with any leading and trailing white\n          space removed, or this string if it has no leading or\n          trailing white space."], "return_name": []}, "method_description": "Returns a string whose value is this string, with any leading and trailing\n whitespace removed.\n \n\n If this String object represents an empty character\n sequence, or the first and last characters of character sequence\n represented by this String object both have codes\n greater than '\\u0020' (the space character), then a\n reference to this String object is returned.\n \n\n Otherwise, if there is no character with a code greater than\n '\\u0020' in the string, then a\n String object representing an empty string is\n returned.\n \n\n Otherwise, let k be the index of the first character in the\n string whose code is greater than '\\u0020', and let\n m be the index of the last character in the string whose code\n is greater than '\\u0020'. A String\n object is returned, representing the substring of this string that\n begins with the character at index k and ends with the\n character at index m-that is, the result of\n this.substring(k, m + 1).\n \n\n This method may be used to trim whitespace (as defined above) from\n the beginning and end of a string.\n"}, {"class_name": "String", "params": [{"param_name": ["b"], "param_description": " a boolean.", "param_type": "boolean"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["if the argument is true, a string equal to\n          \"true\" is returned; otherwise, a string equal to\n          \"false\" is returned."], "return_name": []}, "method_description": "Returns the string representation of the boolean argument.\n"}, {"class_name": "String", "params": [{"param_name": ["d"], "param_description": " a double.", "param_type": "double"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a  string representation of the double argument."], "return_name": []}, "method_description": "Returns the string representation of the double argument.\n \n\n The representation is exactly the one returned by the\n Double.toString method of one argument.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["data"], "param_description": " the character array.", "param_type": "char[]"}, {"param_name": ["offset"], "param_description": " initial offset of the subarray.", "param_type": "int"}, {"param_name": ["count"], "param_description": " length of the subarray.", "param_type": "int"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a String that contains the characters of the\n          specified subarray of the character array."], "return_name": []}, "method_description": "Returns the string representation of a specific subarray of the\n char array argument.\n \n\n The offset argument is the index of the first\n character of the subarray. The count argument\n specifies the length of the subarray. The contents of the subarray\n are copied; subsequent modification of the character array does not\n affect the returned string.\n"}, {"class_name": "String", "params": [{"param_name": ["f"], "param_description": " a float.", "param_type": "float"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a string representation of the float argument."], "return_name": []}, "method_description": "Returns the string representation of the float argument.\n \n\n The representation is exactly the one returned by the\n Float.toString method of one argument.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["i"], "param_description": " an int.", "param_type": "int"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a string representation of the int argument."], "return_name": []}, "method_description": "Returns the string representation of the int argument.\n \n\n The representation is exactly the one returned by the\n Integer.toString method of one argument.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["c"], "param_description": " a char.", "param_type": "char"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a string of length 1 containing\n          as its single character the argument c."], "return_name": []}, "method_description": "Returns the string representation of the char\n argument.\n"}, {"class_name": "String", "params": [{"param_name": ["l"], "param_description": " a long.", "param_type": "long"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a string representation of the long argument."], "return_name": []}, "method_description": "Returns the string representation of the long argument.\n \n\n The representation is exactly the one returned by the\n Long.toString method of one argument.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["obj"], "param_description": " an Object.", "param_type": "Object"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["if the argument is null, then a string equal to\n          \"null\"; otherwise, the value of\n          obj.toString() is returned."], "return_name": []}, "method_description": "Returns the string representation of the Object argument.\nSee also:\n"}, {"class_name": "String", "params": [{"param_name": ["data"], "param_description": " the character array.", "param_type": "char[]"}], "method_name": "valueOf", "return_value": {"return_type": ["String"], "return_description": ["a String that contains the characters of the\n          character array."], "return_name": []}, "method_description": "Returns the string representation of the char array\n argument. The contents of the character array are copied; subsequent\n modification of the character array does not affect the returned\n string.\n"}]}
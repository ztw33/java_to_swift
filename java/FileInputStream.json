{"Vars": null, "interface_list": [""], "class_description": "A FileInputStream obtains input bytes\n from a file in a file system. What files\n are  available depends on the host environment. FileInputStream is meant for reading streams of raw bytes\n such as image data. For reading streams of characters, consider using\n FileReader. ", "class_inherit_list": ["InputStream"], "package_name": "java.io", "subclass_list": ["ParcelFileDescriptor.AutoCloseInputStream", "ParcelFileDescriptor.AutoCloseInputStream", "ParcelFileDescriptor.close()"], "class_name": "FileInputStream", "Methods": [{"class_name": "FileInputStream", "params": [{"param_name": ["name"], "param_description": " the system-dependent file name.", "param_type": "String"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a FileInputStream by\n opening a connection to an actual file,\n the file named by the path name name\n in the file system.  A new FileDescriptor\n object is created to represent this file\n connection.\n \n\n First, if there is a security\n manager, its checkRead method\n is called with the name argument\n as its argument.\n \n\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileInputStream", "params": [{"param_name": ["file"], "param_description": " the file to be opened for reading.", "param_type": "File"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a FileInputStream by\n opening a connection to an actual file,\n the file named by the File\n object file in the file system.\n A new FileDescriptor object\n is created to represent this file connection.\n \n\n First, if there is a security manager,\n its checkRead method  is called\n with the path represented by the file\n argument as its argument.\n \n\n If the named file does not exist, is a directory rather than a regular\n file, or for some other reason cannot be opened for reading then a\n FileNotFoundException is thrown.\nSee also:\n"}, {"class_name": "FileInputStream", "params": [{"param_name": ["fdObj"], "param_description": " the file descriptor to be opened for reading.\n", "param_type": "FileDescriptor"}], "method_name": "init", "return_value": {"return_type": [], "return_description": [], "return_name": ""}, "method_description": "Creates a FileInputStream by using the file descriptor\n fdObj, which represents an existing connection to an\n actual file in the file system.\n \n\n If there is a security manager, its checkRead method is\n called with the file descriptor fdObj as its argument to\n see if it's ok to read the file descriptor. If read access is denied\n to the file descriptor a SecurityException is thrown.\n \n\n If fdObj is null then a NullPointerException\n is thrown.\n \n\n This constructor does not throw an exception if fdObj\n is invalid.\n However, if the methods are invoked on the resulting stream to attempt\n I/O on the stream, an IOException is thrown.\n"}, {"class_name": "FileInputStream", "params": [], "method_name": "available", "return_value": {"return_type": ["int"], "return_description": ["an estimate of the number of remaining bytes that can be read\n             (or skipped over) from this input stream without blocking."], "return_name": []}, "method_description": "Returns an estimate of the number of remaining bytes that can be read (or\n skipped over) from this input stream without blocking by the next\n invocation of a method for this input stream. Returns 0 when the file\n position is beyond EOF. The next invocation might be the same thread\n or another thread. A single read or skip of this many bytes will not\n block, but may read or skip fewer bytes.\n\n \n In some cases, a non-blocking read (or skip) may appear to be\n blocked when it is merely slow, for example when reading large\n files over slow networks.\n"}, {"class_name": "FileInputStream", "params": [], "method_name": "close", "return_value": {"return_type": [], "return_description": [""], "return_name": []}, "method_description": "Closes this file input stream and releases any system resources\n associated with the stream.\n\n \n If this stream has an associated channel then the channel is closed\n as well.\n"}, {"class_name": "FileInputStream", "params": [], "method_name": "getChannel", "return_value": {"return_type": ["FileChannel"], "return_description": ["the file channel associated with this file input stream"], "return_name": []}, "method_description": "Returns the unique FileChannel\n object associated with this file input stream.\n\n \n The initial position of the returned channel will be equal to the\n number of bytes read from the file so far.  Reading bytes from this\n stream will increment the channel's position.  Changing the channel's\n position, either explicitly or by reading, will change this stream's\n file position.\n"}, {"class_name": "FileInputStream", "params": [], "method_name": "getFD", "return_value": {"return_type": ["FileDescriptor"], "return_description": ["the file descriptor object associated with this stream."], "return_name": []}, "method_description": "Returns the FileDescriptor\n object  that represents the connection to\n the actual file in the file system being\n used by this FileInputStream.\nSee also:\n"}, {"class_name": "FileInputStream", "params": [], "method_name": "read", "return_value": {"return_type": ["int"], "return_description": ["the next byte of data, or -1 if the end of the\n             file is reached."], "return_name": []}, "method_description": "Reads a byte of data from this input stream. This method blocks\n if no input is yet available.\n"}, {"class_name": "FileInputStream", "params": [{"param_name": ["b"], "param_description": " the buffer into which the data is read.", "param_type": "byte[]"}, {"param_name": ["off"], "param_description": " the start offset in the destination array b", "param_type": "int"}, {"param_name": ["len"], "param_description": " the maximum number of bytes read.", "param_type": "int"}], "method_name": "read", "return_value": {"return_type": ["int"], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the file has been reached."], "return_name": []}, "method_description": "Reads up to len bytes of data from this input stream\n into an array of bytes. If len is not zero, the method\n blocks until some input is available; otherwise, no\n bytes are read and 0 is returned.\n"}, {"class_name": "FileInputStream", "params": [{"param_name": ["b"], "param_description": " the buffer into which the data is read.", "param_type": "byte[]"}], "method_name": "read", "return_value": {"return_type": ["int"], "return_description": ["the total number of bytes read into the buffer, or\n             -1 if there is no more data because the end of\n             the file has been reached."], "return_name": []}, "method_description": "Reads up to b.length bytes of data from this input\n stream into an array of bytes. This method blocks until some input\n is available.\n"}, {"class_name": "FileInputStream", "params": [{"param_name": ["n"], "param_description": " the number of bytes to be skipped.", "param_type": "long"}], "method_name": "skip", "return_value": {"return_type": ["long"], "return_description": ["the actual number of bytes skipped."], "return_name": []}, "method_description": "Skips over and discards n bytes of data from the\n input stream.\n\n \nThe skip method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly 0. If n is negative, the method\n will try to skip backwards. In case the backing file does not support\n backward skip at its current position, an IOException is\n thrown. The actual number of bytes skipped is returned. If it skips\n forwards, it returns a positive value. If it skips backwards, it\n returns a negative value.\n\n \nThis method may skip more bytes than what are remaining in the\n backing file. This produces no exception and the number of bytes skipped\n may include some number of bytes that were beyond the EOF of the\n backing file. Attempting to read from the stream after skipping past\n the end will result in -1 indicating the end of the file.\n"}]}
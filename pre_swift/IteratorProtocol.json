{"package_name": ["swift"], "class_name": ["iter", "protocol"], "class_description": ["iteratorprotocol", "protocol", "tightli", "link", "sequenc", "protocol", "sequenc", "provid", "access", "element", "creat", "iter", "keep", "track", "iter", "process", "return", "one", "element", "time", "advanc", "sequencewhenev", "use", "forin", "loop", "array", "set", "collect", "sequenc", "your", "use", "type", "iter", "swift", "use", "sequenc", "collect", "iter", "intern", "enabl", "forin", "loop", "languag", "constructus", "sequenc", "iter", "directli", "give", "access", "element", "order", "iter", "sequenc", "use", "forin", "loop", "exampl", "might", "typic", "use", "forin", "loop", "print", "element", "arraybehind", "scene", "swift", "use", "anim", "array", "iter", "loop", "content", "arrayth", "call", "animalsmakeiter", "return", "instanc", "array", "iter", "next", "loop", "call", "iter", "next", "method", "repeatedli", "bind", "element", "return", "anim", "exit", "next", "method", "return", "nilyou", "rare", "need", "use", "iter", "directli", "forin", "loop", "idiomat", "approach", "travers", "sequenc", "swift", "algorithm", "howev", "may", "call", "direct", "iter", "useon", "exampl", "reduce1_", "method", "similar", "reduce__", "method", "defin", "standard", "librari", "take", "initi", "valu", "combin", "closur", "reduce1_", "use", "first", "element", "sequenc", "initi", "valueher", "implement", "reduce1_", "method", "sequenc", "iter", "use", "directli", "retriev", "initi", "valu", "loop", "rest", "sequenceth", "reduce1_", "method", "make", "certain", "kind", "sequenc", "oper", "simpler", "here", "find", "longest", "string", "sequenc", "use", "anim", "array", "introduc", "earlier", "examplewhenev", "use", "multipl", "iter", "forin", "loop", "singl", "sequenc", "sure", "know", "specif", "sequenc", "support", "repeat", "iter", "either", "know", "concret", "type", "sequenc", "also", "constrain", "collect", "protocolobtain", "separ", "iter", "separ", "call", "sequenc", "makeiter", "method", "rather", "copi", "copi", "iter", "safe", "advanc", "one", "copi", "iter", "call", "next", "method", "may", "invalid", "copi", "iter", "forin", "loop", "safe", "regardimpl", "iter", "conform", "iteratorprotocol", "simpl", "declar", "next", "method", "advanc", "one", "step", "relat", "sequenc", "return", "current", "element", "sequenc", "exhaust", "next", "method", "return", "nilfor", "exampl", "consid", "custom", "countdown", "sequenc", "initi", "countdown", "sequenc", "start", "integ", "iter", "count", "zero", "countdown", "structur", "definit", "short", "contain", "start", "count", "makeiter", "method", "requir", "sequenc", "protocolth", "makeiter", "method", "return", "anoth", "custom", "type", "iter", "name", "countdowniter", "countdowniter", "type", "keep", "track", "countdown", "sequenc", "iter", "number", "time", "return", "valueeach", "time", "next", "method", "call", "countdowniter", "instanc", "calcul", "new", "next", "valu", "check", "see", "whether", "reach", "zero", "return", "either", "number", "nil", "iter", "finish", "return", "element", "sequencecr", "iter", "countdown", "sequenc", "use", "countdowniter", "handl", "iter"], "class_inherit_list": [], "interface_list": [], "subclass_list": [], "Methods": [{"class_name": ["iter", "protocol"], "method_name": ["next"], "method_description": ["advanc", "next", "element", "return", "nil", "next", "element", "existsrequir"], "params": [], "return_value": {"return_type": [["self", "element"]], "return_description": [["next", "element", "underli", "sequenc", "next", "element", "exist", "otherwis", "nil"]], "return_name": [[]]}}], "Vars": []}
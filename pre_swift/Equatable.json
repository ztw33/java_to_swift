{"package_name": ["swift"], "class_name": ["equat"], "class_description": ["type", "conform", "equat", "protocol", "compar", "equal", "use", "equalto", "oper", "inequ", "use", "notequalto", "oper", "basic", "type", "swift", "standard", "librari", "conform", "equatablesom", "sequenc", "collect", "oper", "use", "simpli", "element", "conform", "equat", "exampl", "check", "whether", "array", "contain", "particular", "valu", "pass", "valu", "contains_", "method", "array", "element", "conform", "equat", "instead", "provid", "closur", "determin", "equival", "follow", "exampl", "show", "contains_", "method", "use", "array", "stringsad", "equat", "conform", "custom", "type", "mean", "use", "conveni", "api", "search", "particular", "instanc", "collect", "equat", "also", "base", "protocol", "hashabl", "compar", "protocol", "allow", "use", "custom", "type", "construct", "set", "sort", "element", "collectiony", "reli", "automat", "synthesi", "equat", "protocol", "requir", "custom", "type", "declar", "equat", "conform", "type", "origin", "declar", "type", "meet", "criteriafor", "struct", "store", "properti", "must", "conform", "equatablefor", "enum", "associ", "valu", "must", "conform", "equat", "enum", "without", "associ", "valu", "equat", "conform", "even", "without", "declarationto", "custom", "type", "equat", "conform", "adopt", "equat", "type", "doesnt", "meet", "criteria", "list", "extend", "exist", "type", "conform", "equat", "implement", "equalto", "oper", "static", "method", "type", "standard", "librari", "provid", "implement", "notequalto", "oper", "equat", "type", "call", "custom", "function", "negat", "resulta", "exampl", "consid", "streetaddress", "class", "hold", "part", "street", "address", "hous", "build", "number", "street", "name", "option", "unit", "number", "here", "initi", "declar", "streetaddress", "typenow", "suppos", "array", "address", "need", "check", "particular", "address", "use", "contains_", "method", "without", "includ", "closur", "call", "extend", "streetaddress", "type", "conform", "equatableth", "streetaddress", "type", "conform", "equat", "use", "check", "equal", "two", "instanc", "call", "equatableconstrain", "contains_", "methodequ", "impli", "substitutabilityani", "two", "instanc", "compar", "equal", "use", "interchang", "code", "depend", "valu", "maintain", "substitut", "oper", "take", "account", "visibl", "aspect", "equat", "type", "expos", "nonvalu", "aspect", "equat", "type", "class", "ident", "discourag", "expos", "explicitli", "point", "documentationsinc", "equal", "instanc", "equat", "type", "equival", "relat", "custom", "type", "conform", "equat", "must", "satisfi", "three", "condit", "valu", "b", "ca", "alway", "true", "reflexivitya", "b", "impli", "b", "symmetrya", "b", "b", "c", "impli", "c", "transitivitymoreov", "inequ", "invers", "equal", "custom", "implement", "oper", "must", "guarante", "b", "impli", "b", "default", "implement", "oper", "function", "satisfi", "requirementth", "ident", "class", "instanc", "part", "instanc", "valu", "consid", "class", "call", "integerref", "wrap", "integ", "valu", "here", "definit", "integerref", "function", "make", "conform", "equatableth", "implement", "function", "return", "valu", "whether", "two", "argument", "instanc", "two", "differ", "instanc", "integ", "store", "valu", "properti", "exampleclass", "instanc", "ident", "hand", "compar", "use", "tripleequ", "identicalto", "oper", "exampl"], "class_inherit_list": [], "interface_list": [], "subclass_list": [["compar"], ["hashabl"], ["numer"], ["set", "algebra"]], "Methods": [{"class_name": ["equat"], "method_name": [], "method_description": ["return", "boolean", "valu", "indic", "whether", "two", "valu", "equalrequir"], "params": [{"param_type": ["self"], "param_name": [["lh"]], "param_description": ["valu", "compar"]}, {"param_type": ["self"], "param_name": [["rh"]], "param_description": ["anoth", "valu", "compar"]}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": [], "method_description": ["return", "boolean", "valu", "indic", "whether", "two", "valu", "equal"], "params": [{"param_type": ["self"], "param_name": [["lh"]], "param_description": ["valu", "compar"]}, {"param_type": ["self"], "param_name": [["rh"]], "param_description": ["anoth", "valu", "compar"]}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": [], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": [], "param_name": [["lh"]], "param_description": ["empti", "tupl"]}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["b"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["c"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["d"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["e"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["f"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": [], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": [], "param_name": [["lh"]], "param_description": ["empti", "tupl"]}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["b"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["c"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["d"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["e"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": ["f"], "method_description": ["return", "boolean", "valu", "indic", "whether", "correspond", "compon", "two", "tupl", "equal"], "params": [{"param_type": ["equat"], "param_name": [["lh"]], "param_description": ["tupl", "equat", "element"]}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["equat"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}, {"class_name": ["equat"], "method_name": [], "method_description": ["return", "boolean", "valu", "indic", "whether", "two", "argument", "match", "valu", "equal"], "params": [{"param_type": ["equat"], "param_name": [["a"]], "param_description": []}, {"param_type": ["equat"], "param_name": [["b"]], "param_description": []}], "return_value": {"return_type": [["bool"]], "return_description": [], "return_name": [[]]}}], "Vars": []}
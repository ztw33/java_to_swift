{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Formatter"], "Methods": [{"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A formatted string representing the specified date interval."]}, "method_name": "string", "class_name": "DateIntervalFormatter", "method_description": "Returns a formatted string based on the specified start and end dates.", "params": [{"param_type": "Date", "param_name": ["from", "fromDate"], "param_description": ""}, {"param_type": "Date", "param_name": ["to", "toDate"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "string", "class_name": "DateIntervalFormatter", "method_description": "", "params": [{"param_type": "DateInterval", "param_name": ["from", "dateInterval"], "param_description": ""}]}], "Vars": [{"var_type": "DateIntervalFormatter.Style", "var_description": "The style to use when formatting day, month, and year information.", "var_name": "dateStyle"}, {"var_type": "DateIntervalFormatter.Style", "var_description": "The style to use when formatting hour, minute, and second information.", "var_name": "timeStyle"}, {"var_type": "String!", "var_description": "The template for formatting one date and time value.", "var_name": "dateTemplate"}, {"var_type": "Calendar!", "var_description": "The calendar to use for date values. ", "var_name": "calendar"}, {"var_type": "Locale!", "var_description": "The locale to use when formatting date and time values.", "var_name": "locale"}, {"var_type": "TimeZone!", "var_description": "The time zone with which to specify time values. ", "var_name": "timeZone"}], "subclass_list": [], "class_description": "An DateIntervalFormatter object creates user-readable strings from pairs of dates. Use a date interval formatter to create user-readable strings of the form <start> - <end> for your app\u2019s interface, where <start> and <end> are date values that you supply. The formatter uses locale and language information, along with custom formatting options, to define the content of the resulting string. You can specify different styles for the date and time information in each date value.\nTo use this class, create an instance, configure its properties, and call the string(from:to:) method to generate a string. The properties of this class let you configure the calendar and specify the style to apply to date and time values. Given a current date of January 16, 2015, Configuring the Formatter Options shows how to configure a formatter object and generate the string \u201c1/16/15 - 1/17/15\u201d. \nConfiguring a formatter object\nNote\nAlways set to the dateStyle and timeStyle properties to appropriate values before generating any strings. \nThe string(from:to:) method may be called safely from any thread of your app. It is also safe to share a single instance of this class from multiple threads, with the caveat that you should not change the configuration of the object while another thread is using it to generate a string. \n", "class_name": "DateIntervalFormatter"}
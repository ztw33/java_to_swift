{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Formatter"], "Methods": [{"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A date representation of string interpreted using the receiver\u2019s current settings. If date(from:) can not parse the string, returns nil."]}, "method_name": "date", "class_name": "DateFormatter", "method_description": "Returns a date representation of a given string interpreted using the receiver\u2019s current settings.", "params": [{"param_type": "String", "param_name": ["from", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string representation of date formatted using the receiver\u2019s current settings."]}, "method_name": "string", "class_name": "DateFormatter", "method_description": "Returns a string representation of a given date formatted using the receiver\u2019s current settings.", "params": [{"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A localized string representation of date using the specified date and time styles."]}, "method_name": "localizedString", "class_name": "DateFormatter", "method_description": "Returns a string representation of a given date, formatted for the current locale using the specified date and time styles.", "params": [{"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}, {"param_type": "DateFormatter.Style", "param_name": ["dateStyle", "dstyle"], "param_description": ""}, {"param_type": "DateFormatter.Style", "param_name": ["timeStyle", "tstyle"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the receiver can create a date by parsing string, otherwise false."]}, "method_name": "getObjectValue", "class_name": "DateFormatter", "method_description": "Returns by reference a date representation of a given string and the range of the string used, and returns a Boolean value that indicates whether the string could be parsed.", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<AnyObject>", "param_name": ["obj"], "param_description": ""}, {"param_type": "String", "param_name": ["for", "string"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<NSRange>", "param_name": ["range", "rangep"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setLocalizedDateFormatFromTemplate", "class_name": "DateFormatter", "method_description": "Sets the date format from a template using the specified locale for the receiver.", "params": [{"param_type": "String", "param_name": ["dateFormatTemplate"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A localized date format string representing the date format components given in template, arranged appropriately for the locale specified by locale."]}, "method_name": "dateFormat", "class_name": "DateFormatter", "method_description": "Returns a localized date format string representing the given date format components arranged appropriately for the specified locale.", "params": [{"param_type": "String", "param_name": ["fromTemplate", "tmplate"], "param_description": ""}, {"param_type": "Int", "param_name": ["options", "opts"], "param_description": ""}, {"param_type": "Locale", "param_name": ["locale"], "param_description": ""}]}], "Vars": [{"var_type": "DateFormatter.Style", "var_description": "The date style of the receiver.", "var_name": "dateStyle"}, {"var_type": "DateFormatter.Style", "var_description": "The time style of the receiver.", "var_name": "timeStyle"}, {"var_type": "String!", "var_description": "The date format string used by the receiver.", "var_name": "dateFormat"}, {"var_type": "Formatter.Context", "var_description": "The capitalization formatting context used when formatting a date.", "var_name": "formattingContext"}, {"var_type": "Calendar!", "var_description": "The calendar for the receiver.", "var_name": "calendar"}, {"var_type": "Date", "var_description": "The default date for the receiver.", "var_name": "defaultDate"}, {"var_type": "Locale!", "var_description": "The locale for the receiver.", "var_name": "locale"}, {"var_type": "TimeZone!", "var_description": "The time zone for the receiver.", "var_name": "timeZone"}, {"var_type": "Date", "var_description": "The earliest date that can be denoted by a two-digit year specifier.", "var_name": "twoDigitStartDate"}, {"var_type": "Date", "var_description": "The start date of the Gregorian calendar for the receiver.", "var_name": "gregorianStartDate"}, {"var_type": "DateFormatter.Behavior", "var_description": "The formatter behavior for the receiver.", "var_name": "formatterBehavior"}, {"var_type": "DateFormatter.Behavior", "var_description": "Returns the default formatting behavior for instances of the class.", "var_name": "defaultFormatterBehavior"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver uses heuristics when parsing a string.", "var_name": "isLenient"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver uses phrases such as \u201ctoday\u201d and \u201ctomorrow\u201d for the date component.", "var_name": "doesRelativeDateFormatting"}, {"var_type": "String!", "var_description": "The AM symbol for the receiver.", "var_name": "amSymbol"}, {"var_type": "String!", "var_description": "The PM symbol for the receiver.", "var_name": "pmSymbol"}, {"var_type": "[String]!", "var_description": "The array of weekday symbols for the receiver.", "var_name": "weekdaySymbols"}, {"var_type": "[String]!", "var_description": "The array of short weekday symbols for the receiver.", "var_name": "shortWeekdaySymbols"}, {"var_type": "[String]!", "var_description": "The array of very short weekday symbols for the receiver.", "var_name": "veryShortWeekdaySymbols"}, {"var_type": "[String]!", "var_description": "The array of standalone weekday symbols for the receiver.", "var_name": "standaloneWeekdaySymbols"}, {"var_type": "[String]!", "var_description": "The array of short standalone weekday symbols for the receiver.", "var_name": "shortStandaloneWeekdaySymbols"}, {"var_type": "[String]!", "var_description": "The array of very short standalone weekday symbols for the receiver.", "var_name": "veryShortStandaloneWeekdaySymbols"}, {"var_type": "[String]!", "var_description": "The month symbols for the receiver.", "var_name": "monthSymbols"}, {"var_type": "[String]!", "var_description": "The array of short month symbols for the receiver.", "var_name": "shortMonthSymbols"}, {"var_type": "[String]!", "var_description": "The very short month symbols for the receiver.", "var_name": "veryShortMonthSymbols"}, {"var_type": "[String]!", "var_description": "The standalone month symbols for the receiver.", "var_name": "standaloneMonthSymbols"}, {"var_type": "[String]!", "var_description": "The short standalone month symbols for the receiver.", "var_name": "shortStandaloneMonthSymbols"}, {"var_type": "[String]!", "var_description": "The very short month symbols for the receiver.", "var_name": "veryShortStandaloneMonthSymbols"}, {"var_type": "[String]!", "var_description": "The quarter symbols for the receiver.", "var_name": "quarterSymbols"}, {"var_type": "[String]!", "var_description": "The short quarter symbols for the receiver.", "var_name": "shortQuarterSymbols"}, {"var_type": "[String]!", "var_description": "The standalone quarter symbols for the receiver.", "var_name": "standaloneQuarterSymbols"}, {"var_type": "[String]!", "var_description": "The short standalone quarter symbols for the receiver.", "var_name": "shortStandaloneQuarterSymbols"}, {"var_type": "[String]!", "var_description": "The era symbols for the receiver.", "var_name": "eraSymbols"}, {"var_type": "[String]!", "var_description": "The long era symbols for the receiver", "var_name": "longEraSymbols"}, {"var_type": "Bool", "var_description": "Indicates whether the formatter generates the deprecated calendar date type.", "var_name": "generatesCalendarDates"}], "subclass_list": [], "class_description": "Instances of DateFormatter create string representations of NSDate objects, and convert textual representations of dates and times into NSDate objects. For user-visible representations of dates and times, DateFormatter provides a variety of localized presets and configuration options. For fixed format representations of dates and times, you can specify a custom format string.\nWhen working with date representations in ISO 8601 format, use ISO8601DateFormatter instead.\nTo represent an interval between two NSDate objects, use DateIntervalFormatter instead.\nTo represent a quantity of time specified by an NSDateComponents object, use DateComponentsFormatter instead.\nWhen displaying a date to a user, you set the dateStyle and timeStyle properties of the date formatter according to your particular needs. For example, if you want to show the month, day, and year without showing the time, you would set the dateStyle property to DateFormatter.Style.long and the timeStyle property to DateFormatter.Style.none. Conversely, if you want to show only the time, you would set the dateStyle property to DateFormatter.Style.none and the timeStyle property to DateFormatter.Style.short. Based on the values of the dateStyle and timeStyle properties, DateFormatter provides a representation of a specified date that is appropriate for a given locale.\nIf you need to define a format that cannot be achieved using the predefined styles, you can use the setLocalizedDateFormatFromTemplate(_:) to specify a localized date format from a template.\nImportant\nIn macOS 10.12 and later or iOS 10 and later, use the ISO8601DateFormatter class when working with ISO 8601 date representations.\nWhen working with fixed format dates, such as RFC 3339, you set the dateFormat property to specify a format string. For most fixed formats, you should also set the locale property to a POSIX locale (\"en_US_POSIX\"), and set the timeZone property to UTC.\nFor more information, see Technical Q&A QA1480 \u201cNSDateFormatter and Internet Dates\u201d.\nOn iOS 7 and later NSDateFormatter is thread safe.\nIn macOS 10.9 and later NSDateFormatter is thread safe so long as you are using the modern behavior in a 64-bit app.\nOn earlier versions of the operating system, or when using the legacy formatter behavior or running in 32-bit in macOS, NSDateFormatter is not thread safe, and you therefore must not mutate a date formatter simultaneously from multiple threads.\n", "class_name": "DateFormatter"}
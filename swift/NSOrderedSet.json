{"subclass_list": [], "Methods": [{"params": [{"param_name": ["object"], "param_description": "", "param_type": "Any"}], "method_name": "contains", "method_description": "Returns a Boolean value that indicates whether a given object is present in the ordered set.", "return_value": {"return_description": ["YES if object is present in the set, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["at", "s"], "param_description": "", "param_type": "IndexSet"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateObjects", "method_description": "Executes a given block using the objects in the ordered set at the specified indexes.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["block"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateObjects", "method_description": "Executes a given block using each object in the ordered set.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateObjects", "method_description": "Executes a given block using each object in the set, using the specified enumeration options.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["at", "idx"], "param_description": "", "param_type": "Int"}], "method_name": "object", "method_description": "Returns the object at the specified index of the set.", "return_value": {"return_description": ["If index is beyond the end of the ordered set (that is, if index is greater than or equal to the value returned by count), an rangeException is raised."], "return_name": [""], "return_type": ["Any"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["at", "indexes"], "param_description": "", "param_type": "IndexSet"}], "method_name": "objects", "method_description": "Returns the objects in the ordered set at the specified indexes.", "return_value": {"return_description": ["The returned objects are in the ascending order of their indexes in indexes, so that object in returned ordered set with higher index in indexes will follow the object with smaller index in indexes."], "return_name": [""], "return_type": ["[Any]"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["of", "object"], "param_description": "", "param_type": "Any"}], "method_name": "index", "method_description": "Returns the index of the specified object.", "return_value": {"return_description": ["The index whose corresponding ordered set value is equal to object. If none of the objects in the ordered set  is equal to object, returns NSNotFound."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["of", "object"], "param_description": "", "param_type": "Any"}, {"param_name": ["inSortedRange", "range"], "param_description": "", "param_type": "NSRange"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSBinarySearchingOptions"}, {"param_name": ["usingComparator", "cmp"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Any"], "param_description": "", "param_type": "Any"}], "method_name": "index", "method_description": "Returns the index, within a specified range, of an object compared with elements in the ordered set using a given NSComparator block.", "return_value": {"return_description": ["If the insertionIndex option is not specified:"], "return_name": [""], "return_type": ["ComparisonResult -> Int"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["ofObjectAt", "s"], "param_description": "", "param_type": "IndexSet"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.", "return_value": {"return_description": ["The index of the corresponding value in the ordered set passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["ofObjectPassingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index of the object in the ordered set that passes a test in a given block.", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set  pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["ofObjectPassingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.", "return_value": {"return_description": ["The index whose corresponding value in the ordered set passes the test specified by predicate and opts.  If no objects in the ordered set  pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["ofObjectsAt", "s"], "param_description": "", "param_type": "IndexSet"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["ofObjectsPassingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns the index of the object in the ordered set that passes a test in a given block.", "return_value": {"return_description": ["The index of the corresponding value in the ordered set that passes the test specified by predicate. If no objects in the ordered set pass the test, returns NSNotFound.."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["ofObjectsPassingTest", "predicate"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Int"], "param_description": "", "param_type": "Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.", "return_value": {"return_description": ["The index whose corresponding value in the ordered set passes the test specified by predicate and opts. If the opts bitmask specifies reverse order, then the last item that matches is returned. Otherwise, the index of the first matching object is returned. If no objects in the ordered set pass the test, returns NSNotFound."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSOrderedSet"}, {"params": [], "method_name": "objectEnumerator", "method_description": "Returns an enumerator object that lets you access each object in the ordered set.", "return_value": {"return_description": ["An enumerator object that lets you access each object in the ordered set, in order, from the element at the lowest index upwards."], "return_name": [""], "return_type": ["NSEnumerator"]}, "class_name": "NSOrderedSet"}, {"params": [], "method_name": "reverseObjectEnumerator", "method_description": "Returns an enumerator object that lets you access each object in the ordered set.", "return_value": {"return_description": ["An enumerator object that lets you access each object in the ordered set, in order, from the element at the highest index downwards."], "return_name": [""], "return_type": ["NSEnumerator"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["value"], "param_description": "", "param_type": "Any"}, {"param_name": ["forKey", "key"], "param_description": "", "param_type": "String"}], "method_name": "setValue", "method_description": "Invokes setValue:forKey: on each of the receiver's members using the specified value and key", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["forKey", "key"], "param_description": "", "param_type": "String"}], "method_name": "value", "method_description": "Returns an ordered set containing the results of invoking valueForKey: using key on each of the ordered set\u2019s objects.", "return_value": {"return_description": ["The ordered set of the values for the retrieved key. The returned ordered set might not have the same number of members as the receiver."], "return_name": [""], "return_type": ["Any"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["observer"], "param_description": "", "param_type": "NSObject"}, {"param_name": ["forKeyPath", "keyPath"], "param_description": "", "param_type": "String"}, {"param_name": ["options"], "param_description": "", "param_type": "NSKeyValueObservingOptions"}, {"param_name": ["context"], "param_description": "", "param_type": "UnsafeMutableRawPointer"}], "method_name": "addObserver", "method_description": "Raises an exception.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["observer"], "param_description": "", "param_type": "NSObject"}, {"param_name": ["forKeyPath", "keyPath"], "param_description": "", "param_type": "String"}], "method_name": "removeObserver", "method_description": "Raises an exception.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["observer"], "param_description": "", "param_type": "NSObject"}, {"param_name": ["forKeyPath", "keyPath"], "param_description": "", "param_type": "String"}, {"param_name": ["context"], "param_description": "", "param_type": "UnsafeMutableRawPointer"}], "method_name": "removeObserver", "method_description": "Raises an exception.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["to", "other"], "param_description": "", "param_type": "NSOrderedSet"}], "method_name": "isEqual", "method_description": "Compares the receiving ordered set to another ordered set.", "return_value": {"return_description": ["true if the contents of other are equal to the contents of the receiving ordered set, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["other"], "param_description": "", "param_type": "NSOrderedSet"}], "method_name": "intersects", "method_description": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given ordered set.", "return_value": {"return_description": ["true if at least one object in the receiving ordered set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["set"], "param_description": "", "param_type": "Set<AnyHashable>"}], "method_name": "intersectsSet", "method_description": "Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given set.", "return_value": {"return_description": ["true if at least one object in the receiving ordered set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["of", "other"], "param_description": "", "param_type": "NSOrderedSet"}], "method_name": "isSubset", "method_description": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given ordered set.", "return_value": {"return_description": ["true if every object in the receiving set is also present in other, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["of", "set"], "param_description": "", "param_type": "Set<AnyHashable>"}], "method_name": "isSubset", "method_description": "Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given set.", "return_value": {"return_description": ["true if every object in the receiving ordered set is also present in set, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["using", "sortDescriptors"], "param_description": "", "param_type": "[NSSortDescriptor]"}], "method_name": "sortedArray", "method_description": "Returns an array of the ordered set\u2019s elements sorted as specified by a given array of sort descriptors.", "return_value": {"return_description": ["An NSArray containing the ordered set\u2019s elements sorted as specified by sortDescriptors."], "return_name": [""], "return_type": ["[Any]"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["comparator", "cmptr"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Any"], "param_description": "", "param_type": "Any"}], "method_name": "sortedArray", "method_description": "Returns an array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified by a given NSComparator block", "return_value": {"return_description": ["An array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified cmptr."], "return_name": [""], "return_type": ["ComparisonResult -> [Any]"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSSortOptions"}, {"param_name": ["usingComparator", "cmptr"], "param_description": "", "param_type": "(Any"}, {"param_name": ["Any"], "param_description": "", "param_type": "Any"}], "method_name": "sortedArray", "method_description": "Returns an array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified by a given NSComparator block.", "return_value": {"return_description": ["An array that lists the receiving ordered set\u2019s elements in ascending order, as determined by the comparison method specified cmptr."], "return_name": [""], "return_type": ["ComparisonResult -> [Any]"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["using", "p"], "param_description": "", "param_type": "NSPredicate"}], "method_name": "filtered", "method_description": "Evaluates a given predicate against each object in the receiving ordered set and returns a new ordered set containing the objects for which the predicate returns true.", "return_value": {"return_description": ["A new ordered set containing the objects in the receiving ordered set for which predicate returns true."], "return_name": [""], "return_type": ["NSOrderedSet"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["withLocale", "locale"], "param_description": "", "param_type": "Any"}], "method_name": "description", "method_description": "Returns a string that represents the contents of the ordered set, formatted as a property list.", "return_value": {"return_description": ["A string that represents the contents of the ordered set, formatted as a property list."], "return_name": [""], "return_type": ["String"]}, "class_name": "NSOrderedSet"}, {"params": [{"param_name": ["withLocale", "locale"], "param_description": "", "param_type": "Any"}, {"param_name": ["indent", "level"], "param_description": "", "param_type": "Int"}], "method_name": "description", "method_description": "Returns a string that represents the contents of the ordered set, formatted as a property list.", "return_value": {"return_description": ["A string that represents the contents of the ordered set, formatted as a property list."], "return_name": [""], "return_type": ["String"]}, "class_name": "NSOrderedSet"}, {"params": [], "method_name": "makeIterator", "method_description": "Return an iterator over the elements of this sequence.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSFastEnumerationIterator"]}, "class_name": "NSOrderedSet"}], "Vars": [{"var_name": "count", "var_description": "The number of members in the set.", "var_type": "Int"}, {"var_name": "firstObject", "var_description": "The first object in the ordered set.", "var_type": "Any"}, {"var_name": "lastObject", "var_description": "The last object in the ordered set.", "var_type": "Any"}, {"var_name": "reversed", "var_description": "An ordered set in the reverse order.", "var_type": "NSOrderedSet"}, {"var_name": "description", "var_description": "A string that represents the contents of the ordered set, formatted as a property list.", "var_type": "String"}, {"var_name": "array", "var_description": "A representation of the ordered set as an array.", "var_type": "[Any]"}, {"var_name": "set", "var_description": "A representation of the set containing the contents of the ordered set.", "var_type": "Set<AnyHashable>"}], "class_name": "NSOrderedSet", "class_inherit_list": ["NSObject"], "interface_list": ["CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSMutableCopying", "NSSecureCoding", "Sequence"], "class_description": "NSOrderedSet declares the programmatic interface for static sets of distinct objects. You establish a static set\u2019s entries when it\u2019s created, and thereafter the entries can\u2019t be modified. NSMutableOrderedSet, on the other hand, declares a programmatic interface for dynamic sets of distinct objects. A dynamic\u2014or mutable\u2014set allows the addition and deletion of entries at any time, automatically allocating memory as needed.\nYou can use ordered sets as an alternative to arrays when the order of elements is important and performance in testing whether an object is contained in the set is a consideration\u2014testing for membership of an array is slower than testing for membership of a set.\n", "package_name": "foundation"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSData"], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "NSMutableData", "method_description": "Appends to the receiver a given number of bytes from a given buffer.", "params": [{"param_type": "UnsafeRawPointer", "param_name": ["bytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["length"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "NSMutableData", "method_description": "Appends the content of another data object to the receiver.", "params": [{"param_type": "Data", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "increaseLength", "class_name": "NSMutableData", "method_description": "Increases the length of the receiver by a given number of bytes.", "params": [{"param_type": "Int", "param_name": ["by", "extraLength"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceBytes", "class_name": "NSMutableData", "method_description": "Replaces with a given set of bytes a given range within the contents of the receiver. ", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}, {"param_type": "UnsafeRawPointer", "param_name": ["withBytes", "bytes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceBytes", "class_name": "NSMutableData", "method_description": "Replaces with a given set of bytes a given range within the contents of the receiver.", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}, {"param_type": "UnsafeRawPointer", "param_name": ["withBytes", "replacementBytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["length", "replacementLength"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resetBytes", "class_name": "NSMutableData", "method_description": "Replaces with zeroes the contents of the receiver in a given range.", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setData", "class_name": "NSMutableData", "method_description": "Replaces the entire contents of the receiver with the contents of another data object.", "params": [{"param_type": "Data", "param_name": ["data"], "param_description": ""}]}], "Vars": [{"var_type": "UnsafeMutableRawPointer", "var_description": "A pointer to the data contained by the mutable data object.", "var_name": "mutableBytes"}, {"var_type": "Int", "var_description": "The number of bytes contained in the mutable data object.", "var_name": "length"}], "subclass_list": [], "class_description": "NSMutableData and its superclass NSData provide data objects, or object-oriented wrappers for byte buffers. Data objects let simple allocated buffers (that is, data with no embedded pointers) take on the behavior of Foundation objects. They are typically used for data storage and are also useful in Distributed Objects applications, where data contained in data objects can be copied or moved between applications. NSData creates static data objects, and NSMutableData creates dynamic data objects. You can easily convert one type of data object to the other with the initializer that takes an NSData object or an  NSMutableData object as an argument.\nThe following NSData methods change when used on a mutable data object:\ninit(bytesNoCopy:length:freeWhenDone:)\ninit(bytesNoCopy:length:deallocator:)\ninit(bytesNoCopy:length:)\ndataWithBytesNoCopy:length:freeWhenDone:\ndataWithBytesNoCopy:length:\nWhen called, the bytes are immediately copied and then the buffer is freed. \nNSMutableData is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFData. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Data structure, which bridges to the NSMutableData class and its immutable superclass NSData. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "class_name": "NSMutableData"}
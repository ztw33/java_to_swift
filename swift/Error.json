{"class_description": "Any type that declares conformance to the Error protocol can be used to represent an error in Swift\u2019s error handling system. Because the Error protocol has no requirements of its own, you can declare conformance on any custom type you create.\nSwift\u2019s enumerations are well suited to represent simple errors. Create an enumeration that conforms to the Error protocol with a case for each possible error. If there are additional details about the error that could be helpful for recovery, use associated values to include that information.\nThe following example shows an IntParsingError enumeration that captures two different kinds of errors that can occur when parsing an integer from a string: overflow, where the value represented by the string is too large for the integer data type, and invalid input, where nonnumeric characters are found within the input.\nThe invalidInput case includes the invalid character as an associated value.\nThe next code sample shows a possible extension to the Int type that parses the integer value of a String instance, throwing an error when there is a problem during parsing.\nWhen calling the new Int initializer within a do statement, you can use pattern matching to match specific cases of your custom error type and access their associated values, as in the example below.\nSometimes you may want different error states to include the same common data, such as the position in a file or some of your application\u2019s state. When you do, use a structure to represent errors. The following example uses a structure to represent an error when parsing an XML document, including the line and column numbers where the error occurred:\nOnce again, use pattern matching to conditionally catch errors. Here\u2019s how you can catch any XMLParsingError errors thrown by the parse(_:) function:\n", "package_name": "swift", "interface_list": [], "Methods": [], "class_inherit_list": [], "Vars": [{"var_type": "String", "var_description": "Retrieve the localized description for this error.", "var_name": "localizedDescription"}], "subclass_list": ["CustomNSError", "LocalizedError", "RecoverableError"], "class_name": "Error"}
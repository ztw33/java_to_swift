{"class_inherit_list": [], "Vars": [{"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<IndexingIterator<Elements>>", "var_name": "lazy"}, {"var_description": "A value less than or equal to the number of elements in the sequence, calculated nondestructively.", "var_type": "Int", "var_name": "underestimatedCount"}], "class_name": "IndexingIterator", "interface_list": ["IteratorProtocol", "Sequence"], "subclass_list": [], "class_description": "The IndexingIterator type is the default iterator for any collection that doesn\u2019t declare its own. It acts as an iterator by using a collection\u2019s indices to step over each value in the collection. Most collections in the standard library use IndexingIterator as their iterator.\nBy default, any custom collection type you create will inherit a makeIterator() method that returns an IndexingIterator instance, making it unnecessary to declare your own. When creating a custom collection type, add the minimal requirements of the Collection protocol: starting and ending indices and a subscript for accessing elements. With those elements defined, the inherited makeIterator() method satisfies the requirements of the Sequence protocol.\nHere\u2019s an example of a type that declares the minimal requirements for a collection. The CollectionOfTwo structure is a fixed-size collection that always holds two elements of a specific type.\nBecause CollectionOfTwo doesn\u2019t define its own makeIterator() method or Iterator associated type, it uses the default iterator type, IndexingIterator. This example shows how a CollectionOfTwo instance can be created holding the values of a point, and then iterated over using a for-in loop.\n", "Methods": [{"return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_type": "(Elements.Element", "param_name": ["predicate"]}]}, {"return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["ElementOfResult rethrows -> [ElementOfResult]"]}, "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Elements.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "class_name": "IndexingIterator", "params": [{"param_description": "The element to find in the sequence.", "param_type": "Elements.Element", "param_name": ["element"]}]}, {"return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Elements.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence starting after the initial, consecutive elements that satisfy predicate."], "return_name": [""], "return_type": ["Bool rethrows -> AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence by skipping the initial, consecutive elements that satisfy the given predicate.", "method_name": "drop", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.", "param_type": "(Elements.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence starting after the first element of the sequence."], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence containing all but the first element of the sequence.", "method_name": "dropFirst", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "class_name": "IndexingIterator", "params": [{"param_description": "The number of elements to drop from the beginning of the sequence. k must be greater than or equal to zero.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["A subsequence leaving off the last element of the sequence."], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence containing all but the last element of the sequence.", "method_name": "dropLast", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A subsequence leaving off the specified number of elements."], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence containing all but the given number of final elements.", "method_name": "dropLast", "class_name": "IndexingIterator", "params": [{"param_description": "", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<IndexingIterator<Elements>>"]}, "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["An array of the elements that isIncluded allowed."], "return_name": [""], "return_type": ["Bool rethrows -> [Elements.Element]"]}, "method_description": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.", "method_name": "filter", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.", "param_type": "(Elements.Element", "param_name": ["isIncluded"]}]}, {"return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Elements.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The resulting flattened array."], "return_name": [""], "return_type": ["SegmentOfResult rethrows -> [SegmentOfResult.Element]"]}, "method_description": "Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.", "method_name": "flatMap", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns a sequence or collection.", "param_type": "(Elements.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["ElementOfResult rethrows -> [ElementOfResult]"]}, "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "flatMap", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Elements.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as a parameter.", "param_type": "(Elements.Element", "param_name": ["body"]}]}, {"return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": [""], "return_type": ["FlattenSequence<IndexingIterator<Elements>>"]}, "method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "IndexingIterator", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<IndexingIterator<Elements>>"]}, "method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_type": "Sequence", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<Elements>"]}, "method_description": "Returns an iterator over the elements of this sequence.", "method_name": "makeIterator", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "IndexingIterator", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Elements.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Elements.Element"]}, "method_description": "Returns the maximum element in the sequence.", "method_name": "max", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Bool rethrows -> Elements.Element"]}, "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "class_name": "IndexingIterator", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Elements.Element"]}, "method_description": "Returns the minimum element in the sequence.", "method_name": "min", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bool rethrows -> Elements.Element"]}, "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "class_name": "IndexingIterator", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": ["The next element in the underlying sequence if a next element exists; otherwise, nil."], "return_name": [""], "return_type": ["Elements.Element"]}, "method_description": "Advances to the next element and returns it, or nil if no next element exists.", "method_name": "next", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A subsequence starting at the beginning of this sequence with at most maxLength elements."], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the sequence.", "method_name": "prefix", "class_name": "IndexingIterator", "params": [{"param_description": "The maximum number of elements to return. The value of maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence of the initial, consecutive elements that satisfy predicate."], "return_name": [""], "return_type": ["Bool rethrows -> AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence containing the initial, consecutive elements that satisfy the given predicate.", "method_name": "prefix", "class_name": "IndexingIterator", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the result.", "param_type": "(Elements.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "IndexingIterator", "params": [{"param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_type": "Result", "param_name": ["initialResult"]}, {"param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_type": "(Result", "param_name": ["nextPartialResult"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "IndexingIterator", "params": [{"param_description": "The value to use as the initial accumulating value.", "param_type": "Result", "param_name": ["into", "initialResult"]}, {"param_description": "A closure that updates the accumulating value with an element of the sequence.", "param_type": "(inout Result", "param_name": ["updateAccumulatingResult"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": ["An array containing the elements of this sequence in reverse order."], "return_name": [""], "return_type": ["[Elements.Element]"]}, "method_description": "Returns an array containing the elements of this sequence in reverse order.", "method_name": "reversed", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Elements.Element]"]}, "method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Elements.Element]"]}, "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "class_name": "IndexingIterator", "params": [{"param_description": "The random number generator to use when shuffling the sequence.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Elements.Element]"]}, "method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "class_name": "IndexingIterator", "params": []}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["Bool rethrows -> [Elements.Element]"]}, "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "class_name": "IndexingIterator", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Elements.Element", "param_name": ["Elements.Element"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this sequence\u2019s elements."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the longest possible subsequences of the sequence, in order, that don\u2019t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.", "method_name": "split", "class_name": "IndexingIterator", "params": [{"param_description": "The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the sequence satisfying the isSeparator predicate. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}, {"param_description": "A closure that returns true if its argument should be used to split the sequence; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["whereSeparator", "isSeparator"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this sequence\u2019s elements."], "return_name": [""], "return_type": ["[AnySequence<Elements.Element>]"]}, "method_description": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.", "method_name": "split", "class_name": "IndexingIterator", "params": [{"param_description": "The element that should be split upon.", "param_type": "Elements.Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "class_name": "IndexingIterator", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Elements.Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnySequence<Elements.Element>"]}, "method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.", "method_name": "suffix", "class_name": "IndexingIterator", "params": [{"param_description": "The maximum number of elements to return. The value of maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}], "package_name": "swift"}
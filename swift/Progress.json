{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Progress"], "return_name": [""], "return_description": []}, "method_name": "discreteProgress", "class_name": "Progress", "method_description": "Creates and returns an NSProgress instance with the specified totalUnitCount that is not part of any existing progress tree. The instance is initialized using init(parent:userInfo:) with the parent set to nil.", "params": [{"param_type": "Int64", "param_name": ["totalUnitCount", "unitCount"], "param_description": ""}]}, {"return_value": {"return_type": ["Progress"], "return_name": [""], "return_description": ["The NSProgress instance associated with the current thread, if any."]}, "method_name": "current", "class_name": "Progress", "method_description": "Returns the NSProgress instance, if any, associated with the current thread by a previous invocation of becomeCurrent(withPendingUnitCount:).", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "becomeCurrent", "class_name": "Progress", "method_description": "Sets the receiver as the current progress object of the current thread and specifies the portion of work to be performed by the next child progress object of the receiver.", "params": [{"param_type": "Int64", "param_name": ["withPendingUnitCount", "unitCount"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addChild", "class_name": "Progress", "method_description": "Add a process object as a child of a progress tree. The inUnitCount indicates the expected work for the progress unit.", "params": [{"param_type": "Progress", "param_name": ["child"], "param_description": ""}, {"param_type": "Int64", "param_name": ["withPendingUnitCount", "inUnitCount"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resignCurrent", "class_name": "Progress", "method_description": "Balance the most recent previous invocation of becomeCurrent(withPendingUnitCount:) on the same thread by restoring the current progress object to what it was before becomeCurrent(withPendingUnitCount:) was invoked.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "cancel", "class_name": "Progress", "method_description": "Cancel progress tracking.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "pause", "class_name": "Progress", "method_description": "Pause progress tracking.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resume", "class_name": "Progress", "method_description": "Resume progress tracking.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setUserInfoObject", "class_name": "Progress", "method_description": "Set a value in the userInfo dictionary.", "params": [{"param_type": "Any", "param_name": ["objectOrNil"], "param_description": ""}, {"param_type": "ProgressUserInfoKey", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["ReturnType rethrows -> ReturnType"], "return_name": [""], "return_description": []}, "method_name": "performAsCurrent", "class_name": "Progress", "method_description": "", "params": [{"param_type": "Int64", "param_name": ["withPendingUnitCount", "unitCount"], "param_description": ""}, {"param_type": "(", "param_name": ["using", "work"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "publish", "class_name": "Progress", "method_description": "", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "unpublish", "class_name": "Progress", "method_description": "", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "addSubscriber", "class_name": "Progress", "method_description": "", "params": [{"param_type": "URL", "param_name": ["forFileURL", "url"], "param_description": ""}, {"param_type": "@escaping Progress.PublishingHandler", "param_name": ["withPublishingHandler", "publishingHandler"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeSubscriber", "class_name": "Progress", "method_description": "", "params": [{"param_type": "Any", "param_name": ["subscriber"], "param_description": ""}]}], "Vars": [{"var_type": "Int64", "var_description": "The total number of units of work tracked for the current progress.", "var_name": "totalUnitCount"}, {"var_type": "Int64", "var_description": "The number of units of work for the current job that have already been completed.", "var_name": "completedUnitCount"}, {"var_type": "String!", "var_description": "A localized description of progress tracked by the receiver.", "var_name": "localizedDescription"}, {"var_type": "String!", "var_description": "A more specific localized description of progress tracked by the receiver.", "var_name": "localizedAdditionalDescription"}, {"var_type": "Double", "var_description": "The fraction of the overall work completed by this progress object, including work done by any children it may have.", "var_name": "fractionCompleted"}, {"var_type": "Bool", "var_description": "Indicates whether the receiver is tracking work that can be cancelled.", "var_name": "isCancellable"}, {"var_type": "Bool", "var_description": "Indicates whether the receiver is tracking work that has been cancelled.", "var_name": "isCancelled"}, {"var_type": "(()", "var_description": "The block to invoke when progress is cancelled.", "var_name": "cancellationHandler"}, {"var_type": "Bool", "var_description": "Indicates whether the receiver is tracking work that can be paused.", "var_name": "isPausable"}, {"var_type": "Bool", "var_description": "Indicates whether the receiver is tracking work that has been paused.", "var_name": "isPaused"}, {"var_type": "(()", "var_description": "The block to invoke when progress is paused.", "var_name": "pausingHandler"}, {"var_type": "(()", "var_description": "The block to invoke when progress is resumed.", "var_name": "resumingHandler"}, {"var_type": "Bool", "var_description": "Indicates whether the tracked progress is indeterminate.", "var_name": "isIndeterminate"}, {"var_type": "ProgressKind", "var_description": "A string identifying the kind of progress being made.", "var_name": "kind"}, {"var_type": "[ProgressUserInfoKey", "var_description": "A dictionary of arbitrary values associated with the receiver.", "var_name": "userInfo"}, {"var_type": "TimeInterval", "var_description": "", "var_name": "estimatedTimeRemaining"}, {"var_type": "Int", "var_description": "", "var_name": "fileCompletedCount"}, {"var_type": "Progress.FileOperationKind", "var_description": "", "var_name": "fileOperationKind"}, {"var_type": "Int", "var_description": "", "var_name": "fileTotalCount"}, {"var_type": "URL", "var_description": "", "var_name": "fileURL"}, {"var_type": "Bool", "var_description": "", "var_name": "isFinished"}, {"var_type": "Bool", "var_description": "", "var_name": "isOld"}, {"var_type": "Int", "var_description": "", "var_name": "throughput"}], "subclass_list": [], "class_description": "The Progress class provides a self-contained mechanism for progress reporting. It makes it easy for code that does work to report the progress of that work, and for user interface code to observe that progress for presentation to the user. Specifically, it can be used to show the user a progress bar and explanatory text, both updated properly as progress is made. It also allows work to be cancelled or paused by the user.\nUsing the methods of this class, your code can report the progress it\u2019s currently making toward completing some task, including progress in related subtasks. You can create instances of this class using the init(parent:userInfo:) instance method or the init(totalUnitCount:) class method. \nProgress objects have a number of properties that you can use to observe and report current progress. For instance, the totalUnitCount property represents the total number of units of work that need to be performed, and the completedUnitCount and fractionCompleted properties represents how much of that work has already been completed. The fractionCompleted property is useful for updating progress indicators or textual descriptors; to check whether progress is complete, you should test that completedUnitCount >= totalUnitCount (assuming, of course, that totalUnitCount > 0).\nThe following listing shows a sample method that reports the progress of performing some operation on a piece of data. When the progress object is first created, the value of its totalUnitCount property is set to some suitable batch size for this operation, and the completedUnitCount count is 0. Each time the loop executes and the batch of data is processed, the progress object\u2019s completedUnitCount property is incremented appropriately.\nEach of the properties of a progress object, including totalUnitCount, completedUnitCount, and fractionCompleted, support Key-Value Observing. This makes it extremely easy for a view or window controller object to observe the properties, and update UI elements such as progress indicators when the values change. It also means that there is a non-zero cost to updating the values of these properties, so you should avoid using a unit count that is too granular\u2014if you\u2019re iterating over a large data set, for example, and each operation takes only a trivial amount of time, you should divide the work into batches so you can update the unit count once per batch rather than once per iteration.\nOften, your code may need to report the overall progress of an operation that is composed of several sub-operations. To accomplish this, your code can report the progress of each sub-operation by building up a tree of progress objects.\nThe NSProgress reporting mechanism supports a loosely coupled relationship between progress objects. Sub-operations don\u2019t need to know anything about the parent progress item\u2014you can simply create new progress objects that are added as a child of another NSProgress instance. The child object is assigned a portion of the parent\u2019s pending unit count. When the children complete, the parent\u2019s completedUnitCount property is automatically increased by a predefined amount.\nYou add child progress objects to your tree implicitly or explicitly.\nAdd a child implicitly by setting a pending unit count for the parent and creating a new NSProgress instance. That new instance will be set as a child of the parent and be assigned the pending unit count. \nAs an example, consider that you are tracking the progress of code downloading and copying files on disk. You could use a single progress object to track the entire task, but it\u2019s easier to manage each subtask using a separate progress object. You start by creating an overall parent progress object with a suitable total unit count, then call becomeCurrent(withPendingUnitCount:), then create your sub-task progress objects, before finally calling resignCurrent().\nThe pending unit count that you specify in the first method is divided equally among the child progress objects you create between these two method calls. Each child progress object maintains its own internal unit count, but when it completes its units (that is, the child object\u2019s completedUnitCount == totalUnitCount), the parent progress object\u2019s completedUnitCount is increased by the assigned portion of the original pending unit count.\nIn the following example, the overall parent progress has 100 units; the two child objects therefore get 50 pending units each, and keep track internally of 10 units of work each. When each child completes its 10 units, the parent\u2019s completed unit count is increased by 50.\nIf you don\u2019t create any child progress objects between the calls to becomeCurrent(withPendingUnitCount:) and resignCurrent(), the \u201cparent\u201d progress automatically updates its completedUnitCount by adding the pending units.\nAs of iOS 9.0 and OS X v10.11 you can explicitly add a child to a progress tree.\nTo add a child, call addChild(_:withPendingUnitCount:) on the parent. The value for pending unit count is the amount of the parent\u2019s  totalUnitCount consumed by the child. The child usually follows the ProgressReporting protocol.\nIn the following example, the overall parent progress has 10 units. The child progress for the download gets 8 units and tracks the download of a photo. The progress for the filter takes a lot less time and gets the remaining 2 units. When the download completes the parent\u2019s completed unit count is updated by 8. When the filter completes it is updated by the remaining 2 units.\n", "class_name": "Progress"}
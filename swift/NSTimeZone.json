{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resetSystemTimeZone", "class_name": "NSTimeZone", "method_description": "Clears any time zone value cached for the system property.", "params": []}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The abbreviation for the receiver at aDate."]}, "method_name": "abbreviation", "class_name": "NSTimeZone", "method_description": "Returns the abbreviation for the receiver at a given date.", "params": [{"param_type": "Date", "param_name": ["for", "aDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The difference in seconds between the receiver and Greenwich Mean Time at aDate."]}, "method_name": "secondsFromGMT", "class_name": "NSTimeZone", "method_description": "Returns the difference in seconds between the receiver and Greenwich Mean Time at a given date.", "params": [{"param_type": "Date", "param_name": ["for", "aDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the receiver uses daylight saving time at aDate, otherwise false."]}, "method_name": "isDaylightSavingTime", "class_name": "NSTimeZone", "method_description": "Indicates whether the receiver uses daylight saving time on a given date.", "params": [{"param_type": "Date", "param_name": ["for", "aDate"], "param_description": ""}]}, {"return_value": {"return_type": ["TimeInterval"], "return_name": [""], "return_description": ["The daylight saving time offset for aDate."]}, "method_name": "daylightSavingTimeOffset", "class_name": "NSTimeZone", "method_description": "Returns the daylight saving time offset for a given date.", "params": [{"param_type": "Date", "param_name": ["for", "aDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["The next daylight saving time transition after aDate. Depending on the time zone of the receiver, this method may return a change of the time zone's offset from GMT. Returns nil if the time zone of the receiver does not observe daylight savings time as of aDate."]}, "method_name": "nextDaylightSavingTimeTransition", "class_name": "NSTimeZone", "method_description": "Returns the next daylight saving time transition after a given date.", "params": [{"param_type": "Date", "param_name": ["after", "aDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if aTimeZone and the receiver have the same name and data, otherwise false."]}, "method_name": "isEqual", "class_name": "NSTimeZone", "method_description": "Indicates whether the receiver has the same name and data as the specified time zone.", "params": [{"param_type": "TimeZone", "param_name": ["to", "aTimeZone"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The name of the receiver localized for locale using style."]}, "method_name": "localizedName", "class_name": "NSTimeZone", "method_description": "Returns the localized name of the time zone.", "params": [{"param_type": "NSTimeZone.NameStyle", "param_name": ["style"], "param_description": ""}, {"param_type": "Locale", "param_name": ["locale"], "param_description": ""}]}], "Vars": [{"var_type": "TimeZone", "var_description": "An object that tracks the current system time zone.", "var_name": "local"}, {"var_type": "TimeZone", "var_description": "The time zone currently used by the system.", "var_name": "system"}, {"var_type": "TimeZone", "var_description": "The default time zone for the current app.", "var_name": "`default`"}, {"var_type": "[String]", "var_description": "Returns an array of strings listing the IDs of all the time zones known to the system.", "var_name": "knownTimeZoneNames"}, {"var_type": "[String", "var_description": "Returns a dictionary holding the mappings of time zone abbreviations to time zone names.", "var_name": "abbreviationDictionary"}, {"var_type": "String", "var_description": "The geopolitical region ID that identifies the receiver.", "var_name": "name"}, {"var_type": "String", "var_description": "The abbreviation for the receiver, such as \u201cEDT\u201d (Eastern Daylight Time).", "var_name": "abbreviation"}, {"var_type": "Int", "var_description": "The current difference in seconds between the receiver and Greenwich Mean Time.", "var_name": "secondsFromGMT"}, {"var_type": "Data", "var_description": "The data that stores the information used by the receiver.", "var_name": "data"}, {"var_type": "String", "var_description": "Returns the time zone data version.", "var_name": "timeZoneDataVersion"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver is currently using daylight saving time.", "var_name": "isDaylightSavingTime"}, {"var_type": "TimeInterval", "var_description": "The current daylight saving time offset of the receiver.", "var_name": "daylightSavingTimeOffset"}, {"var_type": "Date", "var_description": "The date of the next daylight saving time transition for the receiver.", "var_name": "nextDaylightSavingTimeTransition"}, {"var_type": "String", "var_description": "A textual description of the time zone including the name, abbreviation, offset from GMT, and whether or not daylight saving time is currently in effect.", "var_name": "description"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the time zone changes.", "var_name": "NSSystemTimeZoneDidChange"}], "subclass_list": [], "class_description": "Time zones represent the standard time policies for a geopolitical region. Time zones have identifiers like \u201cAmerica/Los_Angeles\u201d and can also be identified by abbreviations, such as PST for Pacific Standard Time. You can create time zone objects by ID with init(name:) and by abbreviation with init(abbreviation:). \nNote\nTime zone database entries such as \u201cAmerica/Los_Angeles\u201d are IDs, not names. An example of a time zone name is \u201cPacific Daylight Time\u201d. Although many NSTimeZone symbols include the word \u201cname\u201d, they actually refer to IDs.\nTime zones can also represent a temporal offset\u2014either plus or minus\u2014from Greenwich Mean Time (GMT). For example, the temporal offset of Pacific Standard Time is 8 hours behind Greenwich Mean Time (GMT-8). You can create time zone objects with a temporal offset by using init(forSecondsFromGMT:).\nYou typically work with system time zones rather than creating time zones by identifier or by offset. The system class property returns the time zone currently used by the system, if known. This value is cached once the property is accessed and doesn't reflect any system time zone changes until you call the resetSystemTimeZone() method. The local class property returns an autoupdating proxy object that always returns the current time zone used by the system. You can also set the default class property to make your app run as if it were in a different time zone than the system. \nTip\nYou can't use NSTimeZone APIs to change the time zone of the device or of other apps.\n\nNSTimeZone is toll-free bridged with its Core Foundation counterpart, CFTimeZone. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the TimeZone structure, which bridges to the NSTimeZone class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "class_name": "NSTimeZone"}
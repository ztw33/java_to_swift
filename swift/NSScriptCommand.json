{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["NSScriptCommand"], "return_name": [""], "return_description": []}, "method_name": "current", "class_name": "NSScriptCommand", "method_description": "If a command is being executed in the current thread by Cocoa scripting's built-in Apple event handling, return the command.", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "execute", "class_name": "NSScriptCommand", "method_description": "Executes the command if it is valid and returns the result, if any.", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "performDefaultImplementation", "class_name": "NSScriptCommand", "method_description": "Overridden by subclasses to provide a default implementation for the command represented by the receiver.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "suspendExecution", "class_name": "NSScriptCommand", "method_description": "Suspends the execution of the receiver.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resumeExecution", "class_name": "NSScriptCommand", "method_description": "If a successful, unmatched, invocation of suspendExecution() has been made, resume the execution of the command.", "params": [{"param_type": "Any", "param_name": ["withResult", "result"], "param_description": ""}]}], "Vars": [{"var_type": "NSAppleEventDescriptor", "var_description": "If the receiver was constructed by Cocoa scripting's built-in Apple event handling, returns the Apple event descriptor from which it was constructed.", "var_name": "appleEvent"}, {"var_type": "Any", "var_description": "Returns the object or objects to which the command is to be sent (called both the \u201creceivers\u201d or \u201ctargets\u201d of script commands).", "var_name": "evaluatedReceivers"}, {"var_type": "NSScriptObjectSpecifier", "var_description": "Sets the object specifier to receiversSpec that, when evaluated, indicates the receiver or receivers of the command.", "var_name": "receiversSpecifier"}, {"var_type": "[String", "var_description": "Sets the arguments of the command to args.", "var_name": "arguments"}, {"var_type": "[String", "var_description": "Returns a dictionary containing the arguments of the command, evaluated from object specifiers to objects if necessary. The keys in the dictionary are the argument names.", "var_name": "evaluatedArguments"}, {"var_type": "Any", "var_description": "Sets the object that corresponds to the direct parameter of the Apple event from which the receiver derives.", "var_name": "directParameter"}, {"var_type": "NSScriptCommandDescription", "var_description": "Returns the command description for the command.", "var_name": "commandDescription"}, {"var_type": "NSAppleEventDescriptor", "var_description": "Sets a descriptor for the expected type that will be put in the reply Apple event if the sender requested a reply, execution of the receiver completes, and an error number was set.", "var_name": "scriptErrorExpectedTypeDescriptor"}, {"var_type": "Int", "var_description": "Sets a script error number that is associated with the execution of the command and is returned in the reply Apple event, if a reply was requested by the sender.", "var_name": "scriptErrorNumber"}, {"var_type": "NSAppleEventDescriptor", "var_description": "Sets a descriptor for an object that will be put in the reply Apple event if the sender requested a reply, execution of the receiver completes, and an error number was set.", "var_name": "scriptErrorOffendingObjectDescriptor"}, {"var_type": "String", "var_description": "Sets a script error string that is associated with execution of the command.", "var_name": "scriptErrorString"}, {"var_type": "Int", "var_description": "No error.", "var_name": "NSNoScriptError"}, {"var_type": "Int", "var_description": "The object or objects specified by the direct parameter to a command could not be found.", "var_name": "NSReceiverEvaluationScriptError"}, {"var_type": "Int", "var_description": "The object or objects specified by a key (for commands that support key specifiers) could not be found.", "var_name": "NSKeySpecifierEvaluationScriptError"}, {"var_type": "Int", "var_description": "The object specified by an argument could not be found.", "var_name": "NSArgumentEvaluationScriptError"}, {"var_type": "Int", "var_description": "The receivers don\u2019t support the command sent to them.", "var_name": "NSReceiversCantHandleCommandScriptError"}, {"var_type": "Int", "var_description": "An argument (or more than one argument) is missing.", "var_name": "NSRequiredArgumentsMissingScriptError"}, {"var_type": "Int", "var_description": "An argument (or more than one argument) is of the wrong type or is otherwise invalid.", "var_name": "NSArgumentsWrongScriptError"}, {"var_type": "Int", "var_description": "An unidentified error occurred; indicates an error in the scripting support of your application.", "var_name": "NSUnknownKeyScriptError"}, {"var_type": "Int", "var_description": "An unidentified internal error occurred; indicates an error in the scripting support of your application.", "var_name": "NSInternalScriptError"}, {"var_type": "Int", "var_description": "The implementation of a scripting command signaled an error.", "var_name": "NSOperationNotSupportedForKeyScriptError"}, {"var_type": "Int", "var_description": "Could not create the script command; an invalid or unrecognized Apple event was received.", "var_name": "NSCannotCreateScriptCommandError"}, {"var_type": "Bool", "var_description": "", "var_name": "isWellFormed"}], "subclass_list": [], "class_description": "An instance of NSScriptCommand represents a scripting statement, such as set word 5 of the front document to word 1 of the second document, and contains the information needed to perform the operation specified by the statement.\nWhen an Apple event reaches a Cocoa application, Cocoa\u2019s built-in scripting support transforms it into a script command (that is, an instance of NSScriptCommand or one of the subclasses provided by Cocoa scripting or by your application) and executes the command in the context of the application. Executing a command means either invoking the selector associated with the command on the object or objects designated to receive the command, or having the command perform its default implementation method (performDefaultImplementation()).\nYour application most likely calls methods of NSScriptCommand to extract the command arguments. You do this either in the performDefaultImplementation method of a command subclass you have created, or in an object method designated as the selector to handle a particular command.\nAs part of Cocoa\u2019s standard scripting implementation, NSScriptCommand and its subclasses can handle the default command set for AppleScript's Standard suite for most applications without any subclassing. The Standard suite includes commands such as copy, count, create, delete, exists, and move, as well as common object classes such as application, document, and window.\nFor more information on working with script commands, see Script Commands in Cocoa Scripting Guide.\n", "class_name": "NSScriptCommand"}
{"package_name": "foundation", "interface_list": ["OptionSet"], "class_inherit_list": [], "Methods": [], "Vars": [{"var_type": "XMLNode.Options", "var_description": "Includes a content type declaration for HTML or XHTML in the output of the document. ", "var_name": "documentIncludeContentTypeDeclaration"}, {"var_type": "XMLNode.Options", "var_description": "Formats HTML into valid XHTML during processing of the document. ", "var_name": "documentTidyHTML"}, {"var_type": "XMLNode.Options", "var_description": "Changes malformed XML into valid XML during processing of the document. ", "var_name": "documentTidyXML"}, {"var_type": "XMLNode.Options", "var_description": "Validates this document against its DTD (internal or external) or XML Schema. ", "var_name": "documentValidate"}, {"var_type": "XMLNode.Options", "var_description": "Replaces all XInclude nodes in the document with the nodes referred to.", "var_name": "documentXInclude"}, {"var_type": "XMLNode.Options", "var_description": "Requests that an element should be contracted when empty; for example, <flag/>.", "var_name": "nodeCompactEmptyElement"}, {"var_type": "XMLNode.Options", "var_description": "Requests that an element should be expanded when empty; for example, <flag></flag>. This is the default.", "var_name": "nodeExpandEmptyElement"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that a text node contains and is written out as a CDATA section.", "var_name": "nodeIsCDATA"}, {"var_type": "XMLNode.Options", "var_description": "Requests that external entities are always loaded.", "var_name": "nodeLoadExternalEntitiesAlways"}, {"var_type": "XMLNode.Options", "var_description": "Requests that external entities are never loaded.", "var_name": "nodeLoadExternalEntitiesNever"}, {"var_type": "XMLNode.Options", "var_description": "Requests that external entities are always loaded and only applies when a URL has been provided.", "var_name": "nodeLoadExternalEntitiesSameOriginOnly"}, {"var_type": "XMLNode.Options", "var_description": "", "var_name": "nodeNeverEscapeContents"}, {"var_type": "XMLNode.Options", "var_description": "", "var_name": "nodePreserveAll"}, {"var_type": "XMLNode.Options", "var_description": "Requests that NSXMLNode preserve the order of attributes as in the source XML. ", "var_name": "nodePreserveAttributeOrder"}, {"var_type": "XMLNode.Options", "var_description": "Requests that NSXMLNode preserve CDATA blocks where defined in the input XML. ", "var_name": "nodePreserveCDATA"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that character references (&#nnn;) should not be resolved for XML output of this node.", "var_name": "nodePreserveCharacterReferences"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that declarations in a DTD should be preserved until it the DTD is modified. For example, parameter entities are by default expanded; with this option, they are written out as they originally occur in the DTD.", "var_name": "nodePreserveDTD"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that empty elements in the input XML be preserved in their contracted or expanded form.", "var_name": "nodePreserveEmptyElements"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that entities (&xyz;) should not be resolved for XML output of this node.", "var_name": "nodePreserveEntities"}, {"var_type": "XMLNode.Options", "var_description": "Requests NSXML to preserve the order of namespace URI definitions as in the source XML. ", "var_name": "nodePreserveNamespaceOrder"}, {"var_type": "XMLNode.Options", "var_description": "Requests NSXMLNode not to choose prefixes based on the closest namespace URI definition.", "var_name": "nodePreservePrefixes"}, {"var_type": "XMLNode.Options", "var_description": "Specifies that the quoting style used in the input XML (single or double quotes) be preserved.", "var_name": "nodePreserveQuotes"}, {"var_type": "XMLNode.Options", "var_description": "Requests NSXMLNode to preserve whitespace characters (such as tabs and carriage returns) in the XML source that are not part of node content.", "var_name": "nodePreserveWhitespace"}, {"var_type": "XMLNode.Options", "var_description": "Print this node with extra space for readability. (Output)", "var_name": "nodePrettyPrint"}, {"var_type": "XMLNode.Options", "var_description": "", "var_name": "nodePromoteSignificantWhitespace"}, {"var_type": "XMLNode.Options", "var_description": "Requests that NSXML use double quotes for the value of an attribute or namespace node. This is the default.", "var_name": "nodeUseDoubleQuotes"}, {"var_type": "XMLNode.Options", "var_description": "Requests that NSXML use single quotes for the value of an attribute or namespace node.", "var_name": "nodeUseSingleQuotes"}], "subclass_list": [], "class_description": "The options with \u201cPreserve\u201d in their names are applicable only when external sources of XML are parsed; they have no effect on node objects that are programmatically created. Other options are used in initialization and output methods of NSXMLDocument; see the XMLDocument reference documentation for details.\n", "class_name": "XMLNode.Options"}
{"class_inherit_list": [], "Vars": [{"var_description": "", "var_type": "Character.UnicodeScalarView", "var_name": "unicodeScalars"}, {"var_description": "", "var_type": "String", "var_name": "description"}, {"var_description": "A textual representation of the character, suitable for debugging.", "var_type": "String", "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the Character instance.", "var_type": "Mirror", "var_name": "customMirror"}, {"var_description": "A custom playground Quick Look for the Character instance.", "var_type": "PlaygroundQuickLook", "var_name": "customPlaygroundQuickLook"}], "class_name": "Character", "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "Equatable", "ExpressibleByExtendedGraphemeClusterLiteral", "Hashable", "TextOutputStreamable"], "subclass_list": [], "class_description": "The Character type represents a character made up of one or more Unicode scalar values, grouped by a Unicode boundary algorithm. Generally, a Character instance matches what the reader of a string will perceive as a single character. Strings are collections of Character instances, so the number of visible characters is generally the most natural way to count the length of a string.\nBecause each character in a string can be made up of one or more Unicode scalar values, the number of characters in a string may not match the length of the Unicode scalar value representation or the length of the string in a particular binary representation.\nEvery Character instance is composed of one or more Unicode scalar values that are grouped together as an extended grapheme cluster. The way these scalar values are grouped is defined by a canonical, localized, or otherwise tailored Unicode segmentation algorithm.\nFor example, a country\u2019s Unicode flag character is made up of two regional indicator scalar values that correspond to that country\u2019s ISO 3166-1 alpha-2 code. The alpha-2 code for The United States is \u201cUS\u201d, so its flag character is made up of the Unicode scalar values \"\\u{1F1FA}\" (REGIONAL INDICATOR SYMBOL LETTER U) and \"\\u{1F1F8}\" (REGIONAL INDICATOR SYMBOL LETTER S). When placed next to each other in a string literal, these two scalar values are combined into a single grapheme cluster, represented by a Character instance in Swift.\nFor more information about the Unicode terms used in this discussion, see the Unicode.org glossary. In particular, this discussion mentions extended grapheme clusters and Unicode scalar values.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Writes the character into the given output stream.", "method_name": "write", "class_name": "Character", "params": [{"param_description": "An output stream.", "param_type": "inout TextOutputStream", "param_name": ["to", "target"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "Character", "params": [{"param_description": "", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "Character", "params": [{"param_description": "A value to compare.", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "", "class_name": "Character", "params": [{"param_description": "", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Character", "params": [{"param_description": "A value to compare.", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Character", "params": [{"param_description": "A value to compare.", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Character", "params": [{"param_description": "A value to compare.", "param_type": "Character", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Character", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Character>"]}, "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "class_name": "Character", "params": [{"param_description": "The lower bound for the range.", "param_type": "Character", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Character", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Character>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "Character", "params": [{"param_description": "The lower bound for the range.", "param_type": "Character", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Character", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Character>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "Character", "params": [{"param_description": "The upper bound for the range.", "param_type": "Character", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Character>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "Character", "params": [{"param_description": "The upper bound for the range.", "param_type": "Character", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Character>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "Character", "params": [{"param_description": "The lower bound for the range.", "param_type": "Character", "param_name": ["minimum"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "class_name": "Character", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}], "package_name": "swift"}
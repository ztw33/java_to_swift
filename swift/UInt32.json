{"class_inherit_list": [], "Vars": [{"var_description": "The big-endian representation of this integer.", "var_type": "UInt32", "var_name": "bigEndian"}, {"var_description": "The number of bits in the binary representation of this value.", "var_type": "Int", "var_name": "bitWidth"}, {"var_description": "A representation of this integer with the byte order swapped.", "var_type": "UInt32", "var_name": "byteSwapped"}, {"var_description": "A mirror that reflects the UInt32 instance.", "var_type": "Mirror", "var_name": "customMirror"}, {"var_description": "A custom playground Quick Look for the UInt32 instance.", "var_type": "PlaygroundQuickLook", "var_name": "customPlaygroundQuickLook"}, {"var_description": "A textual representation of this value.", "var_type": "String", "var_name": "description"}, {"var_description": "The number of leading zeros in this value\u2019s binary representation.", "var_type": "Int", "var_name": "leadingZeroBitCount"}, {"var_description": "The little-endian representation of this integer.", "var_type": "UInt32", "var_name": "littleEndian"}, {"var_description": "The magnitude of this value.", "var_type": "UInt32", "var_name": "magnitude"}, {"var_description": "The number of bits equal to 1 in this value\u2019s binary representation.", "var_type": "Int", "var_name": "nonzeroBitCount"}, {"var_description": "The number of trailing zeros in this value\u2019s binary representation.", "var_type": "Int", "var_name": "trailingZeroBitCount"}, {"var_description": "A collection containing the words of this value\u2019s binary representation, in order from the least significant to most significant.", "var_type": "UInt32.Words", "var_name": "words"}, {"var_description": "The number of bits used for the underlying binary representation of values of this type.", "var_type": "Int", "var_name": "bitWidth"}, {"var_description": "A Boolean value indicating whether this type is a signed integer type.", "var_type": "Bool", "var_name": "isSigned"}, {"var_description": "The maximum representable integer in this type.", "var_type": "UInt32", "var_name": "max"}, {"var_description": "The minimum representable integer in this type.", "var_type": "UInt32", "var_name": "min"}], "class_name": "UInt32", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CVarArg", "FixedWidthInteger", "Hashable", "UnsignedInteger"], "subclass_list": [], "class_description": "", "Methods": [{"return_value": {"return_description": ["A tuple containing the result of the addition along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire sum. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated sum of this value and rhs."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt32", "Bool"]}, "method_description": "Returns the sum of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "addingReportingOverflow", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["other"]}]}, {"return_value": {"return_description": ["A value that is offset from this value by n."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns a value that is offset the specified distance from this value.", "method_name": "advanced", "class_name": "UInt32", "params": [{"param_description": "The distance to advance this value.", "param_type": "Int", "param_name": ["by", "n"]}]}, {"return_value": {"return_description": ["The distance from this value to other."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the distance from this value to the given value, expressed as a stride.", "method_name": "distance", "class_name": "UInt32", "params": [{"param_description": "The value to calculate the distance to.", "param_type": "UInt32", "param_name": ["to", "other"]}]}, {"return_value": {"return_description": ["A tuple containing the result of the division along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire quotient. If the overflow component is true, an overflow occurred and the partialValue component contains either the truncated quotient or, if the quotient is undefined, the dividend."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt32", "Bool"]}, "method_description": "Returns the quotient obtained by dividing this value by the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "dividedReportingOverflow", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["by", "other"]}]}, {"return_value": {"return_description": ["A tuple containing the quotient and remainder of dividend divided by this value."], "return_name": [["quotient"], ["remainder"]], "return_type": ["UInt32", "UInt32"]}, "method_description": "Returns a tuple containing the quotient and remainder of dividing the given value by this value.", "method_name": "dividingFullWidth", "class_name": "UInt32", "params": [{"param_description": "A tuple containing the high and low parts of a double-width integer. The high component of the value carries the sign, if the type is signed.", "param_type": "UInt32", "param_name": ["dividend"]}, {"param_description": "", "param_type": "UInt32.Magnitude", "param_name": ["low"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Encodes this value into the given encoder.", "method_name": "encode", "class_name": "UInt32", "params": [{"param_description": "The encoder to write data to.", "param_type": "Encoder", "param_name": ["to", "encoder"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "class_name": "UInt32", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}, {"return_value": {"return_description": ["A tuple containing the high and low parts of the result of multiplying this value and other."], "return_name": [["high"], ["low"]], "return_type": ["UInt32", "UInt32.Magnitude"]}, "method_description": "Returns a tuple containing the high and low parts of the result of multiplying this value by the given value.", "method_name": "multipliedFullWidth", "class_name": "UInt32", "params": [{"param_description": "The value to multiply this value by.", "param_type": "UInt32", "param_name": ["by", "other"]}]}, {"return_value": {"return_description": ["A tuple containing the result of the multiplication along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire product. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated product of this value and rhs."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt32", "Bool"]}, "method_description": "Returns the product of this value and the given value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "multipliedReportingOverflow", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["by", "other"]}]}, {"return_value": {"return_description": ["A tuple containing the quotient and remainder of this value divided by rhs."], "return_name": [["quotient"], ["remainder"]], "return_type": ["UInt32", "UInt32"]}, "method_description": "Returns the quotient and remainder of this value divided by the given value.", "method_name": "quotientAndRemainder", "class_name": "UInt32", "params": [{"param_description": "The value to divide this value by.", "param_type": "UInt32", "param_name": ["dividingBy", "rhs"]}]}, {"return_value": {"return_description": ["A tuple containing the result of the operation along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire remainder. If the overflow component is true, an overflow occurred during division and the partialValue component contains either the entire remainder or, if the remainder is undefined, the dividend."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt32", "Bool"]}, "method_description": "Returns the remainder after dividing this value by the given value, along with a Boolean value indicating whether overflow occurred during division.", "method_name": "remainderReportingOverflow", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["dividingBy", "other"]}]}, {"return_value": {"return_description": ["The sign of this number, expressed as an integer of the same type."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns -1 if this value is negative and 1 if it\u2019s positive; otherwise, 0.", "method_name": "signum", "class_name": "UInt32", "params": []}, {"return_value": {"return_description": ["A tuple containing the result of the subtraction along with a Boolean value indicating whether overflow occurred. If the overflow component is false, the partialValue component contains the entire difference. If the overflow component is true, an overflow occurred and the partialValue component contains the truncated result of rhs subtracted from this value."], "return_name": [["partialValue"], ["overflow"]], "return_type": ["UInt32", "Bool"]}, "method_description": "Returns the difference obtained by subtracting the given value from this value, along with a Boolean value indicating whether overflow occurred in the operation.", "method_name": "subtractingReportingOverflow", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["other"]}]}, {"return_value": {"return_description": ["The sum of this value and rhs."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the sum of this value and the given value without checking for arithmetic overflow.", "method_name": "unsafeAdding", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["other"]}]}, {"return_value": {"return_description": ["The result of dividing this value by rhs."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the quotient obtained by dividing this value by the given value without checking for arithmetic overflow.", "method_name": "unsafeDivided", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["by", "other"]}]}, {"return_value": {"return_description": ["The product of this value and rhs."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the product of this value and the given value without checking for arithmetic overflow.", "method_name": "unsafeMultiplied", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["by", "other"]}]}, {"return_value": {"return_description": ["The result of subtracting rhs from this value."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the difference obtained by subtracting the given value from this value without checking for arithmetic overflow.", "method_name": "unsafeSubtracting", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["other"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns a random value within the specified range.", "method_name": "random", "class_name": "UInt32", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<UInt32>", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns a random value within the specified range.", "method_name": "random", "class_name": "UInt32", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<UInt32>", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "class_name": "UInt32", "params": [{"param_description": "The range in which to create a random value.", "param_type": "ClosedRange<UInt32>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "class_name": "UInt32", "params": [{"param_description": "The range in which to create a random value. range must not be empty.", "param_type": "Range<UInt32>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the two given values are not equal.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "!=", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "!=", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the remainder of dividing the first value by the second.", "method_name": "%", "class_name": "UInt32", "params": [{"param_description": "The value to divide.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Divides the first value by the second and stores the remainder in the left-hand-side variable.", "method_name": "%=", "class_name": "UInt32", "params": [{"param_description": "The value to divide.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "method_name": "&", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise AND operation on the two given values.", "method_name": "&", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the product of the two given values, wrapping the result in case of any overflow.", "method_name": "&*", "class_name": "UInt32", "params": [{"param_description": "The first value to multiply.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Multiplies two values and stores the result in the left-hand-side variable, wrapping any overflow.", "method_name": "&*=", "class_name": "UInt32", "params": [{"param_description": "The first value to multiply.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the sum of the two given values, wrapping the result in case of any overflow.", "method_name": "&+", "class_name": "UInt32", "params": [{"param_description": "The first value to add.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds two values and stores the result in the left-hand-side variable, wrapping any overflow.", "method_name": "&+=", "class_name": "UInt32", "params": [{"param_description": "The first value to add.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the difference of the two given values, wrapping the result in case of any overflow.", "method_name": "&-", "class_name": "UInt32", "params": [{"param_description": "A numeric value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, wrapping any overflow.", "method_name": "&-=", "class_name": "UInt32", "params": [{"param_description": "A numeric value.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "&", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width.", "method_name": "&", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.", "method_name": "&=", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "&>>", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width.", "method_name": "&>>", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "&>>=", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Calculates the result of shifting a value\u2019s binary representation the specified number of digits to the right, masking the shift amount to the type\u2019s bit width, and stores the result in the left-hand-side variable.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right. If rhs is outside the range 0..<lhs.bitWidth, it is masked to produce a value within that range.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Multiplies two values and produces their product.", "method_name": "*", "class_name": "UInt32", "params": [{"param_description": "The first value to multiply.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Multiplies two values and stores the result in the left-hand-side variable.", "method_name": "*=", "class_name": "UInt32", "params": [{"param_description": "The first value to multiply.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to multiply.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the given number unchanged.", "method_name": "+", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["x"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Adds two values and produces their sum.", "method_name": "+", "class_name": "UInt32", "params": [{"param_description": "The first value to add.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds two values and stores the result in the left-hand-side variable.", "method_name": "+=", "class_name": "UInt32", "params": [{"param_description": "The first value to add.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The second value to add.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Subtracts one value from another and produces their difference.", "method_name": "-", "class_name": "UInt32", "params": [{"param_description": "A numeric value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.", "method_name": "-=", "class_name": "UInt32", "params": [{"param_description": "A numeric value.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The value to subtract from lhs.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<UInt32>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "UInt32", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt32", "param_name": ["minimum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<UInt32>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "UInt32", "params": [{"param_description": "The upper bound for the range.", "param_type": "UInt32", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<UInt32>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "UInt32", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt32", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UInt32", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<UInt32>"]}, "method_description": "Returns a countable closed range that contains both of its bounds.", "method_name": "...", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["minimum"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<UInt32>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "UInt32", "params": [{"param_description": "The upper bound for the range.", "param_type": "UInt32", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<UInt32>"]}, "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "class_name": "UInt32", "params": [{"param_description": "The lower bound for the range.", "param_type": "UInt32", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "UInt32", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the quotient of dividing the first value by the second.", "method_name": "/", "class_name": "UInt32", "params": [{"param_description": "The value to divide.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Divides the first value by the second and stores the quotient in the left-hand-side variable.", "method_name": "/=", "class_name": "UInt32", "params": [{"param_description": "The value to divide.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The value to divide lhs by. rhs must not be zero.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["x"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the left in the left-hand-side variable.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the left.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the two given values are equal.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["x"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": ">", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "An integer to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer to compare.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": ">=", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "UInt32", "params": [{"param_description": "A value to compare.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the right in the left-hand-side variable.", "method_name": "", "class_name": "UInt32", "params": [{"param_description": "The value to shift.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "The number of bits to shift lhs to the right.", "param_type": "BinaryInteger", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "method_name": "^", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise XOR operation on the two given values.", "method_name": "^", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.", "method_name": "^=", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "method_name": "|", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the result of performing a bitwise OR operation on the two given values.", "method_name": "|", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.", "method_name": "|=", "class_name": "UInt32", "params": [{"param_description": "An integer value.", "param_type": "inout UInt32", "param_name": ["lhs"]}, {"param_description": "Another integer value.", "param_type": "UInt32", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UInt32"]}, "method_description": "Returns the inverse of the bits set in the argument.", "method_name": "~", "class_name": "UInt32", "params": [{"param_description": "", "param_type": "UInt32", "param_name": ["x"]}]}], "package_name": "swift"}
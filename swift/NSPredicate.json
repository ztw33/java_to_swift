{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Self"], "return_name": [""], "return_description": ["A copy of the receiver with the predicate's variables substituted by values specified in variables."]}, "method_name": "withSubstitutionVariables", "class_name": "NSPredicate", "method_description": "Returns a copy of the predicate with the predicate's variables substituted by values specified in a given substitution variables dictionary.", "params": [{"param_type": "Any]", "param_name": ["variables"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if object matches the conditions specified by the predicate, otherwise false."]}, "method_name": "evaluate", "class_name": "NSPredicate", "method_description": "Returns a Boolean value indicating whether the specified object matches the conditions specified by the predicate.", "params": [{"param_type": "Any", "param_name": ["with", "object"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if object matches the conditions specified by the predicate after substituting in the values in variables for any replacement tokens, otherwise false."]}, "method_name": "evaluate", "class_name": "NSPredicate", "method_description": "Returns a Boolean value indicating whether the specified object matches the conditions specified by the predicate after substituting in the values in a given variables dictionary.", "params": [{"param_type": "Any", "param_name": ["with", "object"], "param_description": ""}, {"param_type": "Any]", "param_name": ["substitutionVariables", "bindings"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "allowEvaluation", "class_name": "NSPredicate", "method_description": "Forces a predicate that was securely decoded to allow evaluation.", "params": []}], "Vars": [{"var_type": "String", "var_description": "The predicate's format string.", "var_name": "predicateFormat"}], "subclass_list": [], "class_description": "Predicates represent logical conditions, which you can use to filter collections of objects. Although it's common to create predicates directly from instances of NSComparisonPredicate,  NSCompoundPredicate, and NSExpression, you often create predicates from a format string which is parsed by the class methods on NSPredicate. Examples of predicate format strings include:\nSimple comparisons, such as grade == \"7\" or firstName like \"Shaffiq\"\nCase and diacritic insensitive lookups, such as name contains[cd] \"itroen\"\nLogical operations, such as (firstName like \"Mark\") OR (lastName like \"Adderley\")\nTemporal range constraints, such as date between {$YESTERDAY, $TOMORROW}.\nRelational conditions, such as group.name like \"work*\"\nAggregate operations, such as @sum.items.price < 1000\nFor a complete syntax reference, refer to the Predicate Programming Guide.\nYou can also create predicates that include variables using the evaluate(with:substitutionVariables:) method, so that the predicate can be predefined before substituting concrete values at runtime.\n", "class_name": "NSPredicate"}
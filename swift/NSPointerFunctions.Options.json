{"subclass_list": [], "Methods": [], "Vars": [{"var_name": "machVirtualMemory", "var_description": "Use Mach memory.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "mallocMemory", "var_description": "Use free() on removal, calloc() on copy in.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "opaqueMemory", "var_description": "Take no action when pointers are deleted.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "strongMemory", "var_description": "Use strong write-barriers to backing store; use garbage-collected memory on copy-in.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "weakMemory", "var_description": "Uses weak read and write barriers appropriate for ARC or GC. Using NSPointerFunctionsWeakMemory object references will turn to NULL on last release.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "NSMapTableStrongMemory", "var_description": "Equivalent to strongMemory.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "NSMapTableWeakMemory", "var_description": "Equivalent to weakMemory.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "cStringPersonality", "var_description": "Use a string hash and strcmp; C-string '%s' style description.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "integerPersonality", "var_description": "Use unshifted value as hash and equality.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "objectPersonality", "var_description": "Use hash and isEqual methods for hashing and equality comparisons, use the description method for a description.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "objectPointerPersonality", "var_description": "Use shifted pointer for the hash value and direct comparison to determine equality; use the description method for a description.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "opaquePersonality", "var_description": "Use shifted pointer for the hash value and direct comparison to determine equality.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "structPersonality", "var_description": "Use a memory hash and memcmp (using a size function that you must set\u2014see sizeFunction).", "var_type": "NSPointerFunctions.Options"}, {"var_name": "NSMapTableObjectPointerPersonality", "var_description": "Equivalent to objectPointerPersonality.", "var_type": "NSPointerFunctions.Options"}, {"var_name": "copyIn", "var_description": "Use the memory acquire function to allocate and copy items on input (see acquireFunction).", "var_type": "NSPointerFunctions.Options"}, {"var_name": "NSMapTableCopyIn", "var_description": "Equivalent to copyIn.", "var_type": "NSPointerFunctions.Options"}], "class_name": "NSPointerFunctions.Options", "class_inherit_list": [], "interface_list": ["OptionSet"], "class_description": "When specifying a value, you can use only one of the options listed in Memory Options,  only one of the options listed in Personality Options, and any number of other options. \n", "package_name": "foundation"}
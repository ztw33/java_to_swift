{"class_inherit_list": [], "Vars": [{"var_description": "The magnitude of this value.", "var_type": "Double", "var_name": "magnitude"}, {"var_description": "The sign of the floating-point value.", "var_type": "FloatingPointSign", "var_name": "sign"}, {"var_description": "The unit in the last place of this value.", "var_type": "Double", "var_name": "ulp"}, {"var_description": "The significand of the floating-point value.", "var_type": "Double", "var_name": "significand"}, {"var_description": "The exponent of the floating-point value.", "var_type": "Int", "var_name": "exponent"}, {"var_description": "The least representable value that compares greater than this value.", "var_type": "Double", "var_name": "nextUp"}, {"var_description": "The greatest representable value that compares less than this value.", "var_type": "Double", "var_name": "nextDown"}, {"var_description": "The floating-point value with the same sign and exponent as this value, but with a significand of 1.0.", "var_type": "Double", "var_name": "binade"}, {"var_description": "The mathematical constant pi.", "var_type": "Double", "var_name": "pi"}, {"var_description": "Positive infinity.", "var_type": "Double", "var_name": "infinity"}, {"var_description": "The greatest finite number representable by this type.", "var_type": "Double", "var_name": "greatestFiniteMagnitude"}, {"var_description": "A quiet NaN (\u201cnot a number\u201d).", "var_type": "Double", "var_name": "nan"}, {"var_description": "A signaling NaN (\u201cnot a number\u201d).", "var_type": "Double", "var_name": "signalingNaN"}, {"var_description": "The unit in the last place of 1.0.", "var_type": "Double", "var_name": "ulpOfOne"}, {"var_description": "The unit in the last place of 1.0.", "var_type": "Double", "var_name": "ulpOfOne"}, {"var_description": "The least positive number.", "var_type": "Double", "var_name": "leastNonzeroMagnitude"}, {"var_description": "The least positive normal number.", "var_type": "Double", "var_name": "leastNormalMagnitude"}, {"var_description": "The bit pattern of the value\u2019s encoding.", "var_type": "UInt64", "var_name": "bitPattern"}, {"var_description": "The raw encoding of the value\u2019s significand field.", "var_type": "UInt64", "var_name": "significandBitPattern"}, {"var_description": "The number of bits required to represent the value\u2019s significand.", "var_type": "Int", "var_name": "significandWidth"}, {"var_description": "The raw encoding of the value\u2019s exponent field.", "var_type": "UInt", "var_name": "exponentBitPattern"}, {"var_description": "The available number of fractional significand bits.", "var_type": "Int", "var_name": "significandBitCount"}, {"var_description": "The number of bits used to represent the type\u2019s exponent.", "var_type": "Int", "var_name": "exponentBitCount"}, {"var_description": "The radix, or base of exponentiation, for this floating-point type.", "var_type": "Int", "var_name": "radix"}, {"var_description": "A Boolean value indicating whether the instance is equal to zero.", "var_type": "Bool", "var_name": "isZero"}, {"var_description": "A Boolean value indicating whether this instance is finite.", "var_type": "Bool", "var_name": "isFinite"}, {"var_description": "A Boolean value indicating whether the instance is infinite.", "var_type": "Bool", "var_name": "isInfinite"}, {"var_description": "A Boolean value indicating whether the instance is NaN (\u201cnot a number\u201d).", "var_type": "Bool", "var_name": "isNaN"}, {"var_description": "A Boolean value indicating whether the instance is a signaling NaN.", "var_type": "Bool", "var_name": "isSignalingNaN"}, {"var_description": "A Boolean value indicating whether this instance is normal.", "var_type": "Bool", "var_name": "isNormal"}, {"var_description": "A Boolean value indicating whether the instance is subnormal.", "var_type": "Bool", "var_name": "isSubnormal"}, {"var_description": "A Boolean value indicating whether the instance\u2019s representation is in the canonical form.", "var_type": "Bool", "var_name": "isCanonical"}, {"var_description": "The classification of this value.", "var_type": "FloatingPointClassification", "var_name": "floatingPointClass"}, {"var_description": "A textual representation of the value.", "var_type": "String", "var_name": "description"}, {"var_description": "A textual representation of the value, suitable for debugging.", "var_type": "String", "var_name": "debugDescription"}, {"var_description": "A mirror that reflects the Double instance.", "var_type": "Mirror", "var_name": "customMirror"}, {"var_description": "A custom playground Quick Look for the Double instance.", "var_type": "PlaygroundQuickLook", "var_name": "customPlaygroundQuickLook"}, {"var_description": "", "var_type": "MLDataValue", "var_name": "dataValue"}, {"var_description": "", "var_type": "MLDataValue.ValueType", "var_name": "dataValueType"}], "class_name": "Double", "interface_list": ["BinaryFloatingPoint", "CKRecordValueProtocol", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "ExpressibleByIntegerLiteral", "Hashable", "LosslessStringConvertible", "Strideable"], "subclass_list": [], "class_description": "", "Methods": [{"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns a random value within the specified range.", "method_name": "random", "class_name": "Double", "params": [{"param_description": "The range in which to create a random value. range must be non-empty and finite.", "param_type": "Range<Double>", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "class_name": "Double", "params": [{"param_description": "The range in which to create a random value. range must be non-empty and finite.", "param_type": "Range<Double>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns a random value within the specified range.", "method_name": "random", "class_name": "Double", "params": [{"param_description": "The range in which to create a random value. range must be finite.", "param_type": "ClosedRange<Double>", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": ["A random value within the bounds of range."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "method_name": "random", "class_name": "Double", "params": [{"param_description": "The range in which to create a random value. range must be finite.", "param_type": "ClosedRange<Double>", "param_name": ["in", "range"]}, {"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "+", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "*", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "/", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "+=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "-=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "*=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "/=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}, {"param_description": "", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}, {"param_description": "", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}]}, {"return_value": {"return_description": ["The additive inverse of the argument."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the additive inverse of the specified value.", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["operand"]}]}, {"return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the given number unchanged.", "method_name": "+", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Double>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "Double", "params": [{"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Double>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "Double", "params": [{"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Double>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "Double", "params": [{"param_description": "The lower bound for the range.", "param_type": "Double", "param_name": ["minimum"]}]}, {"return_value": {"return_description": ["The product of lhs and rhs, added to this value."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.", "method_name": "addingProduct", "class_name": "Double", "params": [{"param_description": "One of the values to multiply before adding to this value.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "The other value to multiply.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds the product of the two given values to this value in place, computed without intermediate rounding.", "method_name": "addProduct", "class_name": "Double", "params": [{"param_description": "One of the values to multiply before adding to this value.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "The other value to multiply.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["The square root of the value."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the square root of the value, rounded to a representable value.", "method_name": "squareRoot", "class_name": "Double", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces this value with its square root, rounded to a representable value.", "method_name": "formSquareRoot", "class_name": "Double", "params": []}, {"return_value": {"return_description": ["The remainder of this value divided by other."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the remainder of this value divided by the given value.", "method_name": "remainder", "class_name": "Double", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Double", "param_name": ["dividingBy", "other"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces this value with the remainder of itself divided by the given value.", "method_name": "formRemainder", "class_name": "Double", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Double", "param_name": ["dividingBy", "other"]}]}, {"return_value": {"return_description": ["The remainder of this value divided by other using truncating division."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the remainder of this value divided by the given value using truncating division.", "method_name": "truncatingRemainder", "class_name": "Double", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Double", "param_name": ["dividingBy", "other"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces this value with the remainder of itself divided by the given value using truncating division.", "method_name": "formTruncatingRemainder", "class_name": "Double", "params": [{"param_description": "The value to use when dividing this value.", "param_type": "Double", "param_name": ["dividingBy", "other"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces this value with its additive inverse.", "method_name": "negate", "class_name": "Double", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces this value with its additive inverse.", "method_name": "negate", "class_name": "Double", "params": []}, {"return_value": {"return_description": ["The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns this value rounded to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "rounded", "class_name": "Double", "params": []}, {"return_value": {"return_description": ["The integral value found by rounding using rule."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns this value rounded to an integral value using the specified rounding rule.", "method_name": "rounded", "class_name": "Double", "params": [{"param_description": "The rounding rule to use.", "param_type": "FloatingPointRoundingRule", "param_name": ["rule"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Rounds this value to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "round", "class_name": "Double", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Rounds the value to an integral value using the specified rounding rule.", "method_name": "round", "class_name": "Double", "params": [{"param_description": "The rounding rule to use.", "param_type": "FloatingPointRoundingRule", "param_name": ["rule"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "+", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "*", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "/", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "+=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "-=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "*=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "/=", "class_name": "Double", "params": [{"param_description": "", "param_type": "inout Double", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}, {"param_description": "", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}, {"param_description": "", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Double", "params": [{"param_description": "A value to compare.", "param_type": "Double", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Double", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Double"]}, "method_description": "", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}]}, {"return_value": {"return_description": ["The additive inverse of the argument."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the additive inverse of the specified value.", "method_name": "-", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["operand"]}]}, {"return_value": {"return_description": ["The given argument without any changes."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the given number unchanged.", "method_name": "+", "class_name": "Double", "params": [{"param_description": "", "param_type": "Double", "param_name": ["x"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Double>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "Double", "params": [{"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Double>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "Double", "params": [{"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Double>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "Double", "params": [{"param_description": "The lower bound for the range.", "param_type": "Double", "param_name": ["minimum"]}]}, {"return_value": {"return_description": ["true if other has the same value as this instance; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this instance is equal to the given value.", "method_name": "isEqual", "class_name": "Double", "params": [{"param_description": "The value to compare with this value.", "param_type": "Double", "param_name": ["to", "other"]}]}, {"return_value": {"return_description": ["true if other is less than this value; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this instance is less than the given value.", "method_name": "isLess", "class_name": "Double", "params": [{"param_description": "The value to compare with this value.", "param_type": "Double", "param_name": ["than", "other"]}]}, {"return_value": {"return_description": ["true if other is less than this value; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this instance is less than or equal to the given value.", "method_name": "isLessThanOrEqualTo", "class_name": "Double", "params": [{"param_description": "The value to compare with this value.", "param_type": "Double", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.", "method_name": "isTotallyOrdered", "class_name": "Double", "params": [{"param_description": "A floating-point value to compare to this value.", "param_type": "Double", "param_name": ["belowOrEqualTo", "other"]}]}, {"return_value": {"return_description": ["The minimum of x and y, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the lesser of the two given values.", "method_name": "minimum", "class_name": "Double", "params": [{"param_description": "A floating-point value.", "param_type": "Double", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": ["Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the value with lesser magnitude.", "method_name": "minimumMagnitude", "class_name": "Double", "params": [{"param_description": "A floating-point value.", "param_type": "Double", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": ["The greater of x and y, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the greater of the two given values.", "method_name": "maximum", "class_name": "Double", "params": [{"param_description": "A floating-point value.", "param_type": "Double", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": ["Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the value with greater magnitude.", "method_name": "maximumMagnitude", "class_name": "Double", "params": [{"param_description": "A floating-point value.", "param_type": "Double", "param_name": ["x"]}, {"param_description": "Another floating-point value.", "param_type": "Double", "param_name": ["y"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Encodes this value into the given encoder.", "method_name": "encode", "class_name": "Double", "params": [{"param_description": "The encoder to write data to.", "param_type": "Encoder", "param_name": ["to", "encoder"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Double>"]}, "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "class_name": "Double", "params": [{"param_description": "The lower bound for the range.", "param_type": "Double", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Double>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "Double", "params": [{"param_description": "The lower bound for the range.", "param_type": "Double", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Double", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "class_name": "Double", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}, {"return_value": {"return_description": ["A new value that is amount added to this value."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns a new value advanced by the given distance.", "method_name": "advanced", "class_name": "Double", "params": [{"param_description": "The distance to advance this value.", "param_type": "Double", "param_name": ["by", "amount"]}]}, {"return_value": {"return_description": ["The distance between this value and other."], "return_name": [""], "return_type": ["Double"]}, "method_description": "Returns the distance from this value to the specified value.", "method_name": "distance", "class_name": "Double", "params": [{"param_description": "A value to calculate the distance to.", "param_type": "Double", "param_name": ["to", "other"]}]}], "package_name": "swift"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSCoder"], "Methods": [{"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["An NSData object containing the encoded form of the object graph whose root object is rootObject. The format of the archive is NSPropertyListBinaryFormat_v1_0."]}, "method_name": "archivedData", "class_name": "NSKeyedArchiver", "method_description": "Returns an NSData object containing the encoded form of the object graph whose root object is given.", "params": [{"param_type": "Any", "param_name": ["withRootObject", "rootObject"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation was successful, otherwise false."]}, "method_name": "archiveRootObject", "class_name": "NSKeyedArchiver", "method_description": "Archives an object graph rooted at a given object by encoding it into a data object then atomically writes the resulting data object to a file at a given path, and returns a Boolean value that indicates whether the operation was successful.", "params": [{"param_type": "Any", "param_name": ["rootObject"], "param_description": ""}, {"param_type": "String", "param_name": ["toFile", "path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "finishEncoding", "class_name": "NSKeyedArchiver", "method_description": "Instructs the receiver to construct the final data stream.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeEncodable", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given value and associates it with a given key.", "params": [{"param_type": "Encodable", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given Boolean value and associates it with a given key.", "params": [{"param_type": "Bool", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeBytes", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given number of bytes from a given C array of bytes and associates them with the a given key.", "params": [{"param_type": "UnsafePointer<UInt8>", "param_name": ["bytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["length"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeConditionalObject", "class_name": "NSKeyedArchiver", "method_description": "Encodes a reference to a given object and associates it with a given key only if it has been unconditionally encoded elsewhere in the archive with encode(_:forKey:).", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given double value and associates it with a given key.", "params": [{"param_type": "Double", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given float value and associates it with a given key.", "params": [{"param_type": "Float", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given 32-bit integer value and associates it with a given key.", "params": [{"param_type": "Int32", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given 64-bit integer value and associates it with a given key.", "params": [{"param_type": "Int64", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSKeyedArchiver", "method_description": "Encodes a given object and associates it with a given key.", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setClassName", "class_name": "NSKeyedArchiver", "method_description": "Adds a class translation mapping to NSKeyedArchiver whereby instances of a given class are encoded with a given class name instead of their real class names.", "params": [{"param_type": "String", "param_name": ["codedName"], "param_description": ""}, {"param_type": "AnyClass", "param_name": ["for", "cls"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The class name with which NSKeyedArchiver encodes instances of cls. Returns nil if NSKeyedArchiver does not have a translation mapping for cls."]}, "method_name": "className", "class_name": "NSKeyedArchiver", "method_description": "Returns the class name with which NSKeyedArchiver encodes instances of a given class.", "params": [{"param_type": "AnyClass", "param_name": ["for", "cls"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setClassName", "class_name": "NSKeyedArchiver", "method_description": "Adds a class translation mapping to the receiver whereby instances of a given class are encoded with a given class name instead of their real class names.", "params": [{"param_type": "String", "param_name": ["codedName"], "param_description": ""}, {"param_type": "AnyClass", "param_name": ["for", "cls"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The class name with which the receiver encodes instances of cls. Returns nil if the receiver does not have a translation mapping for cls. The class\u2019s separate translation map is not searched."]}, "method_name": "className", "class_name": "NSKeyedArchiver", "method_description": "Returns the class name with which the receiver encodes instances of a given class.", "params": [{"param_type": "AnyClass", "param_name": ["for", "cls"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "archivedData", "class_name": "NSKeyedArchiver", "method_description": "", "params": [{"param_type": "Any", "param_name": ["withRootObject", "object"], "param_description": ""}, {"param_type": "Bool", "param_name": ["requiringSecureCoding", "requiresSecureCoding"], "param_description": ""}]}], "Vars": [{"var_type": "PropertyListSerialization.PropertyListFormat", "var_description": "The format in which the receiver encodes its data.", "var_name": "outputFormat"}, {"var_type": "Bool", "var_description": "Indicates whether the receiver requires all archived classes to conform to NSSecureCoding.", "var_name": "requiresSecureCoding"}, {"var_type": "NSKeyedArchiverDelegate", "var_description": "The archiver\u2019s delegate.", "var_name": "delegate"}, {"var_type": "NSExceptionName", "var_description": "The name of the exception raised by NSKeyedArchiver if there is a problem creating an archive.", "var_name": "invalidArchiveOperationException"}, {"var_type": "String", "var_description": "Archives created using the class method archivedData(withRootObject:) use this key for the root object in the hierarchy of encoded objects. The NSKeyedUnarchiver class method unarchiveObject(with:) looks for this root key as well.", "var_name": "NSKeyedArchiveRootObjectKey"}, {"var_type": "Data", "var_description": "Returns the encoded data for the archiver.", "var_name": "encodedData"}], "subclass_list": [], "class_description": "NSKeyedArchiver, a concrete subclass of NSCoder, provides a way to encode objects (and scalar values) into an architecture-independent format that can be stored in a file. When you archive a set of objects, the class information and instance variables for each object are written to the archive. The companion class NSKeyedUnarchiver decodes the data in an archive and creates a set of objects equivalent to the original set.\nA keyed archive differs from a non-keyed archive in that all the objects and values encoded into the archive are given names, or keys. When decoding a non-keyed archive, values have to be decoded in the same order in which they were encoded. When decoding a keyed archive, because values are requested by name, values can be decoded out of sequence or not at all. Keyed archives, therefore, provide better support for forward and backward compatibility.\nThe keys given to encoded values must be unique only within the scope of the current object being encoded. A keyed archive is hierarchical, so the keys used by object A to encode its instance variables do not conflict with the keys used by object B, even if A and B are instances of the same class. Within a single object, however, the keys used by a subclass can conflict with keys used in its superclasses.\nAn NSArchiver object can write the archive data to a file or to a mutable-data object (an instance of NSMutableData) that you provide.\n", "class_name": "NSKeyedArchiver"}
{"package_name": "foundation", "interface_list": ["Comparable", "CustomStringConvertible", "Decodable", "Encodable", "ExpressibleByFloatLiteral", "ExpressibleByIntegerLiteral", "Hashable", "SignedNumeric", "Strideable"], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "NSDecimalCopy", "class_name": "Decimal", "method_description": "Copies the value of a decimal number.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["destination"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["source"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalString", "class_name": "Decimal", "method_description": "Returns a string representation of the decimal value appropriate for the specified locale.", "params": [{"param_type": "UnsafePointer<Decimal>", "param_name": ["dcm"], "param_description": ""}, {"param_type": "Any", "param_name": ["locale"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "*", "class_name": "Decimal", "method_description": "Multiplies two decimal numbers.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "*=", "class_name": "Decimal", "method_description": "Multiplies two decimal numbers, storing the result in the first number.", "params": [{"param_type": "inout Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "+", "class_name": "Decimal", "method_description": "Adds two decimal numbers.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "+=", "class_name": "Decimal", "method_description": "Adds two decimal numbers, storing the result in the first number.", "params": [{"param_type": "inout Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "-", "class_name": "Decimal", "method_description": "Subtracts one decimal number from another.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "-=", "class_name": "Decimal", "method_description": "Subtracts one decimal number from another, storing the result in the first number.", "params": [{"param_type": "inout Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "/", "class_name": "Decimal", "method_description": "Divides one decimal number by another.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "/=", "class_name": "Decimal", "method_description": "Divides one decimal number by another, storing the result in the first number.", "params": [{"param_type": "inout Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "pow", "class_name": "Decimal", "method_description": "Returns a decimal number raised to a given power.", "params": [{"param_type": "Decimal", "param_name": ["x"], "param_description": ""}, {"param_type": "Int", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "negate", "class_name": "Decimal", "method_description": "Negates this decimal.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "NSDecimalCompact", "class_name": "Decimal", "method_description": "Compacts the decimal structure for efficiency.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["number"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalAdd", "class_name": "Decimal", "method_description": "Adds two decimal values.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["leftOperand"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["rightOperand"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalSubtract", "class_name": "Decimal", "method_description": "Subtracts one decimal value from another.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["leftOperand"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["rightOperand"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalDivide", "class_name": "Decimal", "method_description": "Divides one decimal value by another.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["leftOperand"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["rightOperand"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalMultiply", "class_name": "Decimal", "method_description": "Multiplies two decimal numbers together.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["leftOperand"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["rightOperand"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalMultiplyByPowerOf10", "class_name": "Decimal", "method_description": "Multiplies a decimal by the specified power of 10.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["number"], "param_description": ""}, {"param_type": "Int16", "param_name": ["power"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "NSDecimalRound", "class_name": "Decimal", "method_description": "Rounds off the decimal value.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["number"], "param_description": ""}, {"param_type": "Int", "param_name": ["scale"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalPower", "class_name": "Decimal", "method_description": "Raises the decimal value to the specified power.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["result"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["number"], "param_description": ""}, {"param_type": "Int", "param_name": ["power"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDecimalNumber.CalculationError"], "return_name": [""], "return_description": []}, "method_name": "NSDecimalNormalize", "class_name": "Decimal", "method_description": "Normalizes the internal format of two decimal numbers to simplify later operations.", "params": [{"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["number1"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Decimal>", "param_name": ["number2"], "param_description": ""}, {"param_type": "NSDecimalNumber.RoundingMode", "param_name": ["roundingMode"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "Decimal", "method_description": "Returns a Boolean value indicating whether one decimal number is strictly less than another.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "Decimal", "method_description": "Returns a Boolean value indicating whether two decimal numbers are equal.", "params": [{"param_type": "Decimal", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Decimal", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isEqual", "class_name": "Decimal", "method_description": "Indicates whether this decimal is equal to the specified one.", "params": [{"param_type": "Decimal", "param_name": ["to", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isLess", "class_name": "Decimal", "method_description": "Indicates whether this decimal is less than the specified one.", "params": [{"param_type": "Decimal", "param_name": ["than", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isLessThanOrEqualTo", "class_name": "Decimal", "method_description": "Indicates whether this decimal is less than or equal to the specified one.", "params": [{"param_type": "Decimal", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isTotallyOrdered", "class_name": "Decimal", "method_description": "Returns a Boolean value indicating whether this instance should precede the given value in an ascending sort.", "params": [{"param_type": "Decimal", "param_name": ["belowOrEqualTo", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "distance", "class_name": "Decimal", "method_description": "Returns the distance from this value to the specified value.", "params": [{"param_type": "Decimal", "param_name": ["to", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Decimal"], "return_name": [""], "return_description": []}, "method_name": "advanced", "class_name": "Decimal", "method_description": "Returns a new value advanced by the given distance.", "params": [{"param_type": "Decimal", "param_name": ["by", "n"], "param_description": ""}]}, {"return_value": {"return_type": ["ComparisonResult"], "return_name": [""], "return_description": ["NSOrderedDescending if leftOperand is bigger than rightOperand; NSOrderedAscending if rightOperand is bigger than leftOperand; or NSOrderedSame if the two operands are equal."]}, "method_name": "NSDecimalCompare", "class_name": "Decimal", "method_description": "Compares two decimal values.", "params": [{"param_type": "UnsafePointer<Decimal>", "param_name": ["leftOperand"], "param_description": ""}, {"param_type": "UnsafePointer<Decimal>", "param_name": ["rightOperand"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "Decimal", "method_description": "Encodes this decimal value into the given encoder.", "params": [{"param_type": "Encoder", "param_name": ["to", "encoder"], "param_description": ""}]}], "Vars": [{"var_type": "FloatingPointSign", "var_description": "The sign of the decimal.", "var_name": "sign"}, {"var_type": "Int", "var_description": "The exponent of the decimal.", "var_name": "exponent"}, {"var_type": "Decimal", "var_description": "The significand of the decimal.", "var_name": "significand"}, {"var_type": "Decimal", "var_description": "The magnitude of this decimal.", "var_name": "magnitude"}, {"var_type": "FloatingPointClassification", "var_description": "The IEEE 754 class of this type.", "var_name": "floatingPointClass"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the representation of this decimal is canonical.", "var_name": "isCanonical"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is zero, subnormal, or normal (not infinity or NaN).", "var_name": "isFinite"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is infinity.", "var_name": "isInfinite"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is NaN.", "var_name": "isNaN"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is normal (not zero, subnormal, infinity, or NaN).", "var_name": "isNormal"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal has a negative sign.", "var_name": "isSignMinus"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is a signaling NaN.", "var_name": "isSignaling"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is a signaling NaN.", "var_name": "isSignalingNaN"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this decimal is subnormal.", "var_name": "isSubnormal"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this value is zero.", "var_name": "isZero"}, {"var_type": "Decimal", "var_description": "The greatest representable value that is less than this decimal.", "var_name": "nextDown"}, {"var_type": "Decimal", "var_description": "The least representable value that is greater than this decimal.", "var_name": "nextUp"}, {"var_type": "Decimal", "var_description": "The unit in the last place of the decimal.", "var_name": "ulp"}, {"var_type": "Decimal", "var_description": "The decimal that contains the largest possible non-infinite magnitude for the underlying representation.", "var_name": "greatestFiniteMagnitude"}, {"var_type": "Decimal", "var_description": "The decimal that contains the smallest possible non-infinite magnitude for the underlying representation.", "var_name": "leastFiniteMagnitude"}, {"var_type": "Decimal", "var_description": "The decimal value that represents the smallest possible non-zero value for the underlying representation.", "var_name": "leastNonzeroMagnitude"}, {"var_type": "Decimal", "var_description": "The decimal value that represents the smallest possible normal magnitude for the underlying representation.", "var_name": "leastNormalMagnitude"}, {"var_type": "Decimal", "var_description": "The mathematical constant pi.", "var_name": "pi"}, {"var_type": "Decimal", "var_description": "The value that represents \"not a number.\"", "var_name": "nan"}, {"var_type": "Decimal", "var_description": "A quiet representation of not-a-number.", "var_name": "quietNaN"}, {"var_type": "Int", "var_description": "The radix used by decimal numbers.", "var_name": "radix"}, {"var_type": "Int32", "var_description": "The maximum size of Decimal.", "var_name": "NSDecimalMaxSize"}, {"var_type": "Int32", "var_description": "Specifies that the number of digits allowed after the decimal separator in a decimal number should not be limited.", "var_name": "NSDecimalNoScale"}, {"var_type": "String", "var_description": "A textual description of the decimal.", "var_name": "description"}, {"var_type": "Int", "var_description": "The computed hash value for the decimal.", "var_name": "hashValue"}], "subclass_list": [], "class_description": "", "class_name": "Decimal"}
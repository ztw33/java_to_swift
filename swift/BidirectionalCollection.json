{"class_description": "Bidirectional collections offer traversal backward from any valid index, not including a collection\u2019s startIndex. Bidirectional collections can therefore offer additional operations, such as a last property that provides efficient access to the last element and a reversed() method that presents the elements in reverse order. In addition, bidirectional collections have more efficient implementations of some sequence and collection methods, such as suffix(_:).\nTo add BidirectionalProtocol conformance to your custom types, implement the index(before:) method in addition to the requirements of the Collection protocol.\nIndices that are moved forward and backward in a bidirectional collection move by the same amount in each direction. That is, for any index i into a bidirectional collection c:\nIf i >= c.startIndex && i < c.endIndex, c.index(before: c.index(after: i)) == i.\nIf i > c.startIndex && i <= c.endIndex c.index(after: c.index(before: i)) == i.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": ["The distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol."], "return_type": ["Int"]}, "class_name": "BidirectionalCollection", "method_description": "Returns the distance between two indices.Required. Default implementation provided.", "method_name": "distance", "params": [{"param_type": "Self.Index", "param_name": ["from", "start"], "param_description": "A valid index of the collection."}, {"param_type": "Self.Index", "param_name": ["to", "end"], "param_description": "Another valid index of the collection. If end is equal to start, the result is zero."}]}, {"return_value": {"return_name": [""], "return_description": ["A subsequence that leaves off k elements from the end."], "return_type": ["Self.SubSequence"]}, "class_name": "BidirectionalCollection", "method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BidirectionalCollection", "method_description": "Replaces the given index with its successor.Required.", "method_name": "formIndex", "params": [{"param_type": "inout Self.Index", "param_name": ["after", "i"], "param_description": "A valid index of the collection. i must be less than endIndex."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BidirectionalCollection", "method_description": "Replaces the given index with its predecessor.Required. Default implementation provided.", "method_name": "formIndex", "params": [{"param_type": "inout Self.Index", "param_name": ["before", "i"], "param_description": "A valid index of the collection. i must be greater than startIndex."}]}, {"return_value": {"return_name": [""], "return_description": ["An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:)."], "return_type": ["Self.Index"]}, "class_name": "BidirectionalCollection", "method_description": "Returns an index that is the specified distance from the given index.Required. Default implementation provided.", "method_name": "index", "params": [{"param_type": "Self.Index", "param_name": ["i"], "param_description": "A valid index of the collection."}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol."}]}, {"return_value": {"return_name": [""], "return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_type": ["Self.Index"]}, "class_name": "BidirectionalCollection", "method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.Required. Default implementation provided.", "method_name": "index", "params": [{"param_type": "Self.Index", "param_name": ["i"], "param_description": "A valid index of the collection."}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol."}, {"param_type": "Self.Index", "param_name": ["limitedBy", "limit"], "param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect."}]}, {"return_value": {"return_name": [""], "return_description": ["The index value immediately after i."], "return_type": ["Self.Index"]}, "class_name": "BidirectionalCollection", "method_description": "Returns the position immediately after the given index.Required.", "method_name": "index", "params": [{"param_type": "Self.Index", "param_name": ["after", "i"], "param_description": "A valid index of the collection. i must be less than endIndex."}]}, {"return_value": {"return_name": [""], "return_description": ["The index value immediately before i."], "return_type": ["Self.Index"]}, "class_name": "BidirectionalCollection", "method_description": "Returns the position immediately before the given index.Required.", "method_name": "index", "params": [{"param_type": "Self.Index", "param_name": ["before", "i"], "param_description": "A valid index of the collection. i must be greater than startIndex."}]}, {"return_value": {"return_name": [""], "return_description": ["A single, concatenated string."], "return_type": ["String"]}, "class_name": "BidirectionalCollection", "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "params": [{"param_type": "String", "param_name": ["separator"], "param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string."}]}, {"return_value": {"return_name": [""], "return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."], "return_type": ["Self.Index"]}, "class_name": "BidirectionalCollection", "method_description": "Returns the last index where the specified value appears in the collection.", "method_name": "lastIndex", "params": [{"param_type": "Self.Element", "param_name": ["of", "element"], "param_description": "An element to search for in the collection."}]}, {"return_value": {"return_name": [""], "return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."], "return_type": [""]}, "class_name": "BidirectionalCollection", "method_description": "Returns the index of the last element in the collection that matches the given predicate.", "method_name": "lastIndex", "params": [{"param_type": "(Self.Element", "param_name": ["where", "predicate"], "param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match."}]}, {"return_value": {"return_name": [""], "return_description": ["The last element of the collection if the collection has one or more elements; otherwise, nil."], "return_type": ["Self.Element"]}, "class_name": "BidirectionalCollection", "method_description": "Removes and returns the last element of the collection.", "method_name": "popLast", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The last element of the collection."], "return_type": ["Self.Element"]}, "class_name": "BidirectionalCollection", "method_description": "Removes and returns the last element of the collection.", "method_name": "removeLast", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BidirectionalCollection", "method_description": "Removes the given number of elements from the end of the collection.", "method_name": "removeLast", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["ReversedCollection<Self>"]}, "class_name": "BidirectionalCollection", "method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "params": []}, {"return_value": {"return_name": [""], "return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_type": ["Self.SubSequence"]}, "class_name": "BidirectionalCollection", "method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "params": [{"param_type": "Int", "param_name": ["maxLength"], "param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero."}]}], "class_inherit_list": ["Collection"], "Vars": [{"var_type": "Self.Index", "var_description": "Required.", "var_name": "endIndex"}, {"var_type": "Self.Indices", "var_description": "The indices that are valid for subscripting the collection, in ascending order.Required.", "var_name": "indices"}, {"var_type": "Self.Element", "var_description": "The last element of the collection.Required. Default implementation provided.", "var_name": "last"}, {"var_type": "Self.Index", "var_description": "Required.", "var_name": "startIndex"}], "subclass_list": ["RandomAccessCollection", "StringProtocol"], "class_name": "BidirectionalCollection"}
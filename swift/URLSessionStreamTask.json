{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["URLSessionTask"], "Methods": [{"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "readData", "class_name": "URLSessionStreamTask", "method_description": "Asynchronously reads a number of bytes from the stream, and calls a handler upon completion.", "params": [{"param_type": "Int", "param_name": ["ofMinLength", "minBytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["maxLength", "maxBytes"], "param_description": ""}, {"param_type": "TimeInterval", "param_name": ["timeout"], "param_description": ""}, {"param_type": "@escaping (Data", "param_name": ["completionHandler"], "param_description": ""}, {"param_type": "Bool", "param_name": ["Bool"], "param_description": ""}, {"param_type": "Error", "param_name": ["Error"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "write", "class_name": "URLSessionStreamTask", "method_description": "Asynchronously writes the specified data to the stream, and calls a handler upon completion.", "params": [{"param_type": "Data", "param_name": ["data"], "param_description": ""}, {"param_type": "TimeInterval", "param_name": ["timeout"], "param_description": ""}, {"param_type": "@escaping (Error", "param_name": ["completionHandler"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "captureStreams", "class_name": "URLSessionStreamTask", "method_description": "Completes any already enqueued reads and writes, and then invokes the urlSession(_:streamTask:didBecome:outputStream:) delegate message.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "closeRead", "class_name": "URLSessionStreamTask", "method_description": "Completes any enqueued reads and writes, and then closes the read side of the underlying socket.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "closeWrite", "class_name": "URLSessionStreamTask", "method_description": "Completes any enqueued reads and writes, and then closes the write side of the underlying socket.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "startSecureConnection", "class_name": "URLSessionStreamTask", "method_description": "Completes any enqueued reads and writes, and establishes a secure connection.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "stopSecureConnection", "class_name": "URLSessionStreamTask", "method_description": "Completes any enqueued reads and writes, and closes the secure connection.", "params": []}], "Vars": [], "subclass_list": [], "class_description": "URLSessionStreamTask is a concrete subclass of URLSessionTask. Many of the methods in the URLSessionStreamTask class are documented in URLSessionTask.\nThe URLSessionStreamTask class provides an interface a TCP/IP connection created via URLSession. Tasks may be created from an URLSession using the streamTask(withHostName:port:) and streamTask(with:) methods. They may also created as a result of an URLSessionDataTask being upgraded via the HTTP Upgrade: response header and appropriate use of the httpShouldUsePipelining option of URLSessionConfiguration.\nNote\nSee RFC 2817 and RFC 6455 for information about the Upgrade: header.\nA URLSessionStreamTask object performs asynchronous reads and writes, which are enqueued and executed serially, calling a handler upon completion being on the session delegate queue. If the task is canceled, all enqueued reads and writes will call their completion handlers with an appropriate error.\nWhen working with APIs that accept Stream objects, you can create InputStream and OutputStream objects from an URLSessionStreamTask object by calling the captureStreams() method.\n", "class_name": "URLSessionStreamTask"}
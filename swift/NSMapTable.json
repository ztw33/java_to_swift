{"subclass_list": [], "Methods": [{"params": [], "method_name": "strongToStrongObjects", "method_description": "Returns a new map table object which has strong references to the keys and values.", "return_value": {"return_description": ["A new map table object which has strong references to the keys and values. "], "return_name": ["", ""], "return_type": ["NSMapTable<KeyType", "ObjectType>"]}, "class_name": "NSMapTable"}, {"params": [], "method_name": "weakToStrongObjects", "method_description": "Returns a new map table object which has weak references to the keys and strong references to the values.", "return_value": {"return_description": ["A new map table object which has weak references to the keys and strong references to the values. "], "return_name": ["", ""], "return_type": ["NSMapTable<KeyType", "ObjectType>"]}, "class_name": "NSMapTable"}, {"params": [], "method_name": "strongToWeakObjects", "method_description": "Returns a new map table object which has strong references to the keys and weak references to the values.", "return_value": {"return_description": ["A new map table object which has strong references to the keys and weak references to the values. "], "return_name": ["", ""], "return_type": ["NSMapTable<KeyType", "ObjectType>"]}, "class_name": "NSMapTable"}, {"params": [], "method_name": "weakToWeakObjects", "method_description": "Returns a new map table object which has weak references to the keys and values.", "return_value": {"return_description": ["A new map table object which has weak references to the keys and values. "], "return_name": ["", ""], "return_type": ["NSMapTable<KeyType", "ObjectType>"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["forKey", "aKey"], "param_description": "", "param_type": "KeyType"}], "method_name": "object", "method_description": "Returns a the value associated with a given key.", "return_value": {"return_description": ["The value associated with aKey, or nil if no value is associated with aKey."], "return_name": [""], "return_type": ["ObjectType"]}, "class_name": "NSMapTable"}, {"params": [], "method_name": "keyEnumerator", "method_description": "Returns an enumerator object that lets you access each key in the map table.", "return_value": {"return_description": ["An enumerator object that lets you access each key in the map table."], "return_name": [""], "return_type": ["NSEnumerator"]}, "class_name": "NSMapTable"}, {"params": [], "method_name": "objectEnumerator", "method_description": "Returns an enumerator object that lets you access each value in the map table.", "return_value": {"return_description": ["An enumerator object that lets you access each value in the map table."], "return_name": [""], "return_type": ["NSEnumerator"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["anObject"], "param_description": "", "param_type": "ObjectType"}, {"param_name": ["forKey", "aKey"], "param_description": "", "param_type": "KeyType"}], "method_name": "setObject", "method_description": "Adds a given key-value pair to the map table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["forKey", "aKey"], "param_description": "", "param_type": "KeyType"}], "method_name": "removeObject", "method_description": "Removes a given key and its associated value from the map table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [], "method_name": "removeAllObjects", "method_description": "Empties the map table of its entries.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [], "method_name": "dictionaryRepresentation", "method_description": "Returns a dictionary representation of the map table.", "return_value": {"return_description": ["A dictionary representation of the map table."], "return_name": [["[AnyHashable"]], "return_type": ["ObjectType]"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSAllMapTableKeys", "method_description": "Returns all of the keys in the specified map table.", "return_value": {"return_description": ["An array object containing all the keys in table. This function should be called only when table keys are objects, not when they\u2019re any other type of pointer."], "return_name": [""], "return_type": ["[Any]"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSAllMapTableValues", "method_description": "Returns all of the values in the specified table.", "return_value": {"return_description": ["An array object containing all the values in table. This function should be called only when table values are objects, not when they\u2019re any other type of pointer."], "return_name": [""], "return_type": ["[Any]"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table1"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["table2"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSCompareMapTables", "method_description": "Compares the elements of two map tables for equality.", "return_value": {"return_description": ["true if the keys and corresponding values of table1 and table2 are the same, and the two tables are the same size, otherwise false. "], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["zone"], "param_description": "", "param_type": "NSZone"}], "method_name": "NSCopyMapTableWithZone", "method_description": "Performs a shallow copy of the specified map table.", "return_value": {"return_description": ["A pointer to a new copy of table, created in zone and containing pointers to the keys and values of table."], "return_name": ["", ""], "return_type": ["NSMapTable<AnyObject", "AnyObject>"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSCountMapTable", "method_description": "Returns the number of elements in a map table.", "return_value": {"return_description": ["The number of key-value pairs currently in table."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["keyCallBacks"], "param_description": "", "param_type": "NSMapTableKeyCallBacks"}, {"param_name": ["valueCallBacks"], "param_description": "", "param_type": "NSMapTableValueCallBacks"}, {"param_name": ["capacity"], "param_description": "", "param_type": "Int"}], "method_name": "NSCreateMapTable", "method_description": "Creates a new map table in the default zone.", "return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["NSMapTable<AnyObject", "AnyObject>"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["keyCallBacks"], "param_description": "", "param_type": "NSMapTableKeyCallBacks"}, {"param_name": ["valueCallBacks"], "param_description": "", "param_type": "NSMapTableValueCallBacks"}, {"param_name": ["capacity"], "param_description": "", "param_type": "Int"}, {"param_name": ["zone"], "param_description": "", "param_type": "NSZone"}], "method_name": "NSCreateMapTableWithZone", "method_description": "Creates a new map table in the specified zone.", "return_value": {"return_description": ["A new map table in allocated in zone. If zone is NULL, the hash table is created in the default zone. "], "return_name": ["", ""], "return_type": ["NSMapTable<AnyObject", "AnyObject>"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["enumerator"], "param_description": "", "param_type": "UnsafeMutablePointer<NSMapEnumerator>"}], "method_name": "NSEndMapTableEnumeration", "method_description": "Used when finished with an enumerator.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSEnumerateMapTable", "method_description": "Creates an enumerator for the specified map table.", "return_value": {"return_description": ["An NSMapEnumerator structure that will cause successive key-value pairs of table to be visited each time this enumerator is passed to NSNextMapEnumeratorPair."], "return_name": [""], "return_type": ["NSMapEnumerator"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSFreeMapTable", "method_description": "Deletes the specified map table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}], "method_name": "NSMapGet", "method_description": "Returns a map table value for the specified key.", "return_value": {"return_description": ["The value that table maps to key, or NULL if table doesn\u2019t contain key."], "return_name": [""], "return_type": ["UnsafeMutableRawPointer"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}, {"param_name": ["value"], "param_description": "", "param_type": "UnsafeRawPointer"}], "method_name": "NSMapInsert", "method_description": "Inserts a key-value pair into the specified table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}, {"param_name": ["value"], "param_description": "", "param_type": "UnsafeRawPointer"}], "method_name": "NSMapInsertIfAbsent", "method_description": "Inserts a key-value pair into the specified table.", "return_value": {"return_description": ["If key matches a key already in table, the preexisting value; otherwise, key and value are added to table and returns NULL. "], "return_name": [""], "return_type": ["UnsafeMutableRawPointer"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}, {"param_name": ["value"], "param_description": "", "param_type": "UnsafeRawPointer"}], "method_name": "NSMapInsertKnownAbsent", "method_description": "Inserts a key-value pair into the specified table if the pair had not been previously added.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}, {"param_name": ["originalKey"], "param_description": "", "param_type": "UnsafeMutablePointer<UnsafeMutableRawPointer>"}, {"param_name": ["value"], "param_description": "", "param_type": "UnsafeMutablePointer<UnsafeMutableRawPointer>"}], "method_name": "NSMapMember", "method_description": "Indicates whether a given table contains a given key.", "return_value": {"return_description": ["true if table contains a key equal to key, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeRawPointer"}], "method_name": "NSMapRemove", "method_description": "Removes a key and corresponding value from the specified table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["enumerator"], "param_description": "", "param_type": "UnsafeMutablePointer<NSMapEnumerator>"}, {"param_name": ["key"], "param_description": "", "param_type": "UnsafeMutablePointer<UnsafeMutableRawPointer>"}, {"param_name": ["value"], "param_description": "", "param_type": "UnsafeMutablePointer<UnsafeMutableRawPointer>"}], "method_name": "NSNextMapEnumeratorPair", "method_description": "Returns a Boolean value that indicates whether the next map-table pair in the enumeration are set.", "return_value": {"return_description": ["false if enumerator has already iterated over all the elements in the table that enumerator is associated with; otherwise, sets key and value to match the next key-value pair in the table and returns true."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSResetMapTable", "method_description": "Deletes the elements of the specified map table.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSMapTable"}, {"params": [{"param_name": ["table"], "param_description": "", "param_type": "NSMapTable<AnyObject"}, {"param_name": ["AnyObject>"], "param_description": "", "param_type": "AnyObject>"}], "method_name": "NSStringFromMapTable", "method_description": "Returns a string describing the map table\u2019s contents.", "return_value": {"return_description": ["A string describing the map table\u2019s contents. "], "return_name": [""], "return_type": ["String"]}, "class_name": "NSMapTable"}], "Vars": [{"var_name": "count", "var_description": "The number of key-value pairs in the map table.", "var_type": "Int"}, {"var_name": "keyPointerFunctions", "var_description": "The pointer functions the map table uses to manage keys.", "var_type": "NSPointerFunctions"}, {"var_name": "valuePointerFunctions", "var_description": "The pointer functions the map table uses to manage values.", "var_type": "NSPointerFunctions"}, {"var_name": "NSIntegerMapKeyCallBacks", "var_description": "For keys that are pointer-sized quantities or smaller (for example, int, long, or unichar).", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSIntMapKeyCallBacks", "var_description": "For keys that are pointer-sized quantities or smaller (for example, int, long, or unichar).DeprecatedUse NSIntegerMapKeyCallBacks instead.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSNonOwnedPointerMapKeyCallBacks", "var_description": "For keys that are pointers not freed.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSNonOwnedPointerOrNullMapKeyCallBacks", "var_description": "For keys that are pointers not freed, or NULL.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSNonRetainedObjectMapKeyCallBacks", "var_description": "For sets of objects, but without retaining/releasing.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSObjectMapKeyCallBacks", "var_description": "For keys that are objects.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSOwnedPointerMapKeyCallBacks", "var_description": "For keys that are pointers, with transfer of ownership upon insertion.", "var_type": "NSMapTableKeyCallBacks"}, {"var_name": "NSIntegerMapValueCallBacks", "var_description": "For values that are pointer-sized quantities, (for example, int, long, or unichar).", "var_type": "NSMapTableValueCallBacks"}, {"var_name": "NSIntMapValueCallBacks", "var_description": "For values that are pointer-sized quantities, (for example, int, long, or unichar).DeprecatedUse NSIntegerMapValueCallBacks instead.", "var_type": "NSMapTableValueCallBacks"}, {"var_name": "NSNonOwnedPointerMapValueCallBacks", "var_description": "For values that are not owned pointers.", "var_type": "NSMapTableValueCallBacks"}, {"var_name": "NSOwnedPointerMapValueCallBacks", "var_description": "For values that are owned pointers.", "var_type": "NSMapTableValueCallBacks"}, {"var_name": "NSNonRetainedObjectMapValueCallBacks", "var_description": "For sets of objects, but without retaining/releasing.", "var_type": "NSMapTableValueCallBacks"}, {"var_name": "NSObjectMapValueCallBacks", "var_description": "For values that are objects.", "var_type": "NSMapTableValueCallBacks"}], "class_name": "NSMapTable", "class_inherit_list": ["NSObject"], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSFastEnumeration", "NSSecureCoding"], "class_description": "The map table is modeled after NSDictionary with the following differences:\nKeys and/or values are optionally held \u201cweakly\u201d such that entries are removed when one of the objects is reclaimed.\nIts keys or values may be copied on input or may use pointer identity for equality and hashing.\nIt can contain arbitrary pointers (its contents are not constrained to being objects).\nYou can configure an NSMapTable instance to operate on arbitrary pointers and not just objects, although typically you are encouraged to use the C function API for void * pointers. The object-based API (such as setObject(_:forKey:)) will not work for non-object pointers without type-casting.\nWhen configuring map tables, note that only the options listed in NSMapTableOptions guarantee that the rest of the API will work correctly\u2014including copying, archiving, and fast enumeration. While other NSPointerFunctions options are used for certain configurations, such as to hold arbitrary pointers, not all combinations of the options are valid. With some combinations the map table may not work correctly, or may not even be initialized correctly.\nNSMapTable is not suitable for subclassing.\n", "package_name": "foundation"}
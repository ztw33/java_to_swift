{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The number of matches of the regular expression."]}, "method_name": "numberOfMatches", "class_name": "NSRegularExpression", "method_description": "Returns the number of matches of the regular expression within the specified range of the string.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateMatches", "class_name": "NSRegularExpression", "method_description": "Enumerates the string allowing the Block to handle each regular expression match.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}, {"param_type": "(NSTextCheckingResult", "param_name": ["using", "block"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingFlags", "param_name": ["NSRegularExpression.MatchingFlags"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": ""}]}, {"return_value": {"return_type": ["[NSTextCheckingResult]"], "return_name": [""], "return_description": ["An array of NSTextCheckingResult objects. Each result gives the overall matched range via its range property, and the range of each individual capture group via its range(at:) method. The range {NSNotFound, 0} is returned if one of the capture groups did not participate in this particular match."]}, "method_name": "matches", "class_name": "NSRegularExpression", "method_description": "Returns an array containing all the matches of the regular expression in the string.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}]}, {"return_value": {"return_type": ["NSTextCheckingResult"], "return_name": [""], "return_description": ["An NSTextCheckingResult object. This result gives the overall matched range via its range property, and the range of each individual capture group via its range(at:) method. The range {NSNotFound, 0} is returned if one of the capture groups did not participate in this particular match."]}, "method_name": "firstMatch", "class_name": "NSRegularExpression", "method_description": "Returns the first match of the regular expression within the specified range of the string.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The range of the first match. Returns {NSNotFound, 0} if no match is found."]}, "method_name": "rangeOfFirstMatch", "class_name": "NSRegularExpression", "method_description": "Returns the range of the first match of the regular expression within the specified range of the string.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The number of matches."]}, "method_name": "replaceMatches", "class_name": "NSRegularExpression", "method_description": "Replaces regular expression matches within the mutable string using the template string.", "params": [{"param_type": "NSMutableString", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}, {"param_type": "String", "param_name": ["withTemplate", "templ"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string with matching regular expressions replaced by the template string."]}, "method_name": "stringByReplacingMatches", "class_name": "NSRegularExpression", "method_description": "Returns a new string containing matching regular expressions replaced with the template string.", "params": [{"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "NSRegularExpression.MatchingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}, {"param_type": "String", "param_name": ["withTemplate", "templ"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The escaped template string."]}, "method_name": "escapedTemplate", "class_name": "NSRegularExpression", "method_description": "Returns a template string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The escaped string."]}, "method_name": "escapedPattern", "class_name": "NSRegularExpression", "method_description": "Returns a string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A replacement string."]}, "method_name": "replacementString", "class_name": "NSRegularExpression", "method_description": "Used to perform template substitution for a single result for clients implementing their own replace functionality.", "params": [{"param_type": "NSTextCheckingResult", "param_name": ["for", "result"], "param_description": ""}, {"param_type": "String", "param_name": ["in", "string"], "param_description": ""}, {"param_type": "Int", "param_name": ["offset"], "param_description": ""}, {"param_type": "String", "param_name": ["template", "templ"], "param_description": ""}]}], "Vars": [{"var_type": "String", "var_description": "Returns the regular expression pattern.", "var_name": "pattern"}, {"var_type": "NSRegularExpression.Options", "var_description": "Returns the options used when the regular expression option was created.", "var_name": "options"}, {"var_type": "Int", "var_description": "Returns the number of capture groups in the regular expression.", "var_name": "numberOfCaptureGroups"}], "subclass_list": [], "class_description": "The fundamental matching method for NSRegularExpression is a Block iterator method that allows clients to supply a Block object which will be invoked each time the regular expression matches a portion of the target string.  There are additional convenience methods for returning all the matches as an array, the total number of matches, the first match, and the range of the first match.\nAn individual match is represented by an instance of the NSTextCheckingResult class, which carries information about the overall matched range (via its range property), and the range of each individual capture group (via the range(at:) method).  For basic NSRegularExpression objects, these match results will be of type regularExpression, but subclasses may use other types.\nThe ICU regular expressions supported by NSRegularExpression are described at http://userguide.icu-project.org/strings/regexp.\nWhat follows are a set of graduated examples for using the NSRegularExpression class. All these examples use the regular expression \\\\b(a|b)(c|d)\\\\b as their regular expression.\nThis snippet creates a regular expression to match two-letter words, in which the first letter is \u201ca\u201d or \u201cb\u201d and the second letter is \u201cc\u201d or \u201cd\u201d. Specifying caseInsensitive means that matches will be case-insensitive, so this will match \u201cBC\u201d, \u201caD\u201d, and so forth, as well as their lower-case equivalents.\nThe numberOfMatches(in:options:range:) method provides a simple mechanism for counting the number of matches in a given range of a string.\nIf you are interested only in the overall range of the first match, the rangeOfFirstMatch(in:options:range:) method provides it for you.  Some regular expressions (though not the example pattern) can successfully match a zero-length range, so the comparison of the resulting range with {NSNotFound, 0} is the most reliable way to determine whether there was a match or not.\nThe example regular expression contains two capture groups, corresponding to the two sets of parentheses, one for the first letter, and one for the second.  If you are interested in more than just the overall matched range, you want to obtain an NSTextCheckingResult object corresponding to a given match.  This object provides information about the overall matched range, via its range property, and also supplies the capture group ranges, via the range(at:) method.  The first capture group range is given by [result rangeAtIndex:1], the second by [result rangeAtIndex:2].  Sending a result the  range(at:) message and passing 0 is equivalent to [result range].\nIf the result returned is non-nil, then [result range] will always be a valid range, so it is not necessary to compare it against {NSNotFound, 0}.  However, for some regular expressions (though not the example pattern) some capture groups may or may not participate in a given match.  If a given capture group does not participate in a given match, then [result rangeAtIndex:idx] will return {NSNotFound, 0}.\nThe matches(in:options:range:) returns all the matching results.\nThe firstMatch(in:options:range:) method is similar to matches(in:options:range:) but it returns only the first match.\nThe Block enumeration method enumerateMatches(in:options:range:using:) is the most general and flexible of the matching methods of NSRegularExpression.  It allows you to iterate through matches in a string, performing arbitrary actions on each as specified by the code in the Block and to stop partway through if desired.  In the following example case, the iteration is stopped after a certain number of matches have been found. \nIf neither of the special options reportProgress or reportCompletion is specified, then the result argument to the Block is guaranteed to be non-nil, and as mentioned before, it is guaranteed to have a valid overall range.  See NSRegularExpression.MatchingOptions for the significance of reportProgress or reportCompletion.\nNSRegularExpression also provides simple methods for performing find-and-replace operations on a string.  The following example returns a modified copy, but there is a corresponding method for modifying a mutable string in place.  The template specifies what is to be used to replace each match, with $0 representing the contents of the overall matched range, $1 representing the contents of the first capture group, and so on.  In this case, the template reverses the two letters of the word.\nNSRegularExpression is designed to be immutable and thread safe, so that a single instance can be used in matching operations on multiple threads at once.  However, the string on which it is operating should not be mutated during the course of a matching operation, whether from another thread or from within the Block used in the iteration.\nThe following tables describe the character expressions used by the regular expression to match patterns within a string, the pattern operators that specify how many times a pattern is matched and additional matching restrictions, and the last table specifies flags that can be included in the regular expression pattern that specify search behavior over multiple lines (these flags can also be specified using the NSRegularExpression.Options option flags.\nTable 1 describe the character sequences used to match characters within a string.\nRegular Expression Metacharacters\nCharacter Expression\nDescription\n\\a\nMatch a BELL, \\u0007\n\\A\nMatch at the beginning of the input. Differs from ^ in that \\A will not match after a new line within the input.\n\\b, outside of a [Set]\nMatch if the current position is a word boundary. Boundaries occur at the transitions between word (\\w) and non-word (\\W) characters, with combining marks ignored. For better word boundaries, see useUnicodeWordBoundaries.\n\\b, within a [Set]\nMatch a BACKSPACE, \\u0008.\n\\B\nMatch if the current position is not a word boundary.\n\\cX\nMatch a control-X character\n\\d\nMatch any character with the Unicode General Category of Nd (Number, Decimal Digit.)\n\\D\nMatch any character that is not a decimal digit.\n\\e\nMatch an ESCAPE, \\u001B.\n\\E\nTerminates a \\Q ... \\E quoted sequence.\n\\f\nMatch a FORM FEED, \\u000C.\n\\G\nMatch if the current position is at the end of the previous match.\n\\n\nMatch a LINE FEED, \\u000A.\n\\N{UNICODE CHARACTER NAME}\nMatch the named character.\n\\p{UNICODE PROPERTY NAME}\nMatch any character with the specified Unicode Property.\n\\P{UNICODE PROPERTY NAME}\nMatch any character not having the specified Unicode Property.\n\\Q\nQuotes all following characters until \\E.\n\\r\nMatch a CARRIAGE RETURN, \\u000D.\n\\s\nMatch a white space character. White space is defined as [\\t\\n\\f\\r\\p{Z}].\n\\S\nMatch a non-white space character.\n\\t\nMatch a HORIZONTAL TABULATION, \\u0009.\n\\uhhhh\nMatch the character with the hex value hhhh.\n\\Uhhhhhhhh\nMatch the character with the hex value hhhhhhhh. Exactly eight hex digits must be provided, even though the largest Unicode code point is \\U0010ffff.\n\\w\nMatch a word character. Word characters are [\\p{Ll}\\p{Lu}\\p{Lt}\\p{Lo}\\p{Nd}].\n\\W\nMatch a non-word character.\n\\x{hhhh}\nMatch the character with hex value hhhh. From one to six hex digits may be supplied.\n\\xhh\nMatch the character with two digit hex value hh.\n\\X\nMatch a Grapheme Cluster.\n\\Z\nMatch if the current position is at the end of input, but before the final line terminator, if one exists.\n\\z\nMatch if the current position is at the end of input.\n\\n\nBack Reference. Match whatever the nth capturing group matched. n must be a number \u2265 1 and \u2264 total number of capture groups in the pattern.\n\\0ooo\nMatch an Octal character.  ooo is from one to three octal digits.  0377 is the largest allowed Octal character.  The leading zero is required; it distinguishes Octal constants from back references.\n[pattern]\nMatch any one character from the pattern.\n.\nMatch any character. See dotMatchesLineSeparators and the s character expression in Table 4.\n^\nMatch at the beginning of a line. See anchorsMatchLines and the \\m character expression in Table 4.\n$\nMatch at the end of a line. See anchorsMatchLines and the m character expression in Table 4.\n\\\nQuotes the following character. Characters that must be quoted to be treated as literals are * ? + [ ( ) { } ^ $ | \\ . /\nTable 2 defines the regular expression operators.\nRegular Expression Operators\nOperator\nDescription\n|\nAlternation. A|B matches either A or B.\n*\nMatch 0 or more times. Match as many times as possible.\n+\nMatch 1 or more times. Match as many times as possible.\n?\nMatch zero or one times. Prefer one.\n{n}\nMatch exactly n times.\n{n,}\nMatch at least n times. Match as many times as possible.\n{n,m}\nMatch between n and m times. Match as many times as possible, but not more than m.\n*?\nMatch 0 or more times. Match as few times as possible.\n+?\nMatch 1 or more times. Match as few times as possible.\n??\nMatch zero or one times. Prefer zero.\n{n}?\nMatch exactly n times.\n{n,}?\nMatch at least n times, but no more than required for an overall pattern match.\n{n,m}?\nMatch between n and m times. Match as few times as possible, but not less than n.\n*+\nMatch 0 or more times. Match as many times as possible when first encountered, do not retry with fewer even if overall match fails (Possessive Match).\n++\nMatch 1 or more times. Possessive match.\n?+\nMatch zero or one times. Possessive match.\n{n}+\nMatch exactly n times.\n{n,}+\nMatch at least n times. Possessive Match.\n{n,m}+\nMatch between n and m times. Possessive Match.\n(...)\nCapturing parentheses. Range of input that matched the parenthesized subexpression is available after the match.\n(?:...)\nNon-capturing parentheses. Groups the included pattern, but does not provide capturing of matching text. Somewhat more efficient than capturing parentheses.\n(?>...)\nAtomic-match parentheses. First match of the parenthesized subexpression is the only one tried; if it does not lead to an overall pattern match, back up the search for a match to a position before the \"(?>\"\n(?# ... )\nFree-format comment (?# comment ).\n(?= ... )\nLook-ahead assertion. True if the parenthesized pattern matches at the current input position, but does not advance the input position.\n(?! ... )\nNegative look-ahead assertion. True if the parenthesized pattern does not match at the current input position. Does not advance the input position.\n(?<= ... )\nLook-behind assertion. True if the parenthesized pattern matches text preceding the current input position, with the last character of the match being the input character just before the current position. Does not alter the input position. The length of possible strings matched by the look-behind pattern must not be unbounded (no * or + operators.)\n(?<! ... )\nNegative Look-behind assertion. True if the parenthesized pattern does not match text preceding the current input position, with the last character of the match being the input character just before the current position. Does not alter the input position. The length of possible strings matched by the look-behind pattern must not be unbounded (no * or + operators.)\n(?ismwx-ismwx: ... )\nFlag settings. Evaluate the parenthesized expression with the specified flags enabled or -disabled. The flags are defined in Flag Options.\n(?ismwx-ismwx)\nFlag settings. Change the flag settings. Changes apply to the portion of the pattern following the setting. For example, (?i) changes to a case insensitive match.The flags are defined in Flag Options.\nThe NSRegularExpression class provides find-and-replace methods for both immutable and mutable strings using the technique of template matching. Table 3 describes the syntax.\nTemplate Matching Format\nCharacter\nDescriptions\n$n\nThe text of capture group n will be substituted for $n. n must be >= 0 and not greater than the number of capture groups. A $ not followed by a digit has no special meaning, and will appear in the substitution text as itself, a $.\n\\\nTreat the following character as a literal, suppressing any special meaning. Backslash escaping in substitution text is only required for '$' and '\\', but may be used on any other character without bad effects.\nThe replacement string is treated as a template, with $0 being replaced by the contents of the matched range, $1 by the contents of the first capture group, and so on.  Additional digits beyond the maximum required to represent the number of capture groups will be treated as ordinary characters, as will a $ not followed by digits.  Backslash will escape both $ and \\.\nThe following flags control various aspects of regular expression matching. These flag values may be specified within the pattern using the (?ismx-ismx) pattern options.  Equivalent behaviors can be specified for the entire pattern when an NSRegularExpression is initialized, using the NSRegularExpression.Options option flags.\nFlag Options\nFlag (Pattern)\nDescription\ni\nIf set, matching will take place in a case-insensitive manner.\nx\nIf set, allow use of white space and #comments within patterns\ns\nIf set, a \".\" in a pattern will match a line terminator in the input text. By default, it will not. Note that a carriage-return / line-feed pair in text behave as a single line terminator, and will match a single \".\" in a regular expression pattern\nm\nControl the behavior of \"^\" and \"$\" in a pattern. By default these will only match at the start and end, respectively, of the input text. If this flag is set, \"^\" and \"$\" will also match at the start and end of each line within the input text.\nw\nControls the behavior of \\b in a pattern. If set, word boundaries are found according to the definitions of word found in Unicode UAX 29, Text Boundaries. By default, word boundaries are identified by means of a simple classification of characters as either \u201cword\u201d or \u201cnon-word\u201d, which approximates traditional regular expression behavior. The results obtained with the two options can be quite different in runs of spaces and other non-word characters.\nNSRegularExpression implements a nondeterministic finite automaton matching engine. As such, complex regular expression patterns containing multiple * or + operators may result in poor performance when attempting to perform matches \u2014 particularly failing to match a given input. For more information, see the \u201cPerformance Tips\u201d section of the ICU User Guide.\nTable 1, Table 2, Table 3, Table 4 are reproduced from the ICU User Guide, Copyright (c) 2000 - 2009 IBM and Others, which are licensed under the following terms:\nCOPYRIGHT AND PERMISSION NOTICE\nCopyright (c) 1995-2009 International Business Machines Corporation and others. All rights reserved.\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, provided that the above copyright notice(s) and this permission notice appear in all copies of the Software and that both the above copyright notice(s) and this permission notice appear in supporting documentation.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\nExcept as contained in this notice, the name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization of the copyright holder.\nAll trademarks and registered trademarks mentioned herein are the property of their respective owners. \n", "class_name": "NSRegularExpression"}
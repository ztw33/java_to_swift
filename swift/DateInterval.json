{"subclass_list": [], "Methods": [{"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": "", "method_description": "Indicates whether one date interval is strictly less than another.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": "", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": "==", "method_description": "Indicates whether two date intervals are the same.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": ">", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["rhs"], "param_description": "", "param_type": "DateInterval"}], "method_name": ">=", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["with", "dateInterval"], "param_description": "", "param_type": "DateInterval"}], "method_name": "intersection", "method_description": "Returns an interval that represents the interval where the given date interval and the current instance intersect.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["DateInterval"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["dateInterval"], "param_description": "", "param_type": "DateInterval"}], "method_name": "intersects", "method_description": "Indicates whether this interval intersects the specified interval.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "contains", "method_description": "Indicates whether this interval contains the given date.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["dateInterval"], "param_description": "", "param_type": "DateInterval"}], "method_name": "compare", "method_description": "Compares two intervals.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "DateInterval"}], "method_name": "...", "method_description": "Returns a partial range extending upward from a lower bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<DateInterval>"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["maximum"], "param_description": "", "param_type": "DateInterval"}], "method_name": "...", "method_description": "Returns a partial range up to, and including, its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<DateInterval>"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["maximum"], "param_description": "", "param_type": "DateInterval"}], "method_name": "...", "method_description": "Returns a closed range that contains both of its bounds.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<DateInterval>"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["maximum"], "param_description": "", "param_type": "DateInterval"}], "method_name": "..", "method_description": "Returns a partial range up to, but not including, its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<DateInterval>"]}, "class_name": "DateInterval"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "DateInterval"}, {"param_name": ["maximum"], "param_description": "", "param_type": "DateInterval"}], "method_name": "..", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<DateInterval>"]}, "class_name": "DateInterval"}], "Vars": [{"var_name": "start", "var_description": "The start date.", "var_type": "Date"}, {"var_name": "end", "var_description": "The end date.", "var_type": "Date"}, {"var_name": "duration", "var_description": "The duration.", "var_type": "TimeInterval"}, {"var_name": "description", "var_description": "A textual description of the date interval.", "var_type": "String"}, {"var_name": "debugDescription", "var_description": "A textual description of the date interval suitable for debugging.", "var_type": "String"}, {"var_name": "customMirror", "var_description": "A mirror that reflects the date interval.", "var_type": "Mirror"}, {"var_name": "hashValue", "var_description": "The computed hash value for the date interval.", "var_type": "Int"}], "class_name": "DateInterval", "class_inherit_list": [], "interface_list": ["Comparable", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Decodable", "Encodable", "Hashable", "ReferenceConvertible"], "class_description": "DateInterval represents a closed date interval in the form of [startDate, endDate].  It is possible for the start and end dates to be the same with a duration of 0.  DateInterval does not support reverse intervals i.e. intervals where the duration is less than 0 and the end date occurs earlier in time than the start date.\n", "package_name": "foundation"}
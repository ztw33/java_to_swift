{"class_description": "A dictionary literal is a simple way of writing a list of key-value pairs. You write each key-value pair with a colon (:) separating the key and the value. The dictionary literal is made up of one or more key-value pairs, separated by commas and surrounded with square brackets.\nTo declare a dictionary, assign a dictionary literal to a variable or constant:\nWhen the context provides enough type information, you can use a special form of the dictionary literal, square brackets surrounding a single colon, to initialize an empty dictionary.\nNote\nA dictionary literal is not the same as an instance of Dictionary or the similarly named DictionaryLiteral type. You can\u2019t initialize a type that conforms to ExpressibleByDictionaryLiteral simply by assigning an instance of one of these types.\nTo add the capability to be initialized with a dictionary literal to your own custom types, declare an init(dictionaryLiteral:) initializer. The following example shows the dictionary literal initializer for a hypothetical CountedSet type, which uses setlike semantics while keeping track of the count for duplicate elements:\n", "package_name": "swift", "interface_list": [], "Methods": [], "class_inherit_list": [], "Vars": [], "subclass_list": [], "class_name": "ExpressibleByDictionaryLiteral"}
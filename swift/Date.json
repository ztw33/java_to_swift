{"subclass_list": [], "Methods": [{"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "", "method_description": "Returns a Boolean that is true if the left hand date is earlier in time than the right hand date.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "==", "method_description": "Returns a Boolean that is true if the two date values represent the same point in time.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["other"], "param_description": "", "param_type": "Date"}], "method_name": "compare", "method_description": "Compares two date values.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "class_name": "Date"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "timeIntervalSince", "method_description": "Returns the interval between the receiver and another given date.", "return_value": {"return_description": ["The interval between the receiver and the another parameter. If the receiver is earlier than anotherDate, the return value is negative. If anotherDate is nil, the results are undefined."], "return_name": [""], "return_type": ["TimeInterval"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "+", "method_description": "Returns a date with a specified amount of time added to it.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Date"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "inout Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "+=", "method_description": "Adds a time interval to a date.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "-", "method_description": "Returns a date with a specified amount of time subtracted from it.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Date"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "inout Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "-=", "method_description": "Subtracts a time interval from a date.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "", "method_description": "Returns a Boolean that is true if the left hand date is earlier in time than the right hand date.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": "==", "method_description": "Returns a Boolean that is true if the two date values represent the same point in time.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": ">=", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["with", "locale"], "param_description": "", "param_type": "Locale"}], "method_name": "description", "method_description": "Returns a string representation of the date using the given locale.", "return_value": {"return_description": ["A string representation of the Date, using the given locale, or if the locale argument is nil, in the international format YYYY-MM-DD HH:MM:SS \u00b1HHMM, where \u00b1HHMM represents the time zone offset in hours and minutes from UTC (for example, \u201c2001-03-24 10:45:32 +0600\u201d)."], "return_name": [""], "return_type": ["String"]}, "class_name": "Date"}, {"params": [{"param_name": ["timeInterval"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "addTimeInterval", "method_description": "Adds a time interval to this date.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "Date"}, {"params": [{"param_name": ["timeInterval"], "param_description": "", "param_type": "TimeInterval"}], "method_name": "addingTimeInterval", "method_description": "Creates a new date value by adding a time interval to this date.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Date"]}, "class_name": "Date"}, {"params": [{"param_name": ["to", "encoder"], "param_description": "", "param_type": "Encoder"}], "method_name": "encode", "method_description": "", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "Date"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "Date"}], "method_name": "...", "method_description": "Returns a partial range extending upward from a lower bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<Date>"]}, "class_name": "Date"}, {"params": [{"param_name": ["maximum"], "param_description": "", "param_type": "Date"}], "method_name": "...", "method_description": "Returns a partial range up to, and including, its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<Date>"]}, "class_name": "Date"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "Date"}, {"param_name": ["maximum"], "param_description": "", "param_type": "Date"}], "method_name": "...", "method_description": "Returns a closed range that contains both of its bounds.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Date>"]}, "class_name": "Date"}, {"params": [{"param_name": ["maximum"], "param_description": "", "param_type": "Date"}], "method_name": "..", "method_description": "Returns a partial range up to, but not including, its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<Date>"]}, "class_name": "Date"}, {"params": [{"param_name": ["minimum"], "param_description": "", "param_type": "Date"}, {"param_name": ["maximum"], "param_description": "", "param_type": "Date"}], "method_name": "..", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Date>"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": ">", "method_description": "", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Date"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Date"}], "method_name": ">", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Date"}], "Vars": [{"var_name": "distantFuture", "var_description": "A date value representing a date in the distant future.", "var_type": "Date"}, {"var_name": "distantPast", "var_description": "A date value representing a date in the distant past.", "var_type": "Date"}, {"var_name": "timeIntervalSinceNow", "var_description": "The time interval between the date value and the current date and time.", "var_type": "TimeInterval"}, {"var_name": "timeIntervalSinceReferenceDate", "var_description": "The interval between the date value and 00:00:00 UTC on 1 January 2001.", "var_type": "TimeInterval"}, {"var_name": "timeIntervalSince1970", "var_description": "The interval between the date value and 00:00:00 UTC on 1 January 1970.", "var_type": "TimeInterval"}, {"var_name": "timeIntervalSinceReferenceDate", "var_description": "The interval between 00:00:00 UTC on 1 January 2001 and the current date and time.", "var_type": "TimeInterval"}, {"var_name": "timeIntervalBetween1970AndReferenceDate", "var_description": "The number of seconds from 1 January 1970 to the reference date, 1 January 2001.", "var_type": "TimeInterval"}, {"var_name": "description", "var_description": "A textual description of the date value.", "var_type": "String"}, {"var_name": "debugDescription", "var_description": "A textual description of the date suitable for debugging.", "var_type": "String"}, {"var_name": "customMirror", "var_description": "A mirror that reflects the date.", "var_type": "Mirror"}, {"var_name": "hashValue", "var_description": "The computed hash value of the date.", "var_type": "Int"}, {"var_name": "customPlaygroundQuickLook", "var_description": "A custom playground Quick Look for the date.", "var_type": "PlaygroundQuickLook"}], "class_name": "Date", "class_inherit_list": [], "interface_list": ["CKRecordValueProtocol", "Comparable", "CustomDebugStringConvertible", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "Equatable", "ReferenceConvertible"], "class_description": "A Date value encapsulate a single point in time, independent of any particular calendrical system or time zone. Date values represent a time interval relative to an absolute reference date.\nThe Date structure provides methods for comparing dates, calculating the time interval between two dates, and creating a new date from a time interval relative to another date. Use date values in conjunction with DateFormatter instances to create localized representations of dates and times and with Calendar instances to perform calendar arithmetic.\nDate bridges to the NSDate class. You can use these interchangeably in code that interacts with Objective-C APIs.\n", "package_name": "foundation"}
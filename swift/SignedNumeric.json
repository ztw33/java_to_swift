{"class_description": "The SignedNumeric protocol extends the operations defined by the Numeric protocol to include a value\u2019s additive inverse.\nBecause the SignedNumeric protocol provides default implementations of both of its required methods, you don\u2019t need to do anything beyond declaring conformance to the protocol and ensuring that the values of your type support negation. To customize your type\u2019s implementation, provide your own mutating negate() method.\nWhen the additive inverse of a value is unrepresentable in a conforming type, the operation should either trap or return an exceptional value. For example, using the negation operator (prefix -) with Int.min results in a runtime error.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "SignedNumeric", "method_description": "Replaces this value with its additive inverse.Required. Default implementation provided.", "method_name": "negate", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The additive inverse of this value."], "return_type": ["Self"]}, "class_name": "SignedNumeric", "method_description": "Returns the additive inverse of the specified value.Required. Default implementation provided.", "method_name": "-", "params": [{"param_type": "Self", "param_name": ["operand"], "param_description": ""}]}], "class_inherit_list": ["Numeric"], "Vars": [], "subclass_list": ["FloatingPoint", "SignedInteger"], "class_name": "SignedNumeric"}
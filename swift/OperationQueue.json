{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addOperation", "class_name": "OperationQueue", "method_description": "Adds the specified operation to the receiver.", "params": [{"param_type": "Operation", "param_name": ["op"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addOperations", "class_name": "OperationQueue", "method_description": "Adds the specified operations to the queue.", "params": [{"param_type": "[Operation]", "param_name": ["ops"], "param_description": ""}, {"param_type": "Bool", "param_name": ["waitUntilFinished", "wait"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "addOperation", "class_name": "OperationQueue", "method_description": "Wraps the specified block in an operation and adds it to the receiver.", "params": [{"param_type": "@escaping (", "param_name": ["block"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "cancelAllOperations", "class_name": "OperationQueue", "method_description": "Cancels all queued and executing operations.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "waitUntilAllOperationsAreFinished", "class_name": "OperationQueue", "method_description": "Blocks the current thread until all of the receiver\u2019s queued and executing operations finish executing.", "params": []}], "Vars": [{"var_type": "OperationQueue", "var_description": "Returns the operation queue associated with the main thread. ", "var_name": "main"}, {"var_type": "OperationQueue", "var_description": "Returns the operation queue that launched the current operation.", "var_name": "current"}, {"var_type": "[Operation]", "var_description": "The operations currently in the queue. ", "var_name": "operations"}, {"var_type": "Int", "var_description": "The number of operations currently in the queue.", "var_name": "operationCount"}, {"var_type": "QualityOfService", "var_description": "The default service level to apply to operations executed using the queue.", "var_name": "qualityOfService"}, {"var_type": "Int", "var_description": "The maximum number of queued operations that can execute at the same time.", "var_name": "maxConcurrentOperationCount"}, {"var_type": "Int", "var_description": "The default maximum number of operations to be executed concurrently in a queue.   ", "var_name": "defaultMaxConcurrentOperationCount"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the queue is actively scheduling operations for execution.", "var_name": "isSuspended"}, {"var_type": "String", "var_description": "The name of the operation queue.", "var_name": "name"}, {"var_type": "DispatchQueue", "var_description": "The dispatch queue used to execute operations.", "var_name": "underlyingQueue"}], "subclass_list": [], "class_description": "An operation queue executes its queued Operation objects based on their priority and readiness. After being added to an operation queue, an operation remains in its queue until it reports that it is finished with its task. You can\u2019t directly remove an operation from a queue after it has been added.\nNote\nOperation queues retain operations until they're finished, and queues themselves are retained until all operations are finished. Suspending an operation queue with operations that aren't finished can result in a memory leak. \n\nFor more information about using operation queues, see Concurrency Programming Guide. \nOperations within a queue are organized according to their readiness, priority level, and interoperation dependencies, and are executed accordingly. If all of the queued operations have the same queuePriority and are ready to execute when they are put in the queue\u2014that is, their isReady property returns true\u2014they\u2019re executed in the order in which they were submitted to the queue. Otherwise, the operation queue always executes the one with the highest priority relative to the other ready operations. \nHowever, you should never rely on queue semantics to ensure a specific execution order of operations, because changes in the readiness of an operation can change the resulting execution order. Interoperation dependencies provide an absolute execution order for operations, even if those operations are located in different operation queues. An operation object is not considered ready to execute until all of its dependent operations have finished executing. \nFor details on how to set priority levels and dependencies, see Managing Dependencies in Operation.\nFinishing its task doesn\u2019t necessarily mean that the operation performed that task to completion; an operation can also be canceled. Canceling an operation object leaves the object in the queue but notifies the object that it should stop its task as quickly as possible. For currently executing operations, this means that the operation object\u2019s work code must check the cancellation state, stop what it is doing, and mark itself as finished. For operations that are queued but not yet executing, the queue must still call the operation object\u2019s start() method so that it can processes the cancellation event and mark itself as finished.\nNote\nCanceling an operation causes the operation to ignore any dependencies it may have. This behavior makes it possible for the queue to execute the operation\u2019s start() method as soon as possible. The start() method, in turn, moves the operation to the finished state so that it can be removed from the queue.\nFor more information about operation cancellation, see Responding to the Cancel Command in Operation.\nThe OperationQueue class is key-value coding (KVC) and key-value observing (KVO) compliant. You can observe these properties as desired to control other parts of your application. To observe the properties, use the following key paths: \noperations - read-only \noperationCount - read-only \nmaxConcurrentOperationCount - readable and writable \nisSuspended - readable and writable \nname - readable and writable\nAlthough you can attach observers to these properties, you shouldn\u2019t use Cocoa bindings to bind them to elements of your application\u2019s user interface. Code associated with your user interface typically must execute only in your app\u2019s main thread. However, KVO notifications associated with an operation queue may occur in any thread. \nFor more information about key-value observing and how to attach observers to an object, see Key-Value Observing Programming Guide.\nIt is safe to use a single OperationQueue object from multiple threads without creating additional locks to synchronize access to that object.\nOperation queues use the Dispatch framework to initiate the execution of their operations. As a result, operations are always executed on a separate thread, regardless of whether they are designated as synchronous or asynchronous.\n", "class_name": "OperationQueue"}
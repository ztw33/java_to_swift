{"subclass_list": [], "Methods": [{"params": [{"param_name": ["object"], "param_description": "", "param_type": "Any"}], "method_name": "add", "method_description": "Adds a given object to the set.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSCountedSet"}, {"params": [{"param_name": ["object"], "param_description": "", "param_type": "Any"}], "method_name": "remove", "method_description": "Removes a given object from the set.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSCountedSet"}, {"params": [{"param_name": ["for", "object"], "param_description": "", "param_type": "Any"}], "method_name": "count", "method_description": "Returns the count associated with a given object in the set.", "return_value": {"return_description": ["The count associated with anObject in the set, which can be thought of as the number of occurrences of anObject present in the set."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSCountedSet"}, {"params": [], "method_name": "objectEnumerator", "method_description": "Returns an enumerator object that lets you access each object in the set once, independent of its count.", "return_value": {"return_description": ["An enumerator object that lets you access each object in the set once, independent of its count."], "return_name": [""], "return_type": ["NSEnumerator"]}, "class_name": "NSCountedSet"}], "Vars": [], "class_name": "NSCountedSet", "class_inherit_list": ["NSMutableSet"], "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "Sequence"], "class_description": "Each distinct object inserted into an NSCountedSet object has a counter associated with it. NSCountedSet keeps track of the number of times objects are inserted and requires that objects be removed the same number of times. Thus, there is only one instance of an object in an NSSet object even if the object has been added to the set multiple times. The count method defined by the superclass NSSet has special significance; it returns the number of distinct objects, not the total number of times objects are represented in the set. The NSSet and NSMutableSet classes are provided for static and dynamic sets, respectively, whose elements are distinct.\nWhile NSCountedSet and CFBag are not toll-free bridged, they provide similar functionality. For more information about CFBag, see the CFBag.\nBecause NSCountedSet is not a class cluster, it does not have primitive methods that provide the basis for its implementation. In general, there should be little need for subclassing.\nIf you subclass NSCountedSet, you must override any method of which you want to change the behavior.\nIf you change the primitive behavior of an NSCountedSet, for instance if you change how objects are stored, you must override all of the affected methods. These include:\nadd(_:)\nremove(_:)\nobjectEnumerator()\ncount(for:)\nIf you change the primitive behavior, you must also override the primitive methods of NSSet and NSMutableSet.\n", "package_name": "foundation"}
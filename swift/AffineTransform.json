{"package_name": "foundation", "interface_list": ["CustomStringConvertible", "Hashable", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "rotate", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation matrix from a rotation value (angle \u03b1 in degrees). ", "params": [{"param_type": "CGFloat", "param_name": ["byDegrees", "angle"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "rotate", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation matrix from a rotation value (angle \u03b1 in radians). ", "params": [{"param_type": "CGFloat", "param_name": ["byRadians", "angle"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "scale", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation matrix to perform the given scaling in both x and y dimensions.", "params": [{"param_type": "CGFloat", "param_name": ["scale"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "scale", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation matrix to perform a scaling in each of the x and y dimensions.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "translate", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation matrix to perform the given translation.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation by appending the specified matrix.", "params": [{"param_type": "AffineTransform", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "prepend", "class_name": "AffineTransform", "method_description": "Mutates an affine transformation by prepending the specified matrix.", "params": [{"param_type": "AffineTransform", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "invert", "class_name": "AffineTransform", "method_description": "Inverts the transformation matrix if possible.", "params": []}, {"return_value": {"return_type": ["AffineTransform"], "return_name": [""], "return_description": []}, "method_name": "inverted", "class_name": "AffineTransform", "method_description": "Returns an inverted version of the matrix if possible, or nil if not.", "params": []}, {"return_value": {"return_type": ["NSPoint"], "return_name": [""], "return_description": []}, "method_name": "transform", "class_name": "AffineTransform", "method_description": "Applies the receiver\u2019s transform to the specified point and returns the result.", "params": [{"param_type": "NSPoint", "param_name": ["point"], "param_description": ""}]}, {"return_value": {"return_type": ["NSSize"], "return_name": [""], "return_description": []}, "method_name": "transform", "class_name": "AffineTransform", "method_description": "Applies the receiver\u2019s transform to the specified size and returns the results.", "params": [{"param_type": "NSSize", "param_name": ["size"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "AffineTransform", "method_description": "Indicates whether two transforms are the same.", "params": [{"param_type": "AffineTransform", "param_name": ["lhs"], "param_description": ""}, {"param_type": "AffineTransform", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "AffineTransform", "method_description": "", "params": [{"param_type": "Encoder", "param_name": ["to", "encoder"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "!=", "class_name": "AffineTransform", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "params": [{"param_type": "AffineTransform", "param_name": ["lhs"], "param_description": ""}, {"param_type": "AffineTransform", "param_name": ["rhs"], "param_description": ""}]}], "Vars": [{"var_type": "AffineTransform", "var_description": "An identity affine transformation matrix", "var_name": "identity"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_name": "m11"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_name": "m12"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_name": "m21"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes scaling, rotation, and shear.", "var_name": "m22"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes translation.", "var_name": "tX"}, {"var_type": "CGFloat", "var_description": "An element of the transform matrix that contributes translation.", "var_name": "tY"}, {"var_type": "String", "var_description": "A textual description of the transform.", "var_name": "description"}, {"var_type": "String", "var_description": "A textual description of the transform suitable for debugging.", "var_name": "debugDescription"}, {"var_type": "Int", "var_description": "The computed hash value for the transform.", "var_name": "hashValue"}], "subclass_list": [], "class_description": "", "class_name": "AffineTransform"}
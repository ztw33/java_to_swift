{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSLocking"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the lock is acquired within the time limit, false otherwise."]}, "method_name": "lock", "class_name": "NSConditionLock", "method_description": "Attempts to acquire a lock before a specified moment in time.", "params": [{"param_type": "Date", "param_name": ["before", "limit"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "lock", "class_name": "NSConditionLock", "method_description": "Attempts to acquire a lock.", "params": [{"param_type": "Int", "param_name": ["whenCondition", "condition"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the lock is acquired within the time limit, false otherwise."]}, "method_name": "lock", "class_name": "NSConditionLock", "method_description": "Attempts to acquire a lock before a specified moment in time.", "params": [{"param_type": "Int", "param_name": ["whenCondition", "condition"], "param_description": ""}, {"param_type": "Date", "param_name": ["before", "limit"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the lock could be acquired, false otherwise."]}, "method_name": "`try`", "class_name": "NSConditionLock", "method_description": "Attempts to acquire a lock without regard to the receiver\u2019s condition.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the lock could be acquired, false otherwise."]}, "method_name": "tryLock", "class_name": "NSConditionLock", "method_description": "Attempts to acquire a lock if the receiver\u2019s condition is equal to the specified condition.", "params": [{"param_type": "Int", "param_name": ["whenCondition", "condition"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "unlock", "class_name": "NSConditionLock", "method_description": "Relinquishes the lock and sets the receiver\u2019s condition.", "params": [{"param_type": "Int", "param_name": ["withCondition", "condition"], "param_description": ""}]}], "Vars": [{"var_type": "Int", "var_description": "The condition associated with the receiver.", "var_name": "condition"}, {"var_type": "String", "var_description": "The name associated with the receiver.", "var_name": "name"}], "subclass_list": [], "class_description": "Using an NSConditionLock object, you can ensure that a thread can acquire a lock only if a certain condition is met. Once it has acquired the lock and executed the critical section of code, the thread can relinquish the lock and set the associated condition to something new. The conditions themselves are arbitrary: you define them as needed for your application.\n", "class_name": "NSConditionLock"}
{"class_inherit_list": ["NSObject"], "Vars": [{"var_description": "The number of UTF-16 code units in the receiver.", "var_type": "Int", "var_name": "length"}, {"var_description": "A null-terminated UTF8 representation of the string.", "var_type": "UnsafePointer<Int8>", "var_name": "utf8String"}, {"var_description": "An unsigned integer that can be used as a hash table address.", "var_type": "Int", "var_name": "hash"}, {"var_description": "A lowercase representation of the string.", "var_type": "String", "var_name": "lowercased"}, {"var_description": "Returns a version of the string with all letters converted to lowercase, taking into account the current locale.", "var_type": "String", "var_name": "localizedLowercase"}, {"var_description": "An uppercase representation of the string.", "var_type": "String", "var_name": "uppercased"}, {"var_description": "Returns a version of the string with all letters converted to uppercase, taking into account the current locale.", "var_type": "String", "var_name": "localizedUppercase"}, {"var_description": "A capitalized representation of the string.", "var_type": "String", "var_name": "capitalized"}, {"var_description": "Returns a capitalized representation of the receiver using the current locale.", "var_type": "String", "var_name": "localizedCapitalized"}, {"var_description": "A string made by normalizing the string\u2019s contents using the Unicode Normalization Form D.", "var_type": "String", "var_name": "decomposedStringWithCanonicalMapping"}, {"var_description": "A string made by normalizing the receiver\u2019s contents using the Unicode Normalization Form KD.", "var_type": "String", "var_name": "decomposedStringWithCompatibilityMapping"}, {"var_description": "A string made by normalizing the string\u2019s contents using the Unicode Normalization Form C.", "var_type": "String", "var_name": "precomposedStringWithCanonicalMapping"}, {"var_description": "A string made by normalizing the receiver\u2019s contents using the Unicode Normalization Form KC.", "var_type": "String", "var_name": "precomposedStringWithCompatibilityMapping"}, {"var_description": "The floating-point value of the string as a double.", "var_type": "Double", "var_name": "doubleValue"}, {"var_description": "The floating-point value of the string as a float.", "var_type": "Float", "var_name": "floatValue"}, {"var_description": "The integer value of the string.", "var_type": "Int32", "var_name": "intValue"}, {"var_description": "The NSInteger value of the string.", "var_type": "Int", "var_name": "integerValue"}, {"var_description": "The long long value of the string.", "var_type": "Int64", "var_name": "longLongValue"}, {"var_description": "The Boolean value of the string.", "var_type": "Bool", "var_name": "boolValue"}, {"var_description": "Returns a zero-terminated list of the encodings string objects support in the application\u2019s environment.", "var_type": "UnsafePointer<UInt>", "var_name": "availableStringEncodings"}, {"var_description": "Returns the C-string encoding assumed for any method accepting a C string as an argument.", "var_type": "UInt", "var_name": "defaultCStringEncoding"}, {"var_description": "This NSString object.", "var_type": "String", "var_name": "description"}, {"var_description": "The fastest encoding to which the receiver may be converted without loss of information.", "var_type": "UInt", "var_name": "fastestEncoding"}, {"var_description": "The smallest encoding to which the receiver can be converted without loss of information.", "var_type": "UInt", "var_name": "smallestEncoding"}, {"var_description": "NSString raises an NSCharacterConversionException if a string cannot be represented in a file-system or string encoding.", "var_type": "NSExceptionName", "var_name": "characterConversionException"}, {"var_description": "NSString raises an NSParseErrorException if a string cannot be parsed as a property list.", "var_type": "NSExceptionName", "var_name": "parseErrorException"}, {"var_description": "The file-system path components of the receiver.", "var_type": "[String]", "var_name": "pathComponents"}, {"var_description": "A file system-specific representation of the receiver. ", "var_type": "UnsafePointer<Int8>", "var_name": "fileSystemRepresentation"}, {"var_description": "A Boolean value that indicates whether the receiver represents an absolute path.", "var_type": "Bool", "var_name": "isAbsolutePath"}, {"var_description": "The last path component of the receiver.", "var_type": "String", "var_name": "lastPathComponent"}, {"var_description": "The path extension, if any, of the string as interpreted as a path.", "var_type": "String", "var_name": "pathExtension"}, {"var_description": "A new string that replaces the current home directory portion of the current path with a tilde (~) character.", "var_type": "String", "var_name": "abbreviatingWithTildeInPath"}, {"var_description": "A new string made by deleting the last path component from the receiver, along with any final path separator.", "var_type": "String", "var_name": "deletingLastPathComponent"}, {"var_description": "A new string made by deleting the extension (if any, and only the last) from the receiver.", "var_type": "String", "var_name": "deletingPathExtension"}, {"var_description": "A new string made by expanding the initial component of the receiver to its full path value.", "var_type": "String", "var_name": "expandingTildeInPath"}, {"var_description": "A new string made from the receiver by resolving all symbolic links and standardizing path. ", "var_type": "String", "var_name": "resolvingSymlinksInPath"}, {"var_description": "A new string made by removing extraneous path components from the receiver.", "var_type": "String", "var_name": "standardizingPath"}, {"var_description": "Returns a new string made from the receiver by replacing all percent encoded sequences with the matching UTF-8 characters.", "var_type": "String", "var_name": "removingPercentEncoding"}, {"var_description": "", "var_type": "PlaygroundQuickLook", "var_name": "customPlaygroundQuickLook"}], "class_name": "NSString", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CVarArg", "Equatable", "ExpressibleByStringLiteral", "Hashable", "NSCopying", "NSItemProviderReading", "NSItemProviderWriting", "NSMutableCopying", "NSPasteboardReading", "NSPasteboardWriting", "NSSecureCoding"], "subclass_list": [], "class_description": "The NSString class and its mutable subclass, NSMutableString, provide an extensive set of APIs for working with strings, including methods for comparing, searching, and modifying strings. NSString objects are used throughout Foundation and other Cocoa frameworks, serving as the basis for all textual and linguistic functionality on the platform.\nNSString is toll-free bridged with its Core Foundation counterpart, CFString. See Toll-Free Bridging for more information.\nAn NSString object encodes a Unicode-compliant text string, represented as a sequence of UTF\u201316 code units. All lengths, character indexes, and ranges are expressed in terms of 16-bit platform-endian values, with index values starting at 0.\nAn NSString object can be initialized from or written to a C buffer, an NSData object, or the contents of an NSURL. It can also be encoded and decoded to and from ASCII, UTF\u20138, UTF\u201316, UTF\u201332, or any other string encoding represented by NSStringEncoding.\nNote\nAn immutable string is a text string that is defined when it is created and subsequently cannot be changed. An immutable string is implemented as an array of UTF\u201316 code units (in other words, a text string). To create and manage an immutable string, use the NSString class. To construct and manage a string that can be changed after it has been created, use NSMutableString.\nThe objects you create using NSString and NSMutableString are referred to as string objects (or, when no confusion will result, merely as strings). The term C string refers to the standard char\u00a0* type. \nBecause of the nature of class clusters, string objects aren\u2019t actual instances of the NSString or NSMutableString classes but of one of their private subclasses. Although a string object\u2019s class is private, its interface is public, as declared by these abstract superclasses, NSString and NSMutableString. The string classes adopt the NSCopying and NSMutableCopying protocols, making it convenient to convert a string of one type to the other.\nA string object presents itself as a sequence of UTF\u201316 code units. You can determine how many UTF-16 code units a string object contains with the length method and can retrieve a specific UTF-16 code unit with the character(at:) method. These two \u201cprimitive\u201d methods provide basic access to a string object.\nMost use of strings, however, is at a higher level, with the strings being treated as single entities: You compare strings against one another, search them for substrings, combine them into new strings, and so on. If you need to access string objects character by character, you must understand the Unicode character encoding, specifically issues related to composed character sequences. For details see The Unicode Standard, Version 4.0 (The Unicode Consortium, Boston: Addison-Wesley, 2003, ISBN 0-321-18578-1) and the Unicode Consortium web site: http://www.unicode.org/. See also Characters and Grapheme Clusters in String Programming Guide.\nLocalized string comparisons are based on the Unicode Collation Algorithm, as tailored for different languages by CLDR (Common Locale Data Repository). Both are projects of the Unicode Consortium. Unicode is a registered trademark of Unicode, Inc.\nWhen creating an NSString object from a UTF-16-encoded string (or a byte stream interpreted as UTF-16), if the byte order is not otherwise specified, NSString assumes that the UTF-16 characters are big-endian, unless there is a BOM (byte-order mark), in which case the BOM dictates the byte order. When creating an NSString object from an array of unichar values, the returned string is always native-endian, since the array always contains UTF\u201316 code units in native byte order.\nIt is possible to subclass NSString (and NSMutableString), but doing so requires providing storage facilities for the string (which is not inherited by subclasses) and implementing two primitive methods. The abstract NSString and NSMutableString classes are the public interface of a class cluster consisting mostly of private, concrete classes that create and return a string object appropriate for a given situation. Making your own concrete subclass of this cluster imposes certain requirements (discussed in Methods to Override). \nMake sure your reasons for subclassing NSString are valid. Instances of your subclass should represent a string and not something else. Thus the only attributes the subclass should have are the length of the character buffer it\u2019s managing and access to individual characters in the buffer. Valid reasons for making a subclass of NSString include providing a different backing store (perhaps for better performance) or implementing some aspect of object behavior differently, such as memory management. If your purpose is to add non-essential attributes or metadata to your subclass of NSString, a better alternative would be object composition (see Alternatives to Subclassing). Cocoa already provides an example of this with the NSAttributedString class.\nAny subclass of NSString must override the primitive instance methods length and character(at:). These methods must operate on the backing store that you provide for the characters of the string. For this backing store you can use a static array, a dynamically allocated buffer, a standard NSString object, or some other data type or mechanism. You may also choose to override, partially or fully, any other NSString method for which you want to provide an alternative implementation. For example, for better performance it is recommended that you override getCharacters(_:range:) and give it a faster implementation.\nYou might want to implement an initializer for your subclass that is suited to the backing store that the subclass is managing. The NSString class does not have a designated initializer, so your initializer need only invoke the init() method of super. The NSString class adopts the NSCopying, NSMutableCopying, and NSCoding protocols; if you want instances of your own custom subclass created from copying or coding, override the methods in these protocols.\nOften a better and easier alternative to making a subclass of NSString\u2014or of any other abstract, public class of a class cluster, for that matter\u2014is object composition. This is especially the case when your intent is to add to the subclass metadata or some other attribute that is not essential to a string object. In object composition, you would have an NSString object as one instance variable of your custom class (typically a subclass of NSObject) and one or more instance variables that store the metadata that you want for the custom object. Then just design your subclass interface to include accessor methods for the embedded string object and the metadata.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSString. Keep in mind, however, that this category will be in effect for all instances of NSString that you use, and this might have unintended consequences.\n", "Methods": [{"return_value": {"return_description": ["A string whose value is created dynamically from a localized string resource. If a string resource corresponding to the specified key cannot be found, the returned string is empty."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a localized string intended for display in a notification alert.", "method_name": "localizedUserNotificationString", "class_name": "NSString", "params": [{"param_description": "The key to use when looking up the string in the app\u2019s Localizable.strings file.", "param_type": "String", "param_name": ["forKey", "key"]}, {"param_description": "An array of values to substitute for escaped characters in the string. ", "param_type": "[Any]", "param_name": ["arguments"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Self"]}, "method_description": "", "method_name": "localizedStringWithFormat", "class_name": "NSString", "params": [{"param_description": "", "param_type": "NSString", "param_name": ["format"]}, {"param_description": "", "param_type": "CVarArg...", "param_name": ["args"]}]}, {"return_value": {"return_description": ["The number of bytes required to store the receiver in the encoding enc in a non-external representation. The length does not include space for a terminating NULL character. Returns 0 if the specified encoding cannot be used to convert the receiver or if the amount of memory required for storing the results of the encoding conversion would exceed NSIntegerMax."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the number of bytes required to store the receiver in a given encoding.", "method_name": "lengthOfBytes", "class_name": "NSString", "params": [{"param_description": "The encoding for which to determine the receiver's length.", "param_type": "UInt", "param_name": ["using", "enc"]}]}, {"return_value": {"return_description": ["The maximum number of bytes needed to store the receiver in encoding in a non-external representation. The length does not include space for a terminating NULL character. Returns 0 if the amount of memory required for storing the results of the encoding conversion would exceed NSIntegerMax."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the maximum number of bytes needed to store the receiver in a given encoding.", "method_name": "maximumLengthOfBytes", "class_name": "NSString", "params": [{"param_description": "The encoding for which to determine the receiver's length.", "param_type": "UInt", "param_name": ["using", "enc"]}]}, {"return_value": {"return_description": ["The character at the array position given by index."], "return_name": [""], "return_type": ["unichar"]}, "method_description": "Returns the character at a given UTF-16 code unit index.", "method_name": "character", "class_name": "NSString", "params": [{"param_description": "The index of the character to retrieve.ImportantRaises an NSRangeException if index lies beyond the end of the receiver.", "param_type": "Int", "param_name": ["at", "index"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Copies characters from a given range in the receiver into a given buffer.", "method_name": "getCharacters", "class_name": "NSString", "params": [{"param_description": "Upon return, contains the characters from the receiver. buffer must be large enough to contain the characters in the range aRange (aRange.length*sizeof(unichar)).", "param_type": "UnsafeMutablePointer<unichar>", "param_name": ["buffer"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["range"]}]}, {"return_value": {"return_description": ["true if some characters were converted, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Gets a given range of characters as bytes in a specified encoding.", "method_name": "getBytes", "class_name": "NSString", "params": [{"param_description": "A buffer into which to store the bytes from the receiver. The returned bytes are not NULL-terminated.", "param_type": "UnsafeMutableRawPointer", "param_name": ["buffer"]}, {"param_description": "The maximum number of bytes to write to buffer.", "param_type": "Int", "param_name": ["maxLength", "maxBufferCount"]}, {"param_description": "The number of bytes used from buffer. Pass NULL if you do not need this value.", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["usedLength", "usedBufferCount"]}, {"param_description": "The encoding to use for the returned bytes. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["encoding"]}, {"param_description": "A mask to specify options to use for converting the receiver\u2019s contents to encoding (if conversion is necessary).", "param_type": "NSString.EncodingConversionOptions", "param_name": ["options"]}, {"param_description": "The range of characters in the receiver to get.", "param_type": "NSRange", "param_name": ["range"]}, {"param_description": "The remaining range. Pass NULL If you do not need this value.", "param_type": "NSRangePointer", "param_name": ["remaining", "leftover"]}]}, {"return_value": {"return_description": ["A C string representation of the receiver using the encoding specified by encoding. Returns NULL if the receiver cannot be losslessly converted to encoding."], "return_name": [""], "return_type": ["UnsafePointer<Int8>"]}, "method_description": "Returns a representation of the string as a C string using a given encoding.", "method_name": "cString", "class_name": "NSString", "params": [{"param_description": "The encoding for the returned C string. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["using", "encoding"]}]}, {"return_value": {"return_description": ["true if the operation was successful, otherwise false. Returns false if conversion is not possible due to encoding errors or if buffer is too small. "], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Converts the string to a given encoding and stores it in a buffer.", "method_name": "getCString", "class_name": "NSString", "params": [{"param_description": "Upon return, contains the converted C-string plus the NULL termination byte. The buffer must include room for maxBufferCount bytes.", "param_type": "UnsafeMutablePointer<Int8>", "param_name": ["buffer"]}, {"param_description": "The maximum number of bytes in the string to return in buffer (including the NULL termination byte). ", "param_type": "Int", "param_name": ["maxLength", "maxBufferCount"]}, {"param_description": "The encoding for the returned C string. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["encoding"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString. "], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Returns the result of invoking compare(_:options:) with NSCaseInsensitiveSearch as the only option.", "method_name": "caseInsensitiveCompare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Compares the string with a given string using a case-insensitive, localized, comparison. ", "method_name": "localizedCaseInsensitiveCompare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Returns the result of invoking compare(_:options:range:) with no options and the receiver\u2019s full extent as the range.", "method_name": "compare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Compares the string and a given string using a localized comparison.", "method_name": "localizedCompare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Compares the string with the specified string using the given options.", "method_name": "compare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}, {"param_description": "Options for the search\u2014you can combine any of the following using a C bitwise OR operator: caseInsensitive, literal, numeric. See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering. ComparisonResult.orderedAscending the receiver precedes aString in lexical ordering, ComparisonResult.orderedSame the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Returns the result of invoking compare(_:options:range:locale:) with a nil locale.", "method_name": "compare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}, {"param_description": "Options for the search\u2014you can combine any of the following using a C bitwise OR operator: NSCaseInsensitiveSearch, NSLiteralSearch, NSNumericSearch.See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}, {"param_description": "The range of the receiver over which to perform the comparison. The range must not exceed the bounds of the receiver.ImportantRaises an NSRangeException if range exceeds the bounds of the receiver.", "param_type": "NSRange", "param_name": ["range", "rangeOfReceiverToCompare"]}]}, {"return_value": {"return_description": ["Returns an ComparisonResult value that indicates the lexical ordering of a specified range within the receiver and a given string. ComparisonResult.orderedAscending if the substring of the receiver given by range precedes aString in lexical ordering for the locale given in dict, ComparisonResult.orderedSame if the substring of the receiver and aString are equivalent in lexical value, and ComparisonResult.orderedDescending if the substring of the receiver follows aString."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Compares the string using the specified options and returns the lexical ordering for the range.", "method_name": "compare", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["string"]}, {"param_description": "Options for the search\u2014you can combine any of the following using a C bitwise OR operator: NSCaseInsensitiveSearch, NSLiteralSearch, NSNumericSearch.See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}, {"param_description": "The range of the receiver over which to perform the comparison. The range must not exceed the bounds of the receiver.ImportantRaises an NSRangeException if range exceeds the bounds of the receiver.", "param_type": "NSRange", "param_name": ["range", "rangeOfReceiverToCompare"]}, {"param_description": "An instance of NSLocale. To use the current locale, pass [NSLocale current]. For example, if you are comparing strings to present to the end-user, use the current locale. To use the system locale, pass nil. ", "param_type": "Any", "param_name": ["locale"]}]}, {"return_value": {"return_description": ["The result of the comparison."], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Compares strings as sorted by the Finder.", "method_name": "localizedStandardCompare", "class_name": "NSString", "params": [{"param_description": "The string to compare with the receiver.", "param_type": "String", "param_name": ["string"]}]}, {"return_value": {"return_description": ["true if aString matches the beginning characters of the receiver, otherwise false. Returns false if aString is empty."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether a given string matches the beginning characters of the receiver.", "method_name": "hasPrefix", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["true if aString matches the ending characters of the receiver, otherwise false. Returns false if aString is empty. "], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether a given string matches the ending characters of the receiver. ", "method_name": "hasSuffix", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["true if aString is equivalent to the receiver (if they have the same id or if they are NSOrderedSame in a literal comparison), otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether a given string is equal to the receiver using a literal Unicode-based comparison.", "method_name": "isEqual", "class_name": "NSString", "params": [{"param_description": "The string with which to compare the receiver.", "param_type": "String", "param_name": ["to", "aString"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSString"]}, "method_description": "", "method_name": "appendingFormat", "class_name": "NSString", "params": [{"param_description": "", "param_type": "NSString", "param_name": ["format"]}, {"param_description": "", "param_type": "CVarArg...", "param_name": ["args"]}]}, {"return_value": {"return_description": ["A new string made by appending aString to the receiver."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made by appending a given string to the receiver.", "method_name": "appending", "class_name": "NSString", "params": [{"param_description": "The string to append to the receiver. This value must not be nil.ImportantRaises an NSInvalidArgumentException if aString is nil.", "param_type": "String", "param_name": ["aString"]}]}, {"return_value": {"return_description": ["A new string formed from the receiver by either removing characters from the end, or by appending as many occurrences of padString as necessary."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string formed from the receiver by either removing characters from the end, or by appending as many occurrences as necessary of a given pad string.", "method_name": "padding", "class_name": "NSString", "params": [{"param_description": "The new length for the receiver.", "param_type": "Int", "param_name": ["toLength", "newLength"]}, {"param_description": "The string with which to extend the receiver.", "param_type": "String", "param_name": ["withPad", "padString"]}, {"param_description": "The index in padString from which to start padding.", "param_type": "Int", "param_name": ["startingAt", "padIndex"]}]}, {"return_value": {"return_description": ["A lowercase string using the locale."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a version of the string with all letters converted to lowercase, taking into account the specified locale.", "method_name": "lowercased", "class_name": "NSString", "params": [{"param_description": "The locale. For strings presented to users, pass the current locale ([NSLocale current]). To use the system locale, pass nil. ", "param_type": "Locale", "param_name": ["with", "locale"]}]}, {"return_value": {"return_description": ["An uppercase string using the locale."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a version of the string with all letters converted to uppercase, taking into account the specified locale.", "method_name": "uppercased", "class_name": "NSString", "params": [{"param_description": "The locale. For strings presented to users, pass the current locale ([NSLocale current]). To use the system locale, pass nil. ", "param_type": "Locale", "param_name": ["with", "locale"]}]}, {"return_value": {"return_description": ["A string with the first character from each word in the receiver changed to its corresponding uppercase value, and all remaining characters set to their corresponding lowercase values."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a capitalized representation of the receiver using the specified locale.", "method_name": "capitalized", "class_name": "NSString", "params": [{"param_description": "The locale. For strings presented to users, pass the current locale ([NSLocale current]). To use the system locale, pass nil.", "param_type": "Locale", "param_name": ["with", "locale"]}]}, {"return_value": {"return_description": ["An NSArray object containing substrings from the receiver that have been divided by separator."], "return_name": [""], "return_type": ["[String]"]}, "method_description": "Returns an array containing substrings from the receiver that have been divided by a given separator.", "method_name": "components", "class_name": "NSString", "params": [{"param_description": "The separator string.", "param_type": "String", "param_name": ["separatedBy", "separator"]}]}, {"return_value": {"return_description": ["An NSArray object containing substrings from the receiver that have been divided by characters in separator."], "return_name": [""], "return_type": ["[String]"]}, "method_description": "Returns an array containing substrings from the receiver that have been divided by characters in a given set.", "method_name": "components", "class_name": "NSString", "params": [{"param_description": "A character set containing the characters to to use to split the receiver. Must not be nil.", "param_type": "CharacterSet", "param_name": ["separatedBy", "separator"]}]}, {"return_value": {"return_description": ["A new string made by removing from both ends of the receiver characters contained in set. If the receiver is composed entirely of characters from set, the empty string is returned."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made by removing from both ends of the receiver characters contained in a given character set.", "method_name": "trimmingCharacters", "class_name": "NSString", "params": [{"param_description": "A character set containing the characters to remove from the receiver. set must not be nil.", "param_type": "CharacterSet", "param_name": ["in", "set"]}]}, {"return_value": {"return_description": ["A new string containing the characters of the receiver from the one at anIndex to the end. If anIndex is equal to the length of the string, returns an empty string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string containing the characters of the receiver from the one at a given index to the end.", "method_name": "substring", "class_name": "NSString", "params": [{"param_description": "", "param_type": "Int", "param_name": ["from"]}]}, {"return_value": {"return_description": ["A string object containing the characters of the receiver that lie within aRange."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string object containing the characters of the receiver that lie within a given range.", "method_name": "substring", "class_name": "NSString", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["with", "range"]}]}, {"return_value": {"return_description": ["A new string containing the characters of the receiver up to, but not including, the one at anIndex. If anIndex is equal to the length of the string, returns a copy of the receiver."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string containing the characters of the receiver up to, but not including, the one at a given index.", "method_name": "substring", "class_name": "NSString", "params": [{"param_description": "", "param_type": "Int", "param_name": ["to"]}]}, {"return_value": {"return_description": ["A string created by performing a character folding operation with the specified options and locale."], "return_name": [""], "return_type": ["String"]}, "method_description": "Creates a string suitable for comparison by removing the specified character distinctions from a string.", "method_name": "folding", "class_name": "NSString", "params": [{"param_description": "Any combination of the  caseInsensitive, widthInsensitive, and diacriticInsensitive comparison options.", "param_type": "NSString.CompareOptions", "param_name": ["options"]}, {"param_description": "The locale to use for the folding operation. Pass nil to use the system locale.", "param_type": "Locale", "param_name": ["locale"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by applying a specified transform to the string.", "method_name": "applyingTransform", "class_name": "NSString", "params": [{"param_description": "", "param_type": "StringTransform", "param_name": ["transform"]}, {"param_description": "", "param_type": "Bool", "param_name": ["reverse"]}]}, {"return_value": {"return_description": ["true if the receiver contains str, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the string contains a given string by performing a case-sensitive, locale-unaware search.", "method_name": "contains", "class_name": "NSString", "params": [{"param_description": "The string to search for. This value must not be nil.", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["true if the receiver contains str, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the string contains a given string by performing a case-insensitive, locale-aware search.", "method_name": "localizedCaseInsensitiveContains", "class_name": "NSString", "params": [{"param_description": "The string to search for. This value must not be nil.", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["true if the receiver contains str, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the string contains a given string by performing a case and diacritic insensitive, locale-aware search.", "method_name": "localizedStandardContains", "class_name": "NSString", "params": [{"param_description": "The string to search for. This value must not be nil.", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["The range in the receiver of the first character found from aSet. Returns a range of {NSNotFound, 0} if none of the characters in aSet are found."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range in the string of the first character from a given character set.", "method_name": "rangeOfCharacter", "class_name": "NSString", "params": [{"param_description": "", "param_type": "CharacterSet", "param_name": ["from", "searchSet"]}]}, {"return_value": {"return_description": ["The range in the receiver of the first character found from aSet. Returns a range of {NSNotFound, 0} if none of the characters in aSet are found."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range in the string of the first character, using given options, from a given character set.", "method_name": "rangeOfCharacter", "class_name": "NSString", "params": [{"param_description": "", "param_type": "CharacterSet", "param_name": ["from", "searchSet"]}, {"param_description": "A mask specifying search options. The following options may be specified by combining them with the C bitwise OR operator: anchored, backwards.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}]}, {"return_value": {"return_description": ["The range in the receiver of the first character found from aSet within aRange. Returns a range of {NSNotFound, 0} if none of the characters in aSet are found."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range in the string of the first character from a given character set found in a given range with given options.", "method_name": "rangeOfCharacter", "class_name": "NSString", "params": [{"param_description": "", "param_type": "CharacterSet", "param_name": ["from", "searchSet"]}, {"param_description": "A mask specifying search options. The following options may be specified by combining them with the C bitwise OR operator: anchored, backwards.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["range", "rangeOfReceiverToSearch"]}]}, {"return_value": {"return_description": ["An NSRange structure giving the location and length in the receiver of the first occurrence of searchString. Returns {NSNotFound, 0} if searchString is not found or is empty (\"\")."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range of the first occurrence of a given string within the string.", "method_name": "range", "class_name": "NSString", "params": [{"param_description": "The string to search for.", "param_type": "String", "param_name": ["of", "searchString"]}]}, {"return_value": {"return_description": ["An NSRange structure giving the location and length in the receiver of the first occurrence of "], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range of the first occurrence of a given string within the string, subject to given options.", "method_name": "range", "class_name": "NSString", "params": [{"param_description": "The string to search for. ", "param_type": "String", "param_name": ["of", "searchString"]}, {"param_description": "A mask specifying search options. For possible values, see NSString.CompareOptions.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}]}, {"return_value": {"return_description": ["An NSRange structure giving the location and length in the receiver of "], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range of the first occurrence of a given string, within the given range of the string, subject to given options.", "method_name": "range", "class_name": "NSString", "params": [{"param_description": "The string for which to search.", "param_type": "String", "param_name": ["of", "searchString"]}, {"param_description": "A mask specifying search options. The following options may be specified by combining them with the C bitwise OR operator: NSCaseInsensitiveSearch, NSLiteralSearch, NSBackwardsSearch, and NSAnchoredSearch. See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}, {"param_description": "The range within the receiver for which to search for aString.Raises an NSRangeException if rangeOfReceiverToSearch is invalid.", "param_type": "NSRange", "param_name": ["range", "rangeOfReceiverToSearch"]}]}, {"return_value": {"return_description": ["An NSRange structure giving the location and length in the receiver of aString within aRange in the receiver, modulo the options in mask. The range returned is relative to the start of the string, not to the passed-in range. Returns {NSNotFound, 0} if aString is not found or is empty (\"\"). "], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range of the first occurrence of a given string within a given range of the string, subject to given options, using the specified locale, if any.", "method_name": "range", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["of", "searchString"]}, {"param_description": "A mask specifying search options. The following options may be specified by combining them with the C bitwise OR operator: NSCaseInsensitiveSearch, NSLiteralSearch, NSBackwardsSearch, and NSAnchoredSearch. See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["range", "rangeOfReceiverToSearch"]}, {"param_description": "The locale to use when comparing the receiver with aString. To use the current locale, pass [NSLocale current]. To use the system locale, pass nil.The locale argument affects the equality checking algorithm. For example, for the Turkish locale, case-insensitive compare matches \u201cI\u201d to \u201c\u0131\u201d (U+0131 LATIN SMALL DOTLESS I), not the normal \u201ci\u201d character.", "param_type": "Locale", "param_name": ["locale"]}]}, {"return_value": {"return_description": ["The range of the first occurrence of str in the receiver. Returns {NSNotFound, 0} if str is not found."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Finds and returns the range of the first occurrence of a given string within the string by performing a case and diacritic insensitive, locale-aware search.", "method_name": "localizedStandardRange", "class_name": "NSString", "params": [{"param_description": "The string to search for. This value must not be nil.", "param_type": "String", "param_name": ["of", "str"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Enumerates all the lines in the string.", "method_name": "enumerateLines", "class_name": "NSString", "params": [{"param_description": "The block executed for the enumeration.The block takes two arguments:lineThe current line of the string being enumerated. The line contains just the contents of the line, without the line terminators. See getLineStart(_:end:contentsEnd:for:) for a discussion of line terminators.stopA reference to a Boolean value that the block can use to stop the enumeration by setting *stop = YES; it should not touch *stop otherwise.", "param_type": "@escaping (String", "param_name": ["block"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Enumerates the substrings of the specified type in the specified range of the string.", "method_name": "enumerateSubstrings", "class_name": "NSString", "params": [{"param_description": "The range within the string to enumerate substrings.", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "Options specifying types of substrings and enumeration styles.", "param_type": "NSString.EnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "The block executed for the enumeration.The block takes four arguments:substringThe enumerated string.substringRangeThe range of the enumerated string in the receiver.enclosingRangeThe range that includes the substring as well as any separator or filler characters that follow. For instance, for lines, enclosingRange contains the line terminators. The enclosingRange for the first string enumerated also contains any characters that occur before the string. Consecutive enclosing ranges are guaranteed not to overlap, and every single character in the enumerated range is included in one and only one enclosing range.stopA reference to a Boolean value that the block can use to stop the enumeration by setting *stop = YES; it should not touch *stop otherwise.", "param_type": "@escaping (String", "param_name": ["using", "block"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["NSRange"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["NSRange"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["A new string in which all occurrences of target in the receiver are replaced by replacement."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string in which all occurrences of a target string in the receiver are replaced by another given string.", "method_name": "replacingOccurrences", "class_name": "NSString", "params": [{"param_description": "The string to replace.", "param_type": "String", "param_name": ["of", "target"]}, {"param_description": "The string with which to replace target.", "param_type": "String", "param_name": ["with", "replacement"]}]}, {"return_value": {"return_description": ["A new string in which all occurrences of target, matched using options, in searchRange of the receiver are replaced by replacement."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string in which all occurrences of a target string in a specified range of the receiver are replaced by another given string.", "method_name": "replacingOccurrences", "class_name": "NSString", "params": [{"param_description": "The string to replace.", "param_type": "String", "param_name": ["of", "target"]}, {"param_description": "The string with which to replace target.", "param_type": "String", "param_name": ["with", "replacement"]}, {"param_description": "A mask of options to use when comparing target with the receiver. Pass 0 to specify no options.", "param_type": "NSString.CompareOptions", "param_name": ["options"]}, {"param_description": "The range in the receiver in which to search for target.", "param_type": "NSRange", "param_name": ["range", "searchRange"]}]}, {"return_value": {"return_description": ["A new string in which the characters in range of the receiver are replaced by replacement."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string in which the characters in a specified range of the receiver are replaced by a given string.", "method_name": "replacingCharacters", "class_name": "NSString", "params": [{"param_description": "A range of characters in the receiver.", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "The string with which to replace the characters in range.", "param_type": "String", "param_name": ["with", "replacement"]}]}, {"return_value": {"return_description": ["A string containing characters the receiver and aString have in common, starting from the beginning of each up to the first characters that aren\u2019t equivalent."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string containing characters the receiver and a given string have in common, starting from the beginning of each up to the first characters that aren\u2019t equivalent.", "method_name": "commonPrefix", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["with", "str"]}, {"param_description": "Options for the comparison. The following search options may be specified by combining them with the C bitwise OR operator: NSCaseInsensitiveSearch, NSLiteralSearch. See String Programming Guide for details on these options.", "param_type": "NSString.CompareOptions", "param_name": ["options", "mask"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Performs linguistic analysis on the specified string by enumerating the specific range of the string, providing the Block with the located tags.", "method_name": "enumerateLinguisticTags", "class_name": "NSString", "params": [{"param_description": "The range of the string to analyze.", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "", "param_type": "NSLinguisticTagScheme", "param_name": ["scheme"]}, {"param_description": "", "param_type": "NSLinguisticTagger.Options", "param_name": ["options"]}, {"param_description": "The orthography of the string. If nil, the linguistic tagger will attempt to determine the orthography from the string content.", "param_type": "NSOrthography", "param_name": ["orthography"]}, {"param_description": "The Block to apply to the string.The block takes four arguments:tagThe tag scheme for the token. The opts parameter specifies the types of tagger options that are located.tokenRangeThe range of a string matching the tag scheme.sentenceRangeThe range of the sentence in which the token is found.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the array. The stop argument is an out-only argument. You should only ever set this Boolean to true within the Block.", "param_type": "(NSLinguisticTag", "param_name": ["using", "block"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["NSRange"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["NSRange"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["Returns an array containing the linguistic tags for the tokenRanges within the receiving string."], "return_name": [""], "return_type": ["[NSLinguisticTag]"]}, "method_description": "Returns an array of linguistic tags for the specified range and requested tags within the receiving string.", "method_name": "linguisticTags", "class_name": "NSString", "params": [{"param_description": "The range of the string to analyze.", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "", "param_type": "NSLinguisticTagScheme", "param_name": ["scheme"]}, {"param_description": "", "param_type": "NSLinguisticTagger.Options", "param_name": ["options"]}, {"param_description": "The orthography of the string. If nil, the linguistic tagger will attempt to determine the orthography from the string content.", "param_type": "NSOrthography", "param_name": ["orthography"]}, {"param_description": "An array returned by-reference containing the token ranges of the linguistic tags wrapped in NSValue objects.", "param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_name": ["tokenRanges"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Returns by reference the beginning of the first line and the end of the last line touched by the given range.", "method_name": "getLineStart", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["startPtr"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["end", "lineEndPtr"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["contentsEnd", "contentsEndPtr"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["for", "range"]}]}, {"return_value": {"return_description": ["The range of characters representing the line or lines containing aRange, including the line termination characters. See getLineStart(_:end:contentsEnd:for:) for a discussion of line terminators."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Returns the range of characters representing the line or lines containing a given range.", "method_name": "lineRange", "class_name": "NSString", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["for", "range"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Returns by reference the beginning of the first paragraph and the end of the last paragraph touched by the given range.", "method_name": "getParagraphStart", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["startPtr"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["end", "parEndPtr"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["contentsEnd", "contentsEndPtr"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["for", "range"]}]}, {"return_value": {"return_description": ["The range of characters representing the paragraph or paragraphs containing aRange, including the paragraph termination characters."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Returns the range of characters representing the paragraph or paragraphs containing a given range.", "method_name": "paragraphRange", "class_name": "NSString", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["for", "range"]}]}, {"return_value": {"return_description": ["The range in the receiver of the composed character sequence located at anIndex."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Returns the range in the receiver of the composed character sequence located at a given index.", "method_name": "rangeOfComposedCharacterSequence", "class_name": "NSString", "params": [{"param_description": "", "param_type": "Int", "param_name": ["at", "index"]}]}, {"return_value": {"return_description": ["The range in the receiver that includes the composed character sequences in range."], "return_name": [""], "return_type": ["NSRange"]}, "method_description": "Returns the range in the string of the composed character sequences for a given range.", "method_name": "rangeOfComposedCharacterSequences", "class_name": "NSString", "params": [{"param_description": "A range in the receiver. The range must not exceed the bounds of the receiver.", "param_type": "NSRange", "param_name": ["for", "range"]}]}, {"return_value": {"return_description": ["true if the file is written successfully, otherwise false (if there was a problem writing to the file or with the encoding)."], "return_name": [], "return_type": []}, "method_description": "Writes the contents of the receiver to a file at a given path using a given encoding. ", "method_name": "write", "class_name": "NSString", "params": [{"param_description": "The file to which to write the receiver. If path contains a tilde (~) character, you must expand it with expandingTildeInPath before invoking this method.", "param_type": "String", "param_name": ["toFile", "path"]}, {"param_description": "If true, the receiver is written to an auxiliary file, and then the auxiliary file is renamed to path. If false, the receiver is written directly to path. The true option guarantees that path, if it exists at all, won\u2019t be corrupted even if the system should crash during writing.", "param_type": "Bool", "param_name": ["atomically", "useAuxiliaryFile"]}, {"param_description": "The encoding to use for the output. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["encoding", "enc"]}]}, {"return_value": {"return_description": ["true if the URL is written successfully, otherwise false (if there was a problem writing to the URL or with the encoding)."], "return_name": [], "return_type": []}, "method_description": "Writes the contents of the receiver to the URL specified by url using the specified encoding. ", "method_name": "write", "class_name": "NSString", "params": [{"param_description": "The URL to which to write the receiver. Only file URLs are supported.", "param_type": "URL", "param_name": ["to", "url"]}, {"param_description": "If true, the receiver is written to an auxiliary file, and then the auxiliary file is renamed to url. If false, the receiver is written directly to url. The true option guarantees that url, if it exists at all, won\u2019t be corrupted even if the system should crash during writing.The useAuxiliaryFile parameter is ignored if url is not of a type that can be accessed atomically.", "param_type": "Bool", "param_name": ["atomically", "useAuxiliaryFile"]}, {"param_description": "The encoding to use for the output.", "param_type": "UInt", "param_name": ["encoding", "enc"]}]}, {"return_value": {"return_description": ["A property list representation of returning an NSString, NSData, NSArray, or NSDictionary object, according to the topmost element."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Parses the receiver as a text representation of a property list, returning an NSString, NSData, NSArray, or NSDictionary object, according to the topmost element.", "method_name": "propertyList", "class_name": "NSString", "params": []}, {"return_value": {"return_description": ["A dictionary object initialized with the keys and values found in the receiver"], "return_name": [["[AnyHashable"]], "return_type": ["Any]"]}, "method_description": "Returns a dictionary object initialized with the keys and values found in the receiver.", "method_name": "propertyListFromStringsFileFormat", "class_name": "NSString", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Draws the receiver with the font and other display characteristics of the given attributes, at the specified point in the current graphics context.", "method_name": "draw", "class_name": "NSString", "params": [{"param_description": "The point in the current graphics context where you want to start drawing the string. The coordinate system of the graphics context is usually defined by the view in which you are drawing. In AppKit, the origin is normally in the lower-left corner of the drawing area, but the origin is in the upper-left corner if the focused view is flipped.", "param_type": "CGPoint", "param_name": ["at", "point"]}, {"param_description": "A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["withAttributes", "attrs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Draws the attributed string inside the specified bounding rectangle. ", "method_name": "draw", "class_name": "NSString", "params": [{"param_description": "The bounding rectangle in which to draw the string. In AppKit, the origin of the bounding box is normally in the lower-left corner, but the origin is in the upper-left corner if the focused view is flipped.", "param_type": "CGRect", "param_name": ["in", "rect"]}, {"param_description": "The text attributes with which to draw the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["withAttributes", "attrs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Draws the attributed string in the specified bounding rectangle using the provided options.", "method_name": "draw", "class_name": "NSString", "params": [{"param_description": "The bounding rectangle in which to draw the string.", "param_type": "CGRect", "param_name": ["with", "rect"]}, {"param_description": "Additional drawing options to apply to the string during rendering. For a list of possible values, see NSStringDrawingOptions. ", "param_type": "NSStringDrawingOptions", "param_name": ["options"]}, {"param_description": "The text attributes with which to draw the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["attributes"]}, {"param_description": "A context object with information about how to adjust the font tracking and scaling information. On return, the specified object contains information about the actual values used to render the string. This parameter may be nil.  ", "param_type": "NSStringDrawingContext", "param_name": ["context"]}]}, {"return_value": {"return_description": ["The bounding rect for the receiver drawn using the given options and display characteristics. The rect origin returned from this method is the first glyph origin."], "return_name": [""], "return_type": ["CGRect"]}, "method_description": "Calculates and returns the bounding rect for the receiver drawn using the given options and display characteristics, within the specified rectangle in the current graphics context.", "method_name": "boundingRect", "class_name": "NSString", "params": [{"param_description": "The size of the rectangle to draw in.", "param_type": "CGSize", "param_name": ["with", "size"]}, {"param_description": "String drawing options.", "param_type": "NSStringDrawingOptions", "param_name": ["options"]}, {"param_description": "A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["attributes"]}, {"param_description": "The string drawing context to use for the receiver, specifying minimum scale factor and tracking adjustments.", "param_type": "NSStringDrawingContext", "param_name": ["context"]}]}, {"return_value": {"return_description": ["The bounding box size the receiver occupies when drawn with the specified attributes."], "return_name": [""], "return_type": ["CGSize"]}, "method_description": "Returns the bounding box size the receiver occupies when drawn with the given attributes.", "method_name": "size", "class_name": "NSString", "params": [{"param_description": "A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["withAttributes", "attrs"]}]}, {"return_value": {"return_description": ["A string variation, or the original string if no variations exist for the specified width.  "], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string variation suitable for the specified presentation width. ", "method_name": "variantFittingPresentationWidth", "class_name": "NSString", "params": [{"param_description": "The desired width of the string variation.", "param_type": "Int", "param_name": ["width"]}]}, {"return_value": {"return_description": ["An NSStringEncoding value, or 0 if a string encoding could not be determined."], "return_name": [""], "return_type": ["UInt"]}, "method_description": "Returns the string encoding for the given data as detected by attempting to create a string according to the specified encoding options.", "method_name": "stringEncoding", "class_name": "NSString", "params": [{"param_description": "An NSData object containing bytes in an encoding to be determined.", "param_type": "Data", "param_name": ["for", "data"]}, {"param_description": "Options to use when attempting to determine the string encoding. See String Encoding Detection Options for a full list of supported options.", "param_type": "Any]", "param_name": ["encodingOptions", "opts"]}, {"param_description": "If a string encoding could be determined, upon return contains an NSString object constructed from data using the determined string encoding.", "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["convertedString", "string"]}, {"param_description": "If a string encoding could be determined, upon return contains a BOOL value corresponding to whether lossy conversion was used.", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["usedLossyConversion"]}]}, {"return_value": {"return_description": ["A human-readable string giving the name of encoding in the current locale."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a human-readable string giving the name of a given encoding.", "method_name": "localizedName", "class_name": "NSString", "params": [{"param_description": "A string encoding. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["of", "encoding"]}]}, {"return_value": {"return_description": ["true if the receiver can be converted to encoding without loss of information. Returns false if characters would have to be changed or deleted in the process of changing encodings."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether the receiver can be converted to a given encoding without loss of information. ", "method_name": "canBeConverted", "class_name": "NSString", "params": [{"param_description": "A string encoding. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["to", "encoding"]}]}, {"return_value": {"return_description": ["The result of invoking data(using:allowLossyConversion:) with false as the second argument (that is, requiring lossless conversion)."], "return_name": [""], "return_type": ["Data"]}, "method_description": "Returns an NSData object containing a representation of the receiver encoded using a given encoding.", "method_name": "data", "class_name": "NSString", "params": [{"param_description": "A string encoding. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["using", "encoding"]}]}, {"return_value": {"return_description": ["An NSData object containing a representation of the receiver encoded using encoding. Returns nil if flag is false and the receiver can\u2019t be converted without losing some information (such as accents or case)."], "return_name": [""], "return_type": ["Data"]}, "method_description": "Returns an NSData object containing a representation of the receiver encoded using a given encoding.", "method_name": "data", "class_name": "NSString", "params": [{"param_description": "A string encoding. For possible values, see NSStringEncoding.", "param_type": "UInt", "param_name": ["using", "encoding"]}, {"param_description": "", "param_type": "Bool", "param_name": ["allowLossyConversion", "lossy"]}]}, {"return_value": {"return_description": ["A string built from the strings in components by concatenating them (in the order they appear in the array) with a path separator between each pair."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string built from the strings in a given array by concatenating them with a path separator between each pair.", "method_name": "path", "class_name": "NSString", "params": [{"param_description": "An array of NSString objects representing a file path. To create an absolute path, use a slash mark (\u201c/\u201d) as the first component. To include a trailing path divider, use an empty string as the last component. ", "param_type": "[String]", "param_name": ["withComponents", "components"]}]}, {"return_value": {"return_description": ["0 if no matches are found and 1 if exactly one match is found. In the case of multiple matches, returns the actual number of matching paths if outputArray is provided, or simply a positive value if outputArray is NULL. "], "return_name": [""], "return_type": ["Int"]}, "method_description": "Interprets the receiver as a path in the file system and attempts to perform filename completion, returning a numeric value that indicates whether a match was possible, and by reference the longest path that matches the receiver. ", "method_name": "completePath", "class_name": "NSString", "params": [{"param_description": "Upon return, contains the longest path that matches the receiver.", "param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["into", "outputName"]}, {"param_description": "If true, the method considers case for possible completions.", "param_type": "Bool", "param_name": ["caseSensitive", "flag"]}, {"param_description": "Upon return, contains all matching filenames. ", "param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_name": ["matchesInto", "outputArray"]}, {"param_description": "An array of NSString objects specifying path extensions to consider for completion. Only paths whose extensions (not including the extension separator) match one of these strings are included in outputArray. Pass nil if you don\u2019t want to filter the output.", "param_type": "[String]", "param_name": ["filterTypes"]}]}, {"return_value": {"return_description": ["true if buffer is successfully filled with a file-system representation, otherwise false (for example, if maxLength would be exceeded or if the receiver can\u2019t be represented in the file system\u2019s encoding)."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Interprets the receiver as a system-independent path and fills a buffer with a C-string in a format and encoding suitable for use with file-system calls.", "method_name": "getFileSystemRepresentation", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int8>", "param_name": ["cname"]}, {"param_description": "The maximum number of bytes in the string to return in buffer (including a terminating NULL character, which this method adds). ", "param_type": "Int", "param_name": ["maxLength", "max"]}]}, {"return_value": {"return_description": ["A new string made by appending aString to the receiver, preceded if necessary by a path separator."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made by appending to the receiver a given string.", "method_name": "appendingPathComponent", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["A new string made by appending to the receiver an extension separator followed by ext."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made by appending to the receiver an extension separator followed by a given extension.", "method_name": "appendingPathExtension", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["str"]}]}, {"return_value": {"return_description": ["An array of string objects made by separately appending each string in paths to the receiver, preceded if necessary by a path separator."], "return_name": [""], "return_type": ["[String]"]}, "method_description": "Returns an array of strings made by separately appending to the receiver each string in a given array.", "method_name": "strings", "class_name": "NSString", "params": [{"param_description": "An array of NSString objects specifying paths to add to the receiver.", "param_type": "[String]", "param_name": ["byAppendingPaths", "paths"]}]}, {"return_value": {"return_description": ["Returns the encoded string, or nil if the transformation is not possible."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made from the receiver by replacing all characters not in the specified set with percent-encoded characters.", "method_name": "addingPercentEncoding", "class_name": "NSString", "params": [{"param_description": "The characters not replaced in the string. Typically, you specify one of the predefined character sets for a particular URL component, such as urlPathAllowed or urlQueryAllowed.", "param_type": "CharacterSet", "param_name": ["withAllowedCharacters", "allowedCharacters"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Any"]}, "method_description": "Creates a new string using a given C-string.DeprecatedUse stringWithCString:encoding: instead.", "method_name": "string", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafePointer<Int8>", "param_name": ["withCString", "bytes"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns a string containing the characters in a given C-string. DeprecatedUse stringWithCString:encoding: instead.", "method_name": "string", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafePointer<Int8>", "param_name": ["withCString", "bytes"]}, {"param_description": "", "param_type": "Int", "param_name": ["length"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns a string created by reading data from the file named by a given path.DeprecatedUse stringWithContentsOfFile:encoding:error: or stringWithContentsOfFile:usedEncoding:error: instead.", "method_name": "string", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["withContentsOfFile", "path"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns a string created by reading data from the file named by a given URL. DeprecatedUse stringWithContentsOfURL:encoding:error: or stringWithContentsOfURL:usedEncoding:error: instead.", "method_name": "string", "class_name": "NSString", "params": [{"param_description": "", "param_type": "URL", "param_name": ["withContentsOf", "url"]}]}, {"return_value": {"return_description": ["true if the file is written successfully, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Writes the contents of the receiver to the file specified by a given path.DeprecatedUse write(toFile:atomically:encoding:) instead.", "method_name": "write", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["toFile", "path"]}, {"param_description": "", "param_type": "Bool", "param_name": ["atomically", "useAuxiliaryFile"]}]}, {"return_value": {"return_description": ["true if the location is written successfully, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Writes the contents of the receiver to the location specified by a given URL.DeprecatedUse write(to:atomically:encoding:) instead.", "method_name": "write", "class_name": "NSString", "params": [{"param_description": "", "param_type": "URL", "param_name": ["to", "url"]}, {"param_description": "", "param_type": "Bool", "param_name": ["atomically"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Copies all characters from the receiver into a given buffer.DeprecatedThis method is unsafe because it could potentially cause buffer overruns. Use getCharacters(_:range:) instead.", "method_name": "getCharacters", "class_name": "NSString", "params": [{"param_description": "Upon return, contains the characters from the receiver. buffer must be large enough to contain all characters in the string ([string length]*sizeof(unichar)).", "param_type": "UnsafeMutablePointer<unichar>", "param_name": ["buffer"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UnsafePointer<Int8>"]}, "method_description": "Returns a representation of the receiver as a C string in the default C-string encoding.DeprecatedUse cString(using:) or utf8String instead.", "method_name": "cString", "class_name": "NSString", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["UnsafePointer<Int8>"]}, "method_description": "Returns a representation of the receiver as a C string in the default C-string encoding, possibly losing information in converting to that encoding.DeprecatedUse cString(using:) or data(using:allowLossyConversion:) instead.", "method_name": "lossyCString", "class_name": "NSString", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the length in char-sized units of the receiver\u2019s C-string representation in the default C-string encoding.DeprecatedUse lengthOfBytes(using:) or maximumLengthOfBytes(using:) instead.", "method_name": "cStringLength", "class_name": "NSString", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Invokes getCString(_:maxLength:range:remaining:) with NSMaximumStringLength as the maximum length, the receiver\u2019s entire extent as the range, and NULL for the remaining range. DeprecatedUse cString(using:) or data(using:allowLossyConversion:) instead.", "method_name": "getCString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int8>", "param_name": ["bytes"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Invokes getCString(_:maxLength:range:remaining:) with maxLength as the maximum length in char-sized units, the receiver\u2019s entire extent as the range, and NULL for the remaining range. DeprecatedUse getCString(_:maxLength:encoding:) instead.", "method_name": "getCString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int8>", "param_name": ["bytes"]}, {"param_description": "", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Converts the receiver\u2019s content to the default C-string encoding and stores them in a given buffer. DeprecatedUse getCString(_:maxLength:encoding:) instead.", "method_name": "getCString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UnsafeMutablePointer<Int8>", "param_name": ["bytes"]}, {"param_description": "", "param_type": "Int", "param_name": ["maxLength"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["range", "aRange"]}, {"param_description": "", "param_type": "NSRangePointer", "param_name": ["remaining", "leftoverRange"]}]}, {"return_value": {"return_description": ["A representation of the receiver using encoding to determine the percent escapes necessary to convert the receiver into a legal URL string. Returns nil if encoding cannot encode a particular character."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a representation of the receiver using a given encoding to determine the percent escapes necessary to convert the receiver into a legal URL string.DeprecatedUse addingPercentEncoding(withAllowedCharacters:) instead.", "method_name": "addingPercentEscapes", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UInt", "param_name": ["using", "enc"]}]}, {"return_value": {"return_description": ["A new string made by replacing in the receiver all percent escapes with the matching characters as determined by the given encoding encoding. Returns nil if the transformation is not possible, for example, the percent escapes give a byte sequence not legal in encoding. "], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string made by replacing in the receiver all percent escapes with the matching characters as determined by a given encoding.DeprecatedUse removingPercentEncoding instead.", "method_name": "replacingPercentEscapes", "class_name": "NSString", "params": [{"param_description": "", "param_type": "UInt", "param_name": ["using", "enc"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Draws the receiver with the specified options and other display characteristics of the given attributes, within the specified rectangle in the current graphics context.", "method_name": "draw", "class_name": "NSString", "params": [{"param_description": "The rectangle in which to draw the string.", "param_type": "NSRect", "param_name": ["with", "rect"]}, {"param_description": "String drawing options.", "param_type": "NSString.DrawingOptions", "param_name": ["options"]}, {"param_description": "A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["attributes"]}]}, {"return_value": {"return_description": ["The bounding rect for the receiver drawn using the given options and display characteristics. The rect origin returned from this method is the first glyph origin."], "return_name": [""], "return_type": ["NSRect"]}, "method_description": "Calculates and returns the bounding rect for the receiver drawn using the given options and display characteristics, within the specified rectangle in the current graphics context.", "method_name": "boundingRect", "class_name": "NSString", "params": [{"param_description": "The size of the rectangle to draw in.", "param_type": "NSSize", "param_name": ["with", "size"]}, {"param_description": "String drawing options.", "param_type": "NSString.DrawingOptions", "param_name": ["options"]}, {"param_description": "A dictionary of text attributes to be applied to the string. These are the same attributes that can be applied to an NSAttributedString object, but in the case of NSString objects, the attributes apply to the entire string, rather than ranges within the string.", "param_type": "Any]", "param_name": ["attributes"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSString"]}, "method_description": "", "method_name": "deferredLocalizedIntentsString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["with", "format"]}, {"param_description": "", "param_type": "CVarArg...", "param_name": ["args"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSString"]}, "method_description": "", "method_name": "deferredLocalizedIntentsString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["with", "format"]}, {"param_description": "", "param_type": "String", "param_name": ["table"]}, {"param_description": "", "param_type": "CVarArg...", "param_name": ["args"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSString"]}, "method_description": "", "method_name": "deferredLocalizedIntentsString", "class_name": "NSString", "params": [{"param_description": "", "param_type": "String", "param_name": ["with", "format"]}, {"param_description": "", "param_type": "String", "param_name": ["table"]}, {"param_description": "", "param_type": "CVaListPointer", "param_name": ["arguments"]}]}], "package_name": "swift"}
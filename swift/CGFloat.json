{"package_name": "foundation", "interface_list": ["BinaryFloatingPoint", "CustomReflectable", "CustomStringConvertible", "Hashable", "SignedNumeric", "Strideable"], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addProduct", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The product of lhs and rhs, added to this value."]}, "method_name": "addingProduct", "class_name": "CGFloat", "method_description": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "advanced", "class_name": "CGFloat", "method_description": "Returns a Self x such that self.distance(to: x) approximates n.", "params": [{"param_type": "CGFloat", "param_name": ["by", "amount"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "distance", "class_name": "CGFloat", "method_description": "Returns a stride x such that self.advanced(by: x) approximates other.", "params": [{"param_type": "CGFloat", "param_name": ["to", "other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "Encoder", "param_name": ["to", "encoder"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formRemainder", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["dividingBy", "other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formSquareRoot", "class_name": "CGFloat", "method_description": "", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formTruncatingRemainder", "class_name": "CGFloat", "method_description": "Replace self with the remainder of self divided by other using truncating division. Similar to the C standard library function fmod.", "params": [{"param_type": "CGFloat", "param_name": ["dividingBy", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isEqual", "class_name": "CGFloat", "method_description": "IEEE 754 equality predicate.", "params": [{"param_type": "CGFloat", "param_name": ["to", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isLess", "class_name": "CGFloat", "method_description": "IEEE 754 less-than predicate.", "params": [{"param_type": "CGFloat", "param_name": ["than", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isLessThanOrEqualTo", "class_name": "CGFloat", "method_description": "IEEE 754 less-than-or-equal predicate.", "params": [{"param_type": "CGFloat", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false."]}, "method_name": "isTotallyOrdered", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.", "params": [{"param_type": "CGFloat", "param_name": ["belowOrEqualTo", "other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "negate", "class_name": "CGFloat", "method_description": "Replace self with its additive inverse.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "negate", "class_name": "CGFloat", "method_description": "Replaces this value with its additive inverse.", "params": []}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The remainder of this value divided by other."]}, "method_name": "remainder", "class_name": "CGFloat", "method_description": "Returns the remainder of this value divided by the given value.", "params": [{"param_type": "CGFloat", "param_name": ["dividingBy", "other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "round", "class_name": "CGFloat", "method_description": "Rounds this value to an integral value using \u201cschoolbook rounding.\u201d", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "round", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "FloatingPointRoundingRule", "param_name": ["rule"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude."]}, "method_name": "rounded", "class_name": "CGFloat", "method_description": "Returns this value rounded to an integral value using \u201cschoolbook rounding.\u201d", "params": []}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The integral value found by rounding using rule."]}, "method_name": "rounded", "class_name": "CGFloat", "method_description": "Returns this value rounded to an integral value using the specified rounding rule.", "params": [{"param_type": "FloatingPointRoundingRule", "param_name": ["rule"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The square root of the value."]}, "method_name": "squareRoot", "class_name": "CGFloat", "method_description": "Returns the square root of the value, rounded to a representable value.", "params": []}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The remainder of this value divided by other using truncating division."]}, "method_name": "truncatingRemainder", "class_name": "CGFloat", "method_description": "Returns the remainder of this value divided by the given value using truncating division.", "params": [{"param_type": "CGFloat", "param_name": ["dividingBy", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The greater of x and y, or whichever is a number if the other is NaN."]}, "method_name": "maximum", "class_name": "CGFloat", "method_description": "Returns the greater of the two given values.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN."]}, "method_name": "maximumMagnitude", "class_name": "CGFloat", "method_description": "Returns the value with greater magnitude.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The minimum of x and y, or whichever is a number if the other is NaN."]}, "method_name": "minimum", "class_name": "CGFloat", "method_description": "Returns the lesser of the two given values.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN."]}, "method_name": "minimumMagnitude", "class_name": "CGFloat", "method_description": "Returns the value with lesser magnitude.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["A random value within the bounds of range."]}, "method_name": "random", "class_name": "CGFloat", "method_description": "Returns a random value within the specified range.", "params": [{"param_type": "ClosedRange<CGFloat>", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["A random value within the bounds of range."]}, "method_name": "random", "class_name": "CGFloat", "method_description": "Returns a random value within the specified range.", "params": [{"param_type": "Range<CGFloat>", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["A random value within the bounds of range."]}, "method_name": "random", "class_name": "CGFloat", "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "params": [{"param_type": "ClosedRange<CGFloat>", "param_name": ["in", "range"], "param_description": ""}, {"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["A random value within the bounds of range."]}, "method_name": "random", "class_name": "CGFloat", "method_description": "Returns a random value within the specified range, using the given generator as a source for randomness.", "params": [{"param_type": "Range<CGFloat>", "param_name": ["in", "range"], "param_description": ""}, {"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "!=", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "*", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "*=", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "inout CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The given argument without any changes."]}, "method_name": "+", "class_name": "CGFloat", "method_description": "Returns the given number unchanged.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "+", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "+=", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "inout CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": ["The additive inverse of the argument."]}, "method_name": "-", "class_name": "CGFloat", "method_description": "Returns the additive inverse of the specified value.", "params": [{"param_type": "CGFloat", "param_name": ["operand"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "-", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "-=", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "inout CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["PartialRangeFrom<CGFloat>"], "return_name": [""], "return_description": []}, "method_name": "...", "class_name": "CGFloat", "method_description": "Returns a partial range extending upward from a lower bound.", "params": [{"param_type": "CGFloat", "param_name": ["minimum"], "param_description": ""}]}, {"return_value": {"return_type": ["PartialRangeThrough<CGFloat>"], "return_name": [""], "return_description": []}, "method_name": "...", "class_name": "CGFloat", "method_description": "Returns a partial range up to, and including, its upper bound.", "params": [{"param_type": "CGFloat", "param_name": ["maximum"], "param_description": ""}]}, {"return_value": {"return_type": ["ClosedRange<CGFloat>"], "return_name": [""], "return_description": []}, "method_name": "...", "class_name": "CGFloat", "method_description": "Returns a closed range that contains both of its bounds.", "params": [{"param_type": "CGFloat", "param_name": ["minimum"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["maximum"], "param_description": ""}]}, {"return_value": {"return_type": ["PartialRangeUpTo<CGFloat>"], "return_name": [""], "return_description": []}, "method_name": "..", "class_name": "CGFloat", "method_description": "Returns a partial range up to, but not including, its upper bound.", "params": [{"param_type": "CGFloat", "param_name": ["maximum"], "param_description": ""}]}, {"return_value": {"return_type": ["Range<CGFloat>"], "return_name": [""], "return_description": []}, "method_name": "..", "class_name": "CGFloat", "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "params": [{"param_type": "CGFloat", "param_name": ["minimum"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["maximum"], "param_description": ""}]}, {"return_value": {"return_type": ["CGFloat"], "return_name": [""], "return_description": []}, "method_name": "/", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "/=", "class_name": "CGFloat", "method_description": "", "params": [{"param_type": "inout CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether two values are equal.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether two values are equal.", "params": [{"param_type": "CGFloat", "param_name": ["x"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["y"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": ">", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": ">", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": ">=", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."]}, "method_name": ">=", "class_name": "CGFloat", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "params": [{"param_type": "CGFloat", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["rhs"], "param_description": ""}]}], "Vars": [{"var_type": "CGFloat", "var_description": "The least-magnitude member of the binade of self.", "var_name": "binade"}, {"var_type": "UInt", "var_description": "", "var_name": "bitPattern"}, {"var_type": "Mirror", "var_description": "A mirror that reflects the CGFloat instance.", "var_name": "customMirror"}, {"var_type": "String", "var_description": "A textual representation of self.", "var_name": "description"}, {"var_type": "Int", "var_description": "The integer part of the base-r logarithm of the magnitude of self, where r is the radix (2 for binary, 10 for decimal). Implements the IEEE 754 logB operation.", "var_name": "exponent"}, {"var_type": "UInt", "var_description": "The raw encoding of the exponent field of the floating-point value.", "var_name": "exponentBitPattern"}, {"var_type": "FloatingPointClassification", "var_description": "", "var_name": "floatingPointClass"}, {"var_type": "FloatingPointClassification", "var_description": "The classification of this value.", "var_name": "floatingPointClass"}, {"var_type": "Int", "var_description": "The hash value.", "var_name": "hashValue"}, {"var_type": "Bool", "var_description": "True if and only if self is canonical.", "var_name": "isCanonical"}, {"var_type": "Bool", "var_description": "true iff self is zero, subnormal, or normal (not infinity or NaN).", "var_name": "isFinite"}, {"var_type": "Bool", "var_description": "true iff self is infinity.", "var_name": "isInfinite"}, {"var_type": "Bool", "var_description": "true iff self is NaN.", "var_name": "isNaN"}, {"var_type": "Bool", "var_description": "true iff self is normal (not zero, subnormal, infinity, or NaN).", "var_name": "isNormal"}, {"var_type": "Bool", "var_description": "True if and only if self is a signaling NaN.", "var_name": "isSignalingNaN"}, {"var_type": "Bool", "var_description": "true iff self is subnormal.", "var_name": "isSubnormal"}, {"var_type": "Bool", "var_description": "true iff self is +0.0 or -0.0.", "var_name": "isZero"}, {"var_type": "CGFloat", "var_description": "", "var_name": "magnitude"}, {"var_type": "CGFloat.NativeType", "var_description": "The native value.", "var_name": "native"}, {"var_type": "CGFloat.NativeType", "var_description": "The native value.", "var_name": "native"}, {"var_type": "CGFloat", "var_description": "The greatest representable value that compares less than this value.", "var_name": "nextDown"}, {"var_type": "CGFloat", "var_description": "The least representable value that compares greater than self.", "var_name": "nextUp"}, {"var_type": "FloatingPointSign", "var_description": "minus if the sign bit of self is set, and plus otherwise. Implements the IEEE 754 signbit operation.", "var_name": "sign"}, {"var_type": "CGFloat", "var_description": "The significant digits, or mantissa, of the floating-point number.", "var_name": "significand"}, {"var_type": "UInt", "var_description": "The raw encoding of the significand field of the floating-point value.", "var_name": "significandBitPattern"}, {"var_type": "Int", "var_description": "The number of bits required to represent significand.", "var_name": "significandWidth"}, {"var_type": "CGFloat", "var_description": "The unit in the last place of self.", "var_name": "ulp"}, {"var_type": "Int", "var_description": "The number of bits used to represent the exponent.", "var_name": "exponentBitCount"}, {"var_type": "CGFloat", "var_description": "The greatest finite number.", "var_name": "greatestFiniteMagnitude"}, {"var_type": "CGFloat", "var_description": "The positive infinity.", "var_name": "infinity"}, {"var_type": "CGFloat", "var_description": "The least positive number.", "var_name": "leastNonzeroMagnitude"}, {"var_type": "CGFloat", "var_description": "The least positive normal number.", "var_name": "leastNormalMagnitude"}, {"var_type": "CGFloat", "var_description": "A quiet NaN.", "var_name": "nan"}, {"var_type": "CGFloat", "var_description": "The mathematical constant \u03c0 (3.14159\u2026).", "var_name": "pi"}, {"var_type": "Int", "var_description": "The radix, or base of exponentiation, for this floating-point type.", "var_name": "radix"}, {"var_type": "CGFloat", "var_description": "A signaling NaN (not-a-number).", "var_name": "signalingNaN"}, {"var_type": "Int", "var_description": "For fixed-width floating-point types, this is the number of fractional significand bits.", "var_name": "significandBitCount"}, {"var_type": "CGFloat", "var_description": "The unit in the last place of 1.0.", "var_name": "ulpOfOne"}], "subclass_list": [], "class_description": "The size and precision of this type depend on the CPU architecture. When you build for a 64-bit CPU, the CGFloat type is a 64-bit, IEEE double-precision floating point type, equivalent to the Double type. When you build for a 32-bit CPU, the CGFloat type is a 32-bit, IEEE single-precision floating point type, equivalent to the Float type. \n", "class_name": "CGFloat"}
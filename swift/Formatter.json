{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCoding", "NSCopying"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["An NSString object that textually represents object for display. Returns nil if object is not of the correct class."]}, "method_name": "string", "class_name": "Formatter", "method_description": "The default implementation of this method raises an exception.", "params": [{"param_type": "Any", "param_name": ["for", "obj"], "param_description": ""}]}, {"return_value": {"return_type": ["NSAttributedString"], "return_name": [""], "return_description": ["An attributed string that represents anObject."]}, "method_name": "attributedString", "class_name": "Formatter", "method_description": "The default implementation returns nil to indicate that the formatter object does not provide an attributed string.", "params": [{"param_type": "Any", "param_name": ["for", "obj"], "param_description": ""}, {"param_type": "Any]", "param_name": ["withDefaultAttributes", "attrs"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["An NSString object that is used for editing the textual representation of anObject."]}, "method_name": "editingString", "class_name": "Formatter", "method_description": "The default implementation of this method invokes string(for:).", "params": [{"param_type": "Any", "param_name": ["for", "obj"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the conversion from string to cell content object was successful, otherwise false."]}, "method_name": "getObjectValue", "class_name": "Formatter", "method_description": "The default implementation of this method raises an exception.", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<AnyObject>", "param_name": ["obj"], "param_description": ""}, {"param_type": "String", "param_name": ["for", "string"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["errorDescription", "error"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if partialString is an acceptable value, otherwise false."]}, "method_name": "isPartialStringValid", "class_name": "Formatter", "method_description": "Returns a Boolean value that indicates whether a partial string is valid.", "params": [{"param_type": "String", "param_name": ["partialString"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["newEditingString", "newString"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["errorDescription", "error"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if partialStringPtr is acceptable, otherwise false."]}, "method_name": "isPartialStringValid", "class_name": "Formatter", "method_description": "This method should be implemented in subclasses that want to validate user changes to a string in a field, where the user changes are not necessarily at the end of the string, and preserve the selection (or set a different one, such as selecting the erroneous part of the string the user has typed).", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["partialStringPtr"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["proposedSelectedRange", "proposedSelRangePtr"], "param_description": ""}, {"param_type": "String", "param_name": ["originalString", "origString"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["originalSelectedRange", "origSelRange"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSString>", "param_name": ["errorDescription", "error"], "param_description": ""}]}], "Vars": [], "subclass_list": [], "class_description": "The Foundation framework provides several concrete subclasses of Formatter, including ByteCountFormatter, DateFormatter, DateComponentsFormatter, DateIntervalFormatter, EnergyFormatter, LengthFormatter, MassFormatter, NumberFormatter, and PersonNameComponentsFormatter.\nNSFormatter is intended for subclassing. A custom formatter can restrict the input and enhance the display of data in novel ways. For example, you could have a custom formatter that ensures that serial numbers entered by a user conform to predefined formats. Before you decide to create a custom formatter, make sure that you cannot configure the public subclasses to satisfy your requirements.\nFor instructions on how to create your own custom formatter, see Creating a Custom Formatter.\n", "class_name": "Formatter"}
{"class_inherit_list": [], "Vars": [{"var_description": "", "var_type": "Int", "var_name": "hashValue"}], "class_name": "Dictionary.Index", "interface_list": [], "subclass_list": [], "class_description": "Dictionary has two subscripting interfaces:\nSubscripting with a key, yielding an optional value:\nSubscripting with an index, yielding a key-value pair:\n", "Methods": [{"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "hash", "class_name": "Dictionary.Index", "params": [{"param_description": "", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "Dictionary.Index", "params": [{"param_description": "A value to compare.", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "Another value to compare.", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["PartialRangeFrom<Dictionary<Key", "Value>.Index>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "Dictionary.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "Dictionary<Key", "param_name": ["minimum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["PartialRangeThrough<Dictionary<Key", "Value>.Index>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "Dictionary.Index", "params": [{"param_description": "The upper bound for the range.", "param_type": "Dictionary<Key", "param_name": ["maximum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["ClosedRange<Dictionary<Key", "Value>.Index>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "Dictionary.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "Dictionary<Key", "param_name": ["minimum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "The upper bound for the range.", "param_type": "Dictionary<Key", "param_name": ["maximum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["PartialRangeUpTo<Dictionary<Key", "Value>.Index>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "Dictionary.Index", "params": [{"param_description": "The upper bound for the range.", "param_type": "Dictionary<Key", "param_name": ["maximum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["Range<Dictionary<Key", "Value>.Index>"]}, "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "class_name": "Dictionary.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "Dictionary<Key", "param_name": ["minimum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "The upper bound for the range.", "param_type": "Dictionary<Key", "param_name": ["maximum"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "", "class_name": "Dictionary.Index", "params": [{"param_description": "", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "Dictionary.Index", "params": [{"param_description": "A value to compare.", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "Another value to compare.", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "Dictionary.Index", "params": [{"param_description": "", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "Dictionary.Index", "params": [{"param_description": "A value to compare.", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "Another value to compare.", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "Dictionary.Index", "params": [{"param_description": "A value to compare.", "param_type": "Dictionary<Key", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}, {"param_description": "Another value to compare.", "param_type": "Dictionary<Key", "param_name": ["rhs"]}, {"param_description": "", "param_type": "Value>.Index", "param_name": ["Value>.Index"]}]}], "package_name": "swift"}
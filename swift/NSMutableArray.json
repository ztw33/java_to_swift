{"class_inherit_list": ["NSArray"], "Vars": [], "class_name": "NSMutableArray", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "Sequence"], "subclass_list": [], "class_description": "The NSMutableArray class declares the programmatic interface to objects that manage a modifiable array of objects. This class adds insertion and deletion operations to the basic array-handling behavior inherited from NSArray.\nNSMutableArray is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFMutableArray. See Toll-Free Bridging for more information.\nIn addition to the provided instance methods, such as replaceObject(at:with:), you can access NSArray values by their indexes using subscripting.\nThere is typically little reason to subclass NSMutableArray. The class does well what it is designed to do\u2014maintain a mutable, ordered collection of objects. But there are situations where a custom NSArray object might come in handy. Here are a few possibilities:\nChanging how NSMutableArray stores the elements of its collection. You might do this for performance reasons or for better compatibility with legacy code.\nAcquiring more information about what is happening to the collection (for example, statistics gathering).\nNSMutableArray defines five primitive methods:\ninsert(_:at:)\nremoveObject(at:)\nadd(_:)\nremoveLastObject()\nreplaceObject(at:with:)\nIn a subclass, you must override all these methods. You must also override the primitive methods of the NSArray class.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Inserts a given object at the end of the array.", "method_name": "add", "class_name": "NSMutableArray", "params": [{"param_description": "The object to add to the end of the array\u2019s content. This value must not be nil.ImportantRaises an NSInvalidArgumentException if anObject is nil.", "param_type": "Any", "param_name": ["anObject"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds the objects contained in another given array to the end of the receiving array\u2019s content.", "method_name": "addObjects", "class_name": "NSMutableArray", "params": [{"param_description": "An array of objects to add to the end of the receiving array\u2019s content.", "param_type": "[Any]", "param_name": ["from", "otherArray"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Inserts a given object into the array\u2019s contents at a given index.", "method_name": "insert", "class_name": "NSMutableArray", "params": [{"param_description": "The object to add to the array's content. This value must not be nil.ImportantRaises an NSInvalidArgumentException if anObject is nil.", "param_type": "Any", "param_name": ["anObject"]}, {"param_description": "The index in the array at which to insert anObject. This value must not be greater than the count of elements in the array.ImportantRaises an NSRangeException if index is greater than the number of elements in the array.", "param_type": "Int", "param_name": ["at", "index"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Inserts the objects in the provided array into the receiving array at the specified indexes.", "method_name": "insert", "class_name": "NSMutableArray", "params": [{"param_description": "An array of objects to insert into the receiving array.", "param_type": "[Any]", "param_name": ["objects"]}, {"param_description": "The indexes at which the objects in objects should be inserted. The count of locations in indexes must equal the count of objects. For more details, see the Discussion.", "param_type": "IndexSet", "param_name": ["at", "indexes"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Empties the array of all its elements.", "method_name": "removeAllObjects", "class_name": "NSMutableArray", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes the object with the highest-valued index in the array ", "method_name": "removeLastObject", "class_name": "NSMutableArray", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes all occurrences in the array of a given object.", "method_name": "remove", "class_name": "NSMutableArray", "params": [{"param_description": "The object to remove from the array.", "param_type": "Any", "param_name": ["anObject"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes all occurrences within a specified range in the array of a given object. ", "method_name": "remove", "class_name": "NSMutableArray", "params": [{"param_description": "The object to be removed from the array\u2019s content.", "param_type": "Any", "param_name": ["anObject"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes the object at index .", "method_name": "removeObject", "class_name": "NSMutableArray", "params": [{"param_description": "The index from which to remove the object in the array. The value must not exceed the bounds of the array.ImportantRaises an exception NSRangeException if index is beyond the end of the array.", "param_type": "Int", "param_name": ["at", "index"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes the objects at the specified indexes from the array.", "method_name": "removeObjects", "class_name": "NSMutableArray", "params": [{"param_description": "The indexes of the objects to remove from the array. The locations specified by indexes must lie within the bounds of the array.", "param_type": "IndexSet", "param_name": ["at", "indexes"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes all occurrences of a given object in the array.", "method_name": "removeObject", "class_name": "NSMutableArray", "params": [{"param_description": "The object to remove from the array.", "param_type": "Any", "param_name": ["identicalTo", "anObject"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes all occurrences of anObject within the specified range in the array.", "method_name": "removeObject", "class_name": "NSMutableArray", "params": [{"param_description": "The object to remove from the array within aRange.", "param_type": "Any", "param_name": ["identicalTo", "anObject"]}, {"param_description": "", "param_type": "NSRange", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes the specified number of objects from the array, beginning at the specified index.DeprecatedDo not use this method, use removeObjects(at:) instead.", "method_name": "removeObjects", "class_name": "NSMutableArray", "params": [{"param_description": "A C array of the indices of the objects to remove from the receiving array.", "param_type": "UnsafeMutablePointer<Int>", "param_name": ["fromIndices", "indices"]}, {"param_description": "", "param_type": "Int", "param_name": ["numIndices", "cnt"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes from the receiving array the objects in another given array.", "method_name": "removeObjects", "class_name": "NSMutableArray", "params": [{"param_description": "An array containing the objects to be removed from the receiving array.", "param_type": "[Any]", "param_name": ["in", "otherArray"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes from the array each of the objects within a given range.", "method_name": "removeObjects", "class_name": "NSMutableArray", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["in", "range"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the object at index with anObject.", "method_name": "replaceObject", "class_name": "NSMutableArray", "params": [{"param_description": "The index of the object to be replaced. This value must not exceed the bounds of the array.ImportantRaises an NSRangeException if index is beyond the end of the array.", "param_type": "Int", "param_name": ["at", "index"]}, {"param_description": "The object with which to replace the object at index index in the array. This value must not be nil.ImportantRaises an NSInvalidArgumentException if anObject is nil.", "param_type": "Any", "param_name": ["with", "anObject"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the objects in the receiving array at locations specified with the objects from a given array.", "method_name": "replaceObjects", "class_name": "NSMutableArray", "params": [{"param_description": "The indexes of the objects to be replaced. ", "param_type": "IndexSet", "param_name": ["at", "indexes"]}, {"param_description": "The objects with which to replace the objects in the receiving array at the indexes specified by indexes. The count of locations in indexes must equal the count of objects.", "param_type": "[Any]", "param_name": ["with", "objects"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the objects in the receiving array specified by one given range with the objects in another array specified by another range. ", "method_name": "replaceObjects", "class_name": "NSMutableArray", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "The array of objects from which to select replacements for the objects in aRange. ", "param_type": "[Any]", "param_name": ["withObjectsFrom", "otherArray"]}, {"param_description": "The range of objects be selected from otherArray as replacements for the objects in aRange.", "param_type": "NSRange", "param_name": ["range", "otherRange"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the objects in the receiving array specified by a given range with all of the objects from a given array.", "method_name": "replaceObjects", "class_name": "NSMutableArray", "params": [{"param_description": "", "param_type": "NSRange", "param_name": ["in", "range"]}, {"param_description": "The array of objects from which to select replacements for the objects in aRange.", "param_type": "[Any]", "param_name": ["withObjectsFrom", "otherArray"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Sets the receiving array\u2019s elements to those in another given array.", "method_name": "setArray", "class_name": "NSMutableArray", "params": [{"param_description": "The array of objects with which to replace the receiving array\u2019s content.", "param_type": "[Any]", "param_name": ["otherArray"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Evaluates a given predicate against the array\u2019s content and leaves only objects that match.", "method_name": "filter", "class_name": "NSMutableArray", "params": [{"param_description": "The predicate to evaluate against the array\u2019s elements.", "param_type": "NSPredicate", "param_name": ["using", "predicate"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Exchanges the objects in the array at given indexes.", "method_name": "exchangeObject", "class_name": "NSMutableArray", "params": [{"param_description": "The index of the object with which to replace the object at index idx2.", "param_type": "Int", "param_name": ["at", "idx1"]}, {"param_description": "The index of the object with which to replace the object at index idx1.", "param_type": "Int", "param_name": ["withObjectAt", "idx2"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Sorts the receiver using a given array of sort descriptors.", "method_name": "sort", "class_name": "NSMutableArray", "params": [{"param_description": "An array containing the NSSortDescriptor objects to use to sort the receiving array\u2019s contents.", "param_type": "[NSSortDescriptor]", "param_name": ["using", "sortDescriptors"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Sorts the receiver in ascending order using the comparison method specified by a given Comparator block.", "method_name": "sort", "class_name": "NSMutableArray", "params": [{"param_description": "A comparator block.", "param_type": "(Any", "param_name": ["comparator", "cmptr"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ComparisonResult"]}, "method_description": "Sorts the receiver in ascending order using the specified options and the comparison method specified by a given Comparator block.", "method_name": "sort", "class_name": "NSMutableArray", "params": [{"param_description": "A bitmask that specifies the options for the sort (whether it should be performed concurrently and whether it should be performed stably).", "param_type": "NSSortOptions", "param_name": ["options", "opts"]}, {"param_description": "A comparator block.", "param_type": "(Any", "param_name": ["usingComparator", "cmptr"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}]}, {"return_value": {"return_description": [], "return_name": ["", ["context"]], "return_type": ["Int", "UnsafeMutableRawPointer"]}, "method_description": "Sorts the receiver in ascending order as defined by the comparison function compare.", "method_name": "sort", "class_name": "NSMutableArray", "params": [{"param_description": "The comparison function to use to compare two elements at a time.The function\u2019s parameters are two objects to compare and the context parameter, context. The function should return NSOrderedAscending if the first element is smaller than the second, NSOrderedDescending if the first element is larger than the second, and NSOrderedSame if the elements are equal.", "param_type": "(Any", "param_name": ["compare"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}, {"param_description": "", "param_type": "UnsafeMutableRawPointer", "param_name": ["UnsafeMutableRawPointer"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Sorts the receiver in ascending order, as determined by the comparison method specified by a given selector.", "method_name": "sort", "class_name": "NSMutableArray", "params": [{"param_description": "A selector that specifies the comparison method to use to compare elements in the array.The comparator message is sent to each object in the array and has as its single argument another object in the array. The comparator method should return NSOrderedAscending if the array is smaller than the argument, NSOrderedDescending if the array is larger than the argument, and NSOrderedSame if they are equal.", "param_type": "Selector", "param_name": ["using", "comparator"]}]}], "package_name": "swift"}
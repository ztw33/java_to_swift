{"class_inherit_list": [], "Vars": [{"var_description": "The offset into a string\u2019s UTF-16 encoding for this index.", "var_type": "Int", "var_name": "encodedOffset"}], "class_name": "String.Index", "interface_list": [], "subclass_list": [], "class_description": "", "Methods": [{"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "class_name": "String.Index", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}, {"return_value": {"return_description": ["The position in characters that corresponds exactly to this index. If this index does not have an exact corresponding position in characters, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil."], "return_name": [""], "return_type": ["String.Index"]}, "method_description": "Returns the position in the given string that corresponds exactly to this index.", "method_name": "samePosition", "class_name": "String.Index", "params": [{"param_description": "The string to use for the index conversion. This index must be a valid index of at least one view of characters.", "param_type": "String", "param_name": ["in", "characters"]}]}, {"return_value": {"return_description": ["The position in utf8 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf8, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil."], "return_name": [""], "return_type": ["String.UTF8View.Index"]}, "method_description": "Returns the position in the given UTF-8 view that corresponds exactly to this index.", "method_name": "samePosition", "class_name": "String.Index", "params": [{"param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf8.", "param_type": "String.UTF8View", "param_name": ["in", "utf8"]}]}, {"return_value": {"return_description": ["The position in unicodeScalars that corresponds exactly to this index. If this index does not have an exact corresponding position in unicodeScalars, this method returns nil. For example, an attempt to convert the position of a UTF-16 trailing surrogate returns nil."], "return_name": [""], "return_type": ["String.UnicodeScalarIndex"]}, "method_description": "Returns the position in the given view of Unicode scalars that corresponds exactly to this index.", "method_name": "samePosition", "class_name": "String.Index", "params": [{"param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by unicodeScalars.", "param_type": "String.UnicodeScalarView", "param_name": ["in", "unicodeScalars"]}]}, {"return_value": {"return_description": ["The position in utf16 that corresponds exactly to this index. If this index does not have an exact corresponding position in utf16, this method returns nil. For example, an attempt to convert the position of a UTF-8 continuation byte returns nil."], "return_name": [""], "return_type": ["String.UTF16View.Index"]}, "method_description": "Returns the position in the given UTF-16 view that corresponds exactly to this index.", "method_name": "samePosition", "class_name": "String.Index", "params": [{"param_description": "The view to use for the index conversion. This index must be a valid index of at least one view of the string shared by utf16.", "param_type": "String.UTF16View", "param_name": ["in", "utf16"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "String.Index", "params": [{"param_description": "A value to compare.", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "String.Index", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeFrom<String.Index>"]}, "method_description": "Returns a partial range extending upward from a lower bound.", "method_name": "...", "class_name": "String.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "String.Index", "param_name": ["minimum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeThrough<String.Index>"]}, "method_description": "Returns a partial range up to, and including, its upper bound.", "method_name": "...", "class_name": "String.Index", "params": [{"param_description": "The upper bound for the range.", "param_type": "String.Index", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<String.Index>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "String.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "String.Index", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "String.Index", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["PartialRangeUpTo<String.Index>"]}, "method_description": "Returns a partial range up to, but not including, its upper bound.", "method_name": "..", "class_name": "String.Index", "params": [{"param_description": "The upper bound for the range.", "param_type": "String.Index", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<String.Index>"]}, "method_description": "Returns a half-open range that contains its lower bound but not its upper bound.", "method_name": "..", "class_name": "String.Index", "params": [{"param_description": "The lower bound for the range.", "param_type": "String.Index", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "String.Index", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "", "class_name": "String.Index", "params": [{"param_description": "", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "", "param_type": "String.Index", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "class_name": "String.Index", "params": [{"param_description": "A value to compare.", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "String.Index", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "String.Index", "params": [{"param_description": "", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "", "param_type": "String.Index", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "class_name": "String.Index", "params": [{"param_description": "A value to compare.", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "String.Index", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if lhs is greater than or equal to rhs; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "class_name": "String.Index", "params": [{"param_description": "A value to compare.", "param_type": "String.Index", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "String.Index", "param_name": ["rhs"]}]}], "package_name": "swift"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["URLSessionTask"], "Methods": [{"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "cancel", "class_name": "URLSessionDownloadTask", "method_description": "Cancels a download and calls a callback with resume data for later use.", "params": [{"param_type": "@escaping (Data", "param_name": ["byProducingResumeData", "completionHandler"], "param_description": ""}]}], "Vars": [], "subclass_list": [], "class_description": "An URLSessionDownloadTask is a concrete subclass of URLSessionTask. Most of the methods associated with this class are documented in URLSessionTask.\nDownload tasks directly write the server\u2019s response data to a temporary file, providing your app with progress updates as data arrives from the server. When you use download tasks in background sessions, these downloads continue even when your app is suspended or is otherwise not running.\nYou can pause (cancel) download tasks and resume them later (assuming the server supports doing so). You can also resume downloads that failed because of network connectivity problems.\nWhen you use a download task, your delegate receives several callbacks unique to download scenarios.\nDuring download, the session periodically calls the delegate\u2019s urlSession(_:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:) method with status information.\nUpon successful completion, the session calls the delegate\u2019s urlSession(_:downloadTask:didFinishDownloadingTo:) method or completion handler. In that method, you must either open the file for reading or move it to a permanent location in your app\u2019s sandbox container directory.\nUpon unsuccessful completion, the session calls the delegate\u2019s urlSession(_:task:didCompleteWithError:) method or completion handler. Unlike URLSessionDataTask or URLSessionUploadTask,  a download task reports server-side errors reported through HTTP status codes into corresponding NSError objects. These errors are shown in Table 1.\n\nNSError Codes for Server-Side Download Errors  \nHTTPS Status\nNSError code\n401 Unauthorized\nNSURLErrorUserAuthenticationRequired\n403 Unauthorized\nNSURLErrorNoPermissionsToReadFile\n407 Proxy Authentication Required\nNSURLErrorUserAuthenticationRequired\n(other)\nNSURLErrorFileDoesNotExist\n\n\n", "class_name": "URLSessionDownloadTask"}
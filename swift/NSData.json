{"package_name": "foundation", "interface_list": ["CKRecordValueProtocol", "CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "dataWithContentsOfMappedFile", "class_name": "NSData", "method_description": "Creates a data object from the mapped file at a given path.", "params": [{"param_type": "String", "param_name": ["path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation succeeds, otherwise false."]}, "method_name": "write", "class_name": "NSData", "method_description": "Writes the data object's bytes to the file specified by a given path.", "params": [{"param_type": "String", "param_name": ["toFile", "path"], "param_description": ""}, {"param_type": "Bool", "param_name": ["atomically", "useAuxiliaryFile"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the operation succeeds, otherwise false."]}, "method_name": "write", "class_name": "NSData", "method_description": "Writes the data object's bytes to the file specified by a given path.", "params": [{"param_type": "String", "param_name": ["toFile", "path"], "param_description": ""}, {"param_type": "NSData.WritingOptions", "param_name": ["options", "writeOptionsMask"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation succeeds, otherwise false."]}, "method_name": "write", "class_name": "NSData", "method_description": "Writes the data object's bytes to the location specified by a given URL.", "params": [{"param_type": "URL", "param_name": ["to", "url"], "param_description": ""}, {"param_type": "Bool", "param_name": ["atomically"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the operation succeeds, otherwise false."]}, "method_name": "write", "class_name": "NSData", "method_description": "Writes the data object's bytes to the location specified by a given URL.", "params": [{"param_type": "URL", "param_name": ["to", "url"], "param_description": ""}, {"param_type": "NSData.WritingOptions", "param_name": ["options", "writeOptionsMask"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A Base64, UTF-8 encoded data object."]}, "method_name": "base64EncodedData", "class_name": "NSData", "method_description": "Creates a Base64, UTF-8 encoded data object from the string using the given options.", "params": [{"param_type": "NSData.Base64EncodingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A Base64 encoded string."]}, "method_name": "base64EncodedString", "class_name": "NSData", "method_description": "Creates a Base64 encoded string from the string using the given options.", "params": [{"param_type": "NSData.Base64EncodingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A Base-64 encoded string."]}, "method_name": "base64Encoding", "class_name": "NSData", "method_description": "Initializes a Base64 encoded string from the string.DeprecatedYou should transition to either base64EncodedString(options:) or base64EncodedData(options:)", "params": []}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateBytes", "class_name": "NSData", "method_description": "Enumerates each range of bytes in the data object using a block.", "params": [{"param_type": "(UnsafeRawPointer", "param_name": ["block"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["NSRange"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getBytes", "class_name": "NSData", "method_description": "Copies a data object\u2019s contents into a given buffer.DeprecatedThis method is unsafe because it could potentially cause buffer overruns. Use getBytes(_:length:) or getBytes(_:range:) instead.", "params": [{"param_type": "UnsafeMutableRawPointer", "param_name": ["buffer"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getBytes", "class_name": "NSData", "method_description": "Copies a number of bytes from the start of the data object into a given buffer. ", "params": [{"param_type": "UnsafeMutableRawPointer", "param_name": ["buffer"], "param_description": ""}, {"param_type": "Int", "param_name": ["length"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getBytes", "class_name": "NSData", "method_description": "Copies a range of bytes from the data object into a given buffer.", "params": [{"param_type": "UnsafeMutableRawPointer", "param_name": ["buffer"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["range"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A data object containing the receiver\u2019s bytes that fall within the limits specified by range."]}, "method_name": "subdata", "class_name": "NSData", "method_description": "Returns a new data object containing the data object's bytes that fall within the limits specified by a given range.", "params": [{"param_type": "NSRange", "param_name": ["with", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["An NSRange structure giving the location and length of dataToFind within searchRange, modulo the options in mask. The range returned is relative to the start of the searched data, not the passed-in search range. Returns {NSNotFound, 0} if dataToFind is not found or is empty."]}, "method_name": "range", "class_name": "NSData", "method_description": "Finds and returns the range of the first occurrence of the given data, within the given range, subject to given options.", "params": [{"param_type": "Data", "param_name": ["of", "dataToFind"], "param_description": ""}, {"param_type": "NSData.SearchOptions", "param_name": ["options", "mask"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["in", "searchRange"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the contents of otherData are equal to the contents of the receiver, otherwise false."]}, "method_name": "isEqual", "class_name": "NSData", "method_description": "Returns a Boolean value indicating whether this data object is the same as another.", "params": [{"param_type": "Data", "param_name": ["to", "other"], "param_description": ""}]}], "Vars": [{"var_type": "UnsafeRawPointer", "var_description": "A pointer to the data object's contents.", "var_name": "bytes"}, {"var_type": "Int", "var_description": "The number of bytes contained by the data object.", "var_name": "length"}, {"var_type": "String", "var_description": "A string that contains a hexadecimal representation of the data object\u2019s contents in a property list format.", "var_name": "description"}], "subclass_list": [], "class_description": "NSData and its mutable subclass NSMutableData provide data objects, or object-oriented wrappers for byte buffers. Data objects let simple allocated buffers (that is, data with no embedded pointers) take on the behavior of Foundation objects. \nThe size of the data is subject to a theoretical limit of about 8 exabytes (1 EB = 10\u00b9\u2078 bytes; in practice, the limit should not be a factor).\nNSData is toll-free bridged with its Core Foundation counterpart, CFData. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Data structure, which bridges to the NSData class and its mutable subclass NSMutableData. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nNSData provides methods for atomically saving their contents to a file, which guarantee that the data is either saved in its entirety, or it fails completely. An atomic write first writes the data to a temporary file and then, only if this write succeeds, moves the temporary file to its final location.\nAlthough atomic write operations minimize the risk of data loss due to corrupt or partially written files, they may not be appropriate when writing to a temporary directory, the user\u2019s home directory or other publicly accessible directories. When you work with a publicly accessible file, treat that file as an untrusted and potentially dangerous resource. An attacker may compromise or corrupt these files. The attacker can also replace the files with hard or symbolic links, causing your write operations to overwrite or corrupt other system resources.\nAvoid using the write(to:atomically:) method (and the related methods) when working inside a publicly accessible directory. Instead, use FileHandle with an existing file descriptor to securely write the file.\nFor more information, see Securing File Operations in Secure Coding Guide.\n", "class_name": "NSData"}
{"class_inherit_list": [], "Vars": [{"var_description": "A Boolean value indicating whether the range contains no elements.", "var_type": "Bool", "var_name": "isEmpty"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "var_name": "isEmpty"}, {"var_description": "The number of elements in the collection.", "var_type": "Int", "var_name": "count"}, {"var_description": "The range\u2019s lower bound.", "var_type": "Bound", "var_name": "lowerBound"}, {"var_description": "The range\u2019s upper bound.", "var_type": "Bound", "var_name": "upperBound"}, {"var_description": "The first element of the collection.", "var_type": "Bound", "var_name": "first"}, {"var_description": "The last element of the collection.", "var_type": "Bound", "var_name": "last"}, {"var_description": "A view onto this collection that provides lazy implementations of normally eager operations, such as map and filter.", "var_type": "LazyCollection<ClosedRange<Bound>>", "var_name": "lazy"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<ClosedRange<Bound>>", "var_name": "lazy"}, {"var_description": "A value less than or equal to the number of elements in the sequence, calculated nondestructively.", "var_type": "Int", "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "var_name": "underestimatedCount"}, {"var_description": "The position of the first element in the range.", "var_type": "ClosedRange<Bound>.Index", "var_name": "startIndex"}, {"var_description": "The range\u2019s \u201cpast the end\u201d position\u2014that is, the position one greater than the last valid subscript argument.", "var_type": "ClosedRange<Bound>.Index", "var_name": "endIndex"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "DefaultIndices<ClosedRange<Bound>>", "var_name": "indices"}, {"var_description": "A textual representation of the range.", "var_type": "String", "var_name": "description"}, {"var_description": "A textual representation of the range, suitable for debugging.", "var_type": "String", "var_name": "debugDescription"}, {"var_description": "", "var_type": "Mirror", "var_name": "customMirror"}], "class_name": "ClosedRange", "interface_list": ["BidirectionalCollection", "Collection", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "RandomAccessCollection", "RangeExpression", "Sequence"], "subclass_list": [], "class_description": "You create a ClosedRange instance by using the closed range operator (...).\nA ClosedRange instance contains both its lower bound and its upper bound.\nBecause a closed range includes its upper bound, a closed range whose lower bound is equal to the upper bound contains that value. Therefore, a ClosedRange instance cannot represent an empty range.\nWhen a closed range uses integers as its lower and upper bounds, or any other type that conforms to the Strideable protocol with an integer stride, you can use that range in a for-in loop or with any sequence or collection method. The elements of the range are the consecutive values from its lower bound up to, and including, its upper bound.\nBecause floating-point types such as Float and Double are their own Stride types, they cannot be used as the bounds of a countable range. If you need to iterate over consecutive floating-point values, see the stride(from:through:by:) function.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Self>"]}, "method_description": "Returns a closed range that contains both of its bounds.", "method_name": "...", "class_name": "ClosedRange", "params": [{"param_description": "The lower bound for the range.", "param_type": "Self", "param_name": ["minimum"]}, {"param_description": "The upper bound for the range.", "param_type": "Self", "param_name": ["maximum"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Range<Bound>"]}, "method_description": "", "method_name": "relative", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "Collection", "param_name": ["to", "collection"]}]}, {"return_value": {"return_description": ["true if element is contained in the range; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the given element is contained within the range.", "method_name": "contains", "class_name": "ClosedRange", "params": [{"param_description": "The element to check for containment.", "param_type": "Bound", "param_name": ["element"]}]}, {"return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Bound", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_type": "(Bound", "param_name": ["predicate"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "~=", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>", "param_name": ["pattern"]}, {"param_description": "", "param_type": "Bound", "param_name": ["value"]}]}, {"return_value": {"return_description": ["A new range clamped to the bounds of limits."], "return_name": [""], "return_type": ["ClosedRange<Bound>"]}, "method_description": "Returns a copy of this range clamped to the given limiting range.", "method_name": "clamped", "class_name": "ClosedRange", "params": [{"param_description": "The range to clamp the bounds of this range.", "param_type": "ClosedRange<Bound>", "param_name": ["to", "limits"]}]}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Bound"]}, "method_description": "Returns a random element of the collection.", "method_name": "randomElement", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Bound"]}, "method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "class_name": "ClosedRange", "params": [{"param_description": "The random number generator to use when choosing a random element.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Bound", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "class_name": "ClosedRange", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Bound", "param_name": ["of", "element"]}]}, {"return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Bound", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the last element of the sequence that satisfies the given predicate.", "method_name": "last", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Bound", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "Returns the last index where the specified value appears in the collection.", "method_name": "lastIndex", "class_name": "ClosedRange", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Bound", "param_name": ["of", "element"]}]}, {"return_value": {"return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the index of the last element in the collection that matches the given predicate.", "method_name": "lastIndex", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Bound", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bound"]}, "method_description": "Returns the minimum element in the sequence.", "method_name": "min", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bool rethrows -> Bound"]}, "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "class_name": "ClosedRange", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bound"]}, "method_description": "Returns the maximum element in the sequence.", "method_name": "max", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Bool rethrows -> Bound"]}, "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "class_name": "ClosedRange", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": ["An array of the elements that isIncluded allowed."], "return_name": [""], "return_type": ["Bool rethrows -> [Bound]"]}, "method_description": "Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.", "method_name": "filter", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array.", "param_type": "(Bound", "param_name": ["isIncluded"]}]}, {"return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "class_name": "ClosedRange", "params": [{"param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["through", "position"]}]}, {"return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "class_name": "ClosedRange", "params": [{"param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_type": "ClosedRange<Bound>.Index", "param_name": ["upTo", "end"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.", "method_name": "prefix", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be included or false if it should be excluded. Once the predicate returns false it will not be called again.", "param_type": "(Bound", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "class_name": "ClosedRange", "params": [{"param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "class_name": "ClosedRange", "params": [{"param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_type": "ClosedRange<Bound>.Index", "param_name": ["from", "start"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.", "method_name": "drop", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns true if the element should be skipped or false if it should be included. Once the predicate returns false it will not be called again.", "param_type": "(Bound", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence starting after the first element of the sequence."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence containing all but the first element of the sequence.", "method_name": "dropFirst", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "class_name": "ClosedRange", "params": [{"param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["A subsequence leaving off the last element of the sequence."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence containing all but the last element of the sequence.", "method_name": "dropLast", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A subsequence that leaves off k elements from the end."], "return_name": [""], "return_type": ["Slice<ClosedRange<Bound>>"]}, "method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "class_name": "ClosedRange", "params": [{"param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "ClosedRange", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Bound", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "ClosedRange", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Bound", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["ElementOfResult rethrows -> [ElementOfResult]"]}, "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "class_name": "ClosedRange", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Bound", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["String rethrows -> [String]"]}, "method_description": "", "method_name": "flatMap", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "(Bound", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "ClosedRange", "params": [{"param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_type": "Result", "param_name": ["initialResult"]}, {"param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_type": "(Result", "param_name": ["nextPartialResult"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "ClosedRange", "params": [{"param_description": "The value to use as the initial accumulating value.", "param_type": "Result", "param_name": ["into", "initialResult"]}, {"param_description": "A closure that updates the accumulating value with an element of the sequence.", "param_type": "(inout Result", "param_name": ["updateAccumulatingResult"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "class_name": "ClosedRange", "params": [{"param_description": "A closure that takes an element of the sequence as a parameter.", "param_type": "(Bound", "param_name": ["body"]}]}, {"return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<ClosedRange<Bound>>"]}, "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["IndexingIterator<ClosedRange<Bound>>"]}, "method_description": "Returns an iterator over the elements of the collection.", "method_name": "makeIterator", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Bound]"]}, "method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["Bool rethrows -> [Bound]"]}, "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "class_name": "ClosedRange", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ReversedCollection<ClosedRange<Bound>>"]}, "method_description": "Returns a view presenting the elements of the collection in reverse order.", "method_name": "reversed", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Bound]"]}, "method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Bound]"]}, "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "class_name": "ClosedRange", "params": [{"param_description": "The random number generator to use when shuffling the sequence.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A flattened view of the elements of this collection of collections."], "return_name": [""], "return_type": ["FlattenCollection<ClosedRange<Bound>>"]}, "method_description": "Returns the elements of this collection of collections, concatenated.", "method_name": "joined", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": [""], "return_type": ["FlattenSequence<ClosedRange<Bound>>"]}, "method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "class_name": "ClosedRange", "params": []}, {"return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<ClosedRange<Bound>>"]}, "method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_type": "Sequence", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "ClosedRange", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "ClosedRange", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "method_name": "split", "class_name": "ClosedRange", "params": [{"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}, {"param_description": "A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.", "param_type": "(Bound", "param_name": ["whereSeparator", "isSeparator"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[Slice<ClosedRange<Bound>>]"]}, "method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "class_name": "ClosedRange", "params": [{"param_description": "The element that should be split upon.", "param_type": "Bound", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two ranges are equal.", "method_name": "==", "class_name": "ClosedRange", "params": [{"param_description": "A range to compare.", "param_type": "ClosedRange<Bound>", "param_name": ["lhs"]}, {"param_description": "Another range to compare.", "param_type": "ClosedRange<Bound>", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "ClosedRange", "params": [{"param_description": "A value to compare.", "param_type": "ClosedRange<Bound>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "ClosedRange<Bound>", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["true if this range and other have at least one element in common; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this range and the given range contain an element in common.", "method_name": "overlaps", "class_name": "ClosedRange", "params": [{"param_description": "A range to check for elements in common.", "param_type": "Range<ClosedRange<Bound>.Bound>", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this range and other have at least one element in common; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this range and the given range contain an element in common.", "method_name": "overlaps", "class_name": "ClosedRange", "params": [{"param_description": "A range to check for elements in common.", "param_type": "ClosedRange<ClosedRange<Bound>.Bound>", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Bound", "param_name": ["Bound"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "class_name": "ClosedRange", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Bound", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "", "method_name": "index", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the given index with its successor.", "method_name": "formIndex", "class_name": "ClosedRange", "params": [{"param_description": "A valid index of the collection. i must be less than endIndex.", "param_type": "inout ClosedRange<Bound>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "", "method_name": "index", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["before", "i"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the given index with its predecessor.", "method_name": "formIndex", "class_name": "ClosedRange", "params": [{"param_description": "A valid index of the collection. i must be greater than startIndex.", "param_type": "inout ClosedRange<Bound>.Index", "param_name": ["before", "i"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "", "method_name": "index", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "distance"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Offsets the given index by the specified distance.", "method_name": "formIndex", "class_name": "ClosedRange", "params": [{"param_description": "A valid index of the collection.", "param_type": "inout ClosedRange<Bound>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}]}, {"return_value": {"return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": [""], "return_type": ["ClosedRange<Bound>.Index"]}, "method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "class_name": "ClosedRange", "params": [{"param_description": "A valid index of the array.", "param_type": "ClosedRange<Bound>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}, {"param_description": "A valid index of the collection to use as a limit. If distance > 0, limit should be greater than i to have any effect. Likewise, if distance < 0, limit should be less than i to have any effect.", "param_type": "ClosedRange<Bound>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "method_name": "formIndex", "class_name": "ClosedRange", "params": [{"param_description": "A valid index of the collection.", "param_type": "inout ClosedRange<Bound>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}, {"param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_type": "ClosedRange<Bound>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "method_description": "", "method_name": "distance", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["from", "start"]}, {"param_description": "", "param_type": "ClosedRange<Bound>.Index", "param_name": ["to", "end"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "hash", "class_name": "ClosedRange", "params": [{"param_description": "", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}], "package_name": "swift"}
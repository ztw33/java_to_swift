{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSItemProviderReading", "NSItemProviderWriting", "NSMutableCopying", "NSPasteboardReading", "NSPasteboardWriting", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Any]"], "return_name": [["[NSAttributedString.Key"]], "return_description": ["The attributes for the character at index."]}, "method_name": "attributes", "class_name": "NSAttributedString", "method_description": "Returns the attributes for the character at a given index.", "params": [{"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["effectiveRange", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[NSAttributedString.Key"]], "return_description": []}, "method_name": "attributes", "class_name": "NSAttributedString", "method_description": "Returns the attributes for the character at a given index, and by reference the range over which the attributes apply.", "params": [{"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["longestEffectiveRange", "range"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["in", "rangeLimit"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The value for the attribute named attrName of the character at location, or nil if there is no such attribute."]}, "method_name": "attribute", "class_name": "NSAttributedString", "method_description": "Returns the value for an attribute with a given name of the character at a given index, and by reference the range over which the attribute applies. ", "params": [{"param_type": "NSAttributedString.Key", "param_name": ["attrName"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["effectiveRange", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The value for the attribute named attributeName of the character at index, or nil if there is no such attribute."]}, "method_name": "attribute", "class_name": "NSAttributedString", "method_description": "Returns the value for the attribute with a given name of the character at a given index, and by reference the range over which the attribute applies.", "params": [{"param_type": "NSAttributedString.Key", "param_name": ["attrName"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["longestEffectiveRange", "range"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["in", "rangeLimit"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the receiver is equal to otherString, otherwise false."]}, "method_name": "isEqual", "class_name": "NSAttributedString", "method_description": "Returns a Boolean value that indicates whether the receiver is equal to another given attributed string.", "params": [{"param_type": "NSAttributedString", "param_name": ["to", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["NSAttributedString"], "return_name": [""], "return_description": ["An NSAttributedString object consisting of the characters and attributes within aRange in the receiver."]}, "method_name": "attributedSubstring", "class_name": "NSAttributedString", "method_description": "Returns an NSAttributedString object consisting of the characters and attributes within a given range in the receiver.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateAttribute", "class_name": "NSAttributedString", "method_description": "Executes the specified closure for each range of a particular attribute in the attributed string. ", "params": [{"param_type": "NSAttributedString.Key", "param_name": ["attrName"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["in", "enumerationRange"], "param_description": ""}, {"param_type": "NSAttributedString.EnumerationOptions", "param_name": ["options", "opts"], "param_description": ""}, {"param_type": "(Any", "param_name": ["using", "block"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["NSRange"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateAttributes", "class_name": "NSAttributedString", "method_description": "Executes the specified closure for each range of attributes in the attributed string.", "params": [{"param_type": "NSRange", "param_name": ["in", "enumerationRange"], "param_description": ""}, {"param_type": "NSAttributedString.EnumerationOptions", "param_name": ["options", "opts"], "param_description": ""}, {"param_type": "Any]", "param_name": ["using", "block"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["NSRange"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[NSAttributedString.Key"]], "return_description": ["A dictionary containing the font attributes for the range."]}, "method_name": "fontAttributes", "class_name": "NSAttributedString", "method_description": "Returns the font attributes in effect for the character at the given location.", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[NSAttributedString.Key"]], "return_description": ["A dictionary containing the ruler attributes in the range."]}, "method_name": "rulerAttributes", "class_name": "NSAttributedString", "method_description": "Returns the ruler (paragraph) attributes in effect for the characters within the given range.", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["Returns the range of characters that form a word (or other linguistic unit) surrounding the given index, taking language characteristics into account."]}, "method_name": "doubleClick", "class_name": "NSAttributedString", "method_description": "Returns the range of characters that form a word (or other linguistic unit) surrounding the given index, taking language characteristics into account.", "params": [{"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["Returns the index of the closest character before index within aRange, that can be placed on a new line when laying out text. Returns NSNotFound if no line break is possible before index."]}, "method_name": "lineBreak", "class_name": "NSAttributedString", "method_description": "Returns the appropriate line break when the character at the index won\u2019t fit on the same line as the character at the beginning of the range.", "params": [{"param_type": "Int", "param_name": ["before", "location"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["within", "aRange"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["Returns the index of the closest character before  index within aRange, that can be placed on a new line by hyphenating. Returns NSNotFound if no line break by hyphenation is possible before index."]}, "method_name": "lineBreakByHyphenating", "class_name": "NSAttributedString", "method_description": "Returns the index of the closest character before the given index, and within the given range, that can be placed on a new line by hyphenating.", "params": [{"param_type": "Int", "param_name": ["before", "location"], "param_description": ""}, {"param_type": "NSRange", "param_name": ["within", "aRange"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["true if this is the first character after index that begins a word; if flag is false, it\u2019s the first character before index that begins a word, whether index is located within a word or not."]}, "method_name": "nextWord", "class_name": "NSAttributedString", "method_description": "Returns the index of the first character of the word after or before the given index.", "params": [{"param_type": "Int", "param_name": ["from", "location"], "param_description": ""}, {"param_type": "Bool", "param_name": ["forward", "isForward"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["Returns the index within the list."]}, "method_name": "itemNumber", "class_name": "NSAttributedString", "method_description": "Returns the index of the item at the given location within the list.", "params": [{"param_type": "NSTextList", "param_name": ["in", "list"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The range of the text block containing the location."]}, "method_name": "range", "class_name": "NSAttributedString", "method_description": "Returns the range of the individual text block that contains the given location.", "params": [{"param_type": "NSTextBlock", "param_name": ["of", "block"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The range of the given text list containing the location."]}, "method_name": "range", "class_name": "NSAttributedString", "method_description": "Returns the range of the given text list that contains the given location.", "params": [{"param_type": "NSTextList", "param_name": ["of", "list"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["Returns the range of table that contains location."]}, "method_name": "range", "class_name": "NSAttributedString", "method_description": "Returns the range of the given text table that contains the given location", "params": [{"param_type": "NSTextTable", "param_name": ["of", "table"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["Returns the data for the attributed string, or nil if failure. When nil, error encapsulates the error information."]}, "method_name": "data", "class_name": "NSAttributedString", "method_description": "Returns an data object that contains a text stream corresponding to the characters and attributes within the given range.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": ["FileWrapper"], "return_name": [""], "return_description": ["Returns a file wrapper for the appropriate document type, or nil if failure. When nil, error encapsulates the error information."]}, "method_name": "fileWrapper", "class_name": "NSAttributedString", "method_description": "Returns an NSFileWrapper object that contains a text stream corresponding to the characters and attributes within the given range.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["Returns a data object containing the attributed string as a Microsoft Word doc file."]}, "method_name": "docFormat", "class_name": "NSAttributedString", "method_description": "Returns a data object that contains a Microsoft Word\u2013format stream corresponding to the characters and attributes within the specified range.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A data object containing an RTF stream for the attributed string."]}, "method_name": "rtf", "class_name": "NSAttributedString", "method_description": "Returns an NSData object that contains an RTF stream corresponding to the characters and attributes within the given range, omitting all attachment attributes.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A data object containing the RTFD stream containing the characters and attributes."]}, "method_name": "rtfd", "class_name": "NSAttributedString", "method_description": "Returns a data object that contains an RTFD stream corresponding to the characters and attributes within the range.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": ["FileWrapper"], "return_name": [""], "return_description": ["A file wrapper containing the RTFD data."]}, "method_name": "rtfdFileWrapper", "class_name": "NSAttributedString", "method_description": "Returns an NSFileWrapper object that contains an RTFD document corresponding to the characters and attributes within the given range.", "params": [{"param_type": "NSRange", "param_name": ["from", "range"], "param_description": ""}, {"param_type": "]", "param_name": ["documentAttributes", "dict"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "draw", "class_name": "NSAttributedString", "method_description": "Draws the attributed string starting at the specified point in the current graphics context.", "params": [{"param_type": "CGPoint", "param_name": ["at", "point"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "draw", "class_name": "NSAttributedString", "method_description": "Draws the attributed string inside the specified bounding rectangle in the current graphics context.", "params": [{"param_type": "CGRect", "param_name": ["in", "rect"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "draw", "class_name": "NSAttributedString", "method_description": "Draws the attributed string in the specified bounding rectangle using the provided options.", "params": [{"param_type": "CGRect", "param_name": ["with", "rect"], "param_description": ""}, {"param_type": "NSStringDrawingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSStringDrawingContext", "param_name": ["context"], "param_description": ""}]}, {"return_value": {"return_type": ["CGSize"], "return_name": [""], "return_description": ["The minimum size required to draw the entire contents of the string. "]}, "method_name": "size", "class_name": "NSAttributedString", "method_description": "Returns the size required to draw the string.", "params": []}, {"return_value": {"return_type": ["CGRect"], "return_name": [""], "return_description": ["A rectangle whose size component indicates the width and height required to draw the entire contents of the string. "]}, "method_name": "boundingRect", "class_name": "NSAttributedString", "method_description": "Returns the bounding rectangle required to draw the string.", "params": [{"param_type": "CGSize", "param_name": ["with", "size"], "param_description": ""}, {"param_type": "NSStringDrawingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "NSStringDrawingContext", "param_name": ["context"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the attributed string contains a property configured as attachment with character in range; otherwise, false."]}, "method_name": "containsAttachments", "class_name": "NSAttributedString", "method_description": "Returns a Boolean value that indicates if the attributed string contains a property configured in the specified range.", "params": [{"param_type": "NSRange", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The URL found at location."]}, "method_name": "url", "class_name": "NSAttributedString", "method_description": "Returns a URL, either from a link attribute or from text at the given location that appears to be a URL string, for use in automatic link detection.DeprecatedUse an NSDataDetector object instead.", "params": [{"param_type": "Int", "param_name": ["at", "location"], "param_description": ""}, {"param_type": "NSRangePointer", "param_name": ["effectiveRange"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "draw", "class_name": "NSAttributedString", "method_description": "Draws the receiver with the specified options, within the given rectangle in the current graphics context.DeprecatedUse draw(with:options:context:) instead.", "params": [{"param_type": "NSRect", "param_name": ["with", "rect"], "param_description": ""}, {"param_type": "NSString.DrawingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRect"], "return_name": [""], "return_description": ["The bounding rectangle in the current graphics context."]}, "method_name": "boundingRect", "class_name": "NSAttributedString", "method_description": "Calculates and returns bounding rectangle for the receiver drawn using the options specified, within the given rectangle in the current graphics context.DeprecatedUse boundingRect(with:options:context:) instead.", "params": [{"param_type": "NSSize", "param_name": ["with", "size"], "param_description": ""}, {"param_type": "NSString.DrawingOptions", "param_name": ["options"], "param_description": ""}]}], "Vars": [{"var_type": "String", "var_description": "The character contents of the receiver as an NSString object.", "var_name": "string"}, {"var_type": "Int", "var_description": "The length of the receiver\u2019s string object.", "var_name": "length"}, {"var_type": "[String]", "var_description": "Returns an array of UTI strings identifying the file types supported by the receiver, either directly or through a user-installed filter service. ", "var_name": "textTypes"}, {"var_type": "[String]", "var_description": "Returns an array of UTI strings identifying the file types supported directly by the receiver. ", "var_name": "textUnfilteredTypes"}, {"var_type": "NSAttributedString.DocumentAttributeKey", "var_description": "An NSArray object containing NSString objects, representing HTML elements not to be used in generated HTML.", "var_name": "excludedElements"}, {"var_type": "NSAttributedString.DocumentAttributeKey", "var_description": "An NSString object containing the name, IANA or otherwise, of a text encoding to be used; mutually exclusive with characterEncoding.", "var_name": "textEncodingName"}, {"var_type": "NSAttributedString.DocumentAttributeKey", "var_description": "An NSNumber object containing an integer (default 0) representing the number of spaces per level by which to indent certain nested HTML elements.", "var_name": "prefixSpaces"}, {"var_type": "Bool", "var_description": "Returns whether the attribute string contains any attachment attributes.DeprecatedUse containsAttachments(in:) instead.", "var_name": "containsAttachments"}], "subclass_list": [], "class_description": "An NSAttributedString object manages character strings and associated sets of attributes (for example, font and kerning) that apply to individual characters or ranges of characters in the string. An association of characters and their attributes is called an attributed string. The cluster\u2019s two public classes, NSAttributedString and NSMutableAttributedString, declare the programmatic interface for read-only attributed strings and modifiable attributed strings, respectively.\nAn attributed string identifies attributes by name, using an NSDictionary object to store a value under the given name.  You can assign any attribute name/value pair you wish to a range of characters\u2014it is up to your application to interpret custom attributes (see Attributed String Programming Guide). If you are using attributed strings with the Core Text framework, you can also use the attribute keys defined by that framework. \nYou use attributed strings with any APIs that accept them, such as Core Text. The AppKit and UIKit frameworks also provide a subclass of NSMutableAttributedString, called NSTextStorage, to provide the storage for the extended text-handling system. In iOS 6 and later you can use attributed strings to display formatted text in text views, text fields, and some other controls. Both AppKit and UIKit also define extensions to the basic attributed string interface that allows you to draw their contents in the current graphic context.  \nThe default font for NSAttributedString objects is Helvetica 12-point, which may differ from the default system font for the platform. Thus, you might want to create new strings with non-default attributes suitable for your application. You can also use the NSParagraphStyle class and its subclass NSMutableParagraphStyle to encapsulate the paragraph or ruler attributes used by the NSAttributedString classes.\nBe aware that comparisons of NSAttributedString objects using the isEqual(_:) method look for exact equality. The comparison includes both a character-by-character string equality check and an equality check of all attributes. Such a comparison is not likely to yield a match if the string has many attributes, such as attachments, lists, and tables, for example.\nThe NSAttributedString class is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFAttributedString. See Toll-Free Bridging for more information.\n", "class_name": "NSAttributedString"}
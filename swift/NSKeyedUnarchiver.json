{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSCoder"], "Methods": [{"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The object graph previously encoded by NSKeyedArchiver and stored in data."]}, "method_name": "unarchiveObject", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes and returns the object graph previously encoded by NSKeyedArchiver and stored in a given NSData object.", "params": [{"param_type": "Data", "param_name": ["with", "data"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The object graph previously encoded by NSKeyedArchiver written to the file path. Returns nil if there is no file at path."]}, "method_name": "unarchiveObject", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes and returns the object graph previously encoded by NSKeyedArchiver written to the file at a given path.", "params": [{"param_type": "String", "param_name": ["withFile", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the archive contains a value for key within the current decoding scope, otherwise false."]}, "method_name": "containsValue", "class_name": "NSKeyedUnarchiver", "method_description": "Returns a Boolean value that indicates whether the archive contains a value for a given key within the current decoding scope.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["T"], "return_name": [""], "return_description": []}, "method_name": "decodeDecodable", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a decodable value associated with a given key.", "params": [{"param_type": "Decodable.Decodableype", "param_name": ["type"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["T"], "return_name": [""], "return_description": []}, "method_name": "decodeTopLevelDecodable", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a top-level decodable value associated with a given key.", "params": [{"param_type": "Decodable.Decodableype", "param_name": ["type"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["The Boolean value associated with the key key. Returns false if key does not exist."]}, "method_name": "decodeBool", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a Boolean value associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["UnsafePointer<UInt8>"], "return_name": [""], "return_description": ["The stream of bytes associated with the key key. Returns NULL if key does not exist."]}, "method_name": "decodeBytes", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a stream of bytes associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["returnedLength", "lengthp"], "param_description": ""}]}, {"return_value": {"return_type": ["Double"], "return_name": [""], "return_description": ["The double-precision floating-point value associated with the key key. Returns 0.0 if key does not exist."]}, "method_name": "decodeDouble", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a double-precision floating-point value associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Float"], "return_name": [""], "return_description": ["The single-precision floating-point value associated with the key key. Returns 0.0 if key does not exist."]}, "method_name": "decodeFloat", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a single-precision floating-point value associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int32"], "return_name": [""], "return_description": ["The 32-bit integer value associated with the key key. Returns 0 if key does not exist."]}, "method_name": "decodeInt32", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a 32-bit integer value associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int64"], "return_name": [""], "return_description": ["The 64-bit integer value associated with the key key. Returns 0 if key does not exist."]}, "method_name": "decodeInt64", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes a 64-bit integer value associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The object associated with the key key. Returns nil if key does not exist, or if the value for key is nil."]}, "method_name": "decodeObject", "class_name": "NSKeyedUnarchiver", "method_description": "Decodes and returns an object associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "finishDecoding", "class_name": "NSKeyedUnarchiver", "method_description": "Tells the receiver that you are finished decoding objects.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setClass", "class_name": "NSKeyedUnarchiver", "method_description": "Adds a class translation mapping to NSKeyedUnarchiver whereby objects encoded with a given class name are decoded as instances of a given class instead.", "params": [{"param_type": "AnyClass", "param_name": ["cls"], "param_description": ""}, {"param_type": "String", "param_name": ["forClassName", "codedName"], "param_description": ""}]}, {"return_value": {"return_type": ["AnyClass"], "return_name": [""], "return_description": ["The class from which NSKeyedUnarchiver instantiates an object encoded with the class name codedName. Returns nil if NSKeyedUnarchiver does not have a translation mapping for codedName."]}, "method_name": "`class`", "class_name": "NSKeyedUnarchiver", "method_description": "Returns the class from which NSKeyedUnarchiver instantiates an encoded object with a given class name.", "params": [{"param_type": "String", "param_name": ["forClassName", "codedName"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setClass", "class_name": "NSKeyedUnarchiver", "method_description": "Adds a class translation mapping to the receiver whereby objects encoded with a given class name are decoded as instances of a given class instead.", "params": [{"param_type": "AnyClass", "param_name": ["cls"], "param_description": ""}, {"param_type": "String", "param_name": ["forClassName", "codedName"], "param_description": ""}]}, {"return_value": {"return_type": ["AnyClass"], "return_name": [""], "return_description": ["The class from which the receiver instantiates an encoded object with the class name codedName. Returns nil if the receiver does not have a translation mapping for codedName. "]}, "method_name": "`class`", "class_name": "NSKeyedUnarchiver", "method_description": "Returns the class from which the receiver instantiates an encoded object with a given class name.", "params": [{"param_type": "String", "param_name": ["forClassName", "codedName"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "unarchiveTopLevelObjectWithData", "class_name": "NSKeyedUnarchiver", "method_description": "", "params": [{"param_type": "Data", "param_name": ["data"], "param_description": ""}]}, {"return_value": {"return_type": ["DecodedObjectType"], "return_name": [""], "return_description": []}, "method_name": "unarchivedObject", "class_name": "NSKeyedUnarchiver", "method_description": "", "params": [{"param_type": "NSObject.Type", "param_name": ["ofClass", "cls"], "param_description": ""}, {"param_type": "Data", "param_name": ["from", "data"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "unarchivedObject", "class_name": "NSKeyedUnarchiver", "method_description": "", "params": [{"param_type": "[AnyClass]", "param_name": ["ofClasses", "classes"], "param_description": ""}, {"param_type": "Data", "param_name": ["from", "data"], "param_description": ""}]}], "Vars": [{"var_type": "Bool", "var_description": "Indicates whether the receiver requires all unarchived classes to conform to NSSecureCoding.", "var_name": "requiresSecureCoding"}, {"var_type": "NSKeyedUnarchiverDelegate", "var_description": "The receiver\u2019s delegate.", "var_name": "delegate"}, {"var_type": "NSExceptionName", "var_description": "The name of the exception raised by NSKeyedArchiver if there is a problem extracting an archive.", "var_name": "invalidUnarchiveOperationException"}, {"var_type": "NSCoder.DecodingFailurePolicy", "var_description": "", "var_name": "decodingFailurePolicy"}], "subclass_list": [], "class_description": "NSKeyedUnarchiver, a concrete subclass of NSCoder, defines methods for decoding a set of named objects (and scalar values) from a keyed archive. Such archives are produced by instances of the NSKeyedArchiver class.\nA keyed archive is encoded as a hierarchy of objects. Each object in the hierarchy serves as a namespace into which other objects are encoded. The objects available for decoding are restricted to those that were encoded within the immediate scope of a particular object. Objects encoded elsewhere in the hierarchy, whether higher than, lower than, or parallel to this particular object, are not accessible. In this way, the keys used by a particular object to encode its instance variables need to be unique only within the scope of that object.\nIf you invoke one of the decode... methods of this class using a key that does not exist in the archive, a non-positive value is returned. This value varies by decoded type. For example, if a key does not exist in an archive, decodeBool(forKey:) returns false, decodeInt(forKey:) returns 0, and decodeObject(forKey:) returns nil.\nNSKeyedUnarchiver supports limited type coercion. A value encoded as any type of integer, whether a standard int or an explicit 32-bit or 64-bit integer, can be decoded using any of the integer decode methods. Likewise, a value encoded as a float or double can be decoded as either a float or a double value. If an encoded value is too large to fit within the coerced type, the decoding method throws a rangeException. Further, when trying to coerce a value to an incompatible type, for example decoding an int as a float, the decoding method throws an invalidUnarchiveOperationException.\n", "class_name": "NSKeyedUnarchiver"}
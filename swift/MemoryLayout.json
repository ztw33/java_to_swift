{"class_inherit_list": [], "Vars": [{"var_description": "The contiguous memory footprint of T, in bytes.", "var_type": "Int", "var_name": "size"}, {"var_description": "The default memory alignment of T, in bytes.", "var_type": "Int", "var_name": "alignment"}, {"var_description": "The number of bytes from the start of one instance of T to the start of the next when stored in contiguous memory or in an Array<T>.", "var_type": "Int", "var_name": "stride"}], "class_name": "MemoryLayout", "interface_list": [], "subclass_list": [], "class_description": "You can use MemoryLayout as a source of information about a type when allocating or binding memory using raw pointers. The following example declares a Point type with x and y coordinates and a Boolean isFilled property.\nThe size, stride, and alignment of the Point type are accessible as static properties of MemoryLayout<Point>.\nAlways use a multiple of a type\u2019s stride instead of its size when allocating memory or accounting for the distance between instances in memory. This example allocates uninitialized raw memory with space for four instances of Point.\n", "Methods": [{"return_value": {"return_description": ["The stride, in bytes, of the given value\u2019s type."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the number of bytes from the start of one instance of T to the start of the next when stored in contiguous memory or in an Array<T>.", "method_name": "stride", "class_name": "MemoryLayout", "params": [{"param_description": "A value representative of the type to describe.", "param_type": "T", "param_name": ["ofValue", "value"]}]}, {"return_value": {"return_description": ["The size, in bytes, of the given value\u2019s type."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the contiguous memory footprint of the given instance.", "method_name": "size", "class_name": "MemoryLayout", "params": [{"param_description": "A value representative of the type to describe.", "param_type": "T", "param_name": ["ofValue", "value"]}]}, {"return_value": {"return_description": ["The default memory alignment, in bytes, of the given value\u2019s type. This value is always positive."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the default memory alignment of T.", "method_name": "alignment", "class_name": "MemoryLayout", "params": [{"param_description": "A value representative of the type to describe.", "param_type": "T", "param_name": ["ofValue", "value"]}]}, {"return_value": {"return_description": ["The offset in bytes from a pointer to a value of type T to a pointer to the storage referenced by key, or nil if no such offset is available for the storage referenced by key. If the value is nil, it can be because key is computed, has observers, requires reabstraction, or overlaps storage with other properties."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the offset of an inline stored property within a type\u2019s in-memory representation.", "method_name": "offset", "class_name": "MemoryLayout", "params": [{"param_description": "A key path referring to storage that can be accessed through a value of type T.", "param_type": "PartialKeyPath<T>", "param_name": ["of", "key"]}]}], "package_name": "swift"}
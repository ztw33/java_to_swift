{"class_description": "The Numeric protocol provides a suitable basis for arithmetic on scalar values, such as integers and floating-point numbers. You can write generic methods that operate on any numeric type in the standard library by using the Numeric protocol as a generic constraint.\nThe following example declares a method that calculates the total of any sequence with Numeric elements.\nThe sum() method is now available on any sequence or collection with numeric values, whether it is an array of Double or a countable range of Int.\nTo add Numeric protocol conformance to your own custom type, implement the required mutating methods. Extensions to Numeric provide default implementations for the protocol\u2019s nonmutating methods based on the mutating variants.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "Numeric", "method_description": "Multiplies two values and produces their product.Required.", "method_name": "*", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "Numeric", "method_description": "Multiplies two values and stores the result in the left-hand-side variable.Required.", "method_name": "*=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [""], "return_description": ["The given argument without any changes."], "return_type": ["Self"]}, "class_name": "Numeric", "method_description": "Returns the given number unchanged.", "method_name": "+", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": ""}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "Numeric", "method_description": "Adds two values and produces their sum.Required.", "method_name": "+", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "Numeric", "method_description": "Adds two values and stores the result in the left-hand-side variable.Required.", "method_name": "+=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "Numeric", "method_description": "Subtracts one value from another and produces their difference.Required.", "method_name": "-", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "Numeric", "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.Required.", "method_name": "-=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}], "class_inherit_list": ["Equatable", "ExpressibleByIntegerLiteral"], "Vars": [{"var_type": "Self.Magnitude", "var_description": "The magnitude of this value.Required.", "var_name": "magnitude"}], "subclass_list": ["BinaryInteger", "SignedNumeric"], "class_name": "Numeric"}
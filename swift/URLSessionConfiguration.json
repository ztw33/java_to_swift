{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["URLSessionConfiguration"], "return_name": [""], "return_description": ["A configuration object that causes the system to perform upload and download tasks in a separate process."]}, "method_name": "background", "class_name": "URLSessionConfiguration", "method_description": "Creates a session configuration object that allows HTTP and HTTPS uploads or downloads to be performed in the background.", "params": [{"param_type": "String", "param_name": ["withIdentifier", "identifier"], "param_description": ""}]}, {"return_value": {"return_type": ["URLSessionConfiguration"], "return_name": [""], "return_description": ["A URL session configuration object that causes upload and download tasks to be performed by the system in a separate process."]}, "method_name": "backgroundSessionConfiguration", "class_name": "URLSessionConfiguration", "method_description": "Returns a session configuration object that allows HTTP and HTTPS uploads or downloads to be performed in the background.DeprecatedUse background(withIdentifier:) instead.", "params": [{"param_type": "String", "param_name": ["identifier"], "param_description": ""}]}], "Vars": [{"var_type": "URLSessionConfiguration", "var_description": "A default session configuration object.", "var_name": "`default`"}, {"var_type": "URLSessionConfiguration", "var_description": "A session configuration that uses no persistent storage for caches, cookies, or credentials.", "var_name": "ephemeral"}, {"var_type": "String", "var_description": "The background session identifier of the configuration object.", "var_name": "identifier"}, {"var_type": "[AnyHashable", "var_description": "A dictionary of additional headers to send with requests.", "var_name": "httpAdditionalHeaders"}, {"var_type": "NSURLRequest.NetworkServiceType", "var_description": "The type of network service for all tasks within sessions based on this configuration.", "var_name": "networkServiceType"}, {"var_type": "Bool", "var_description": "A Boolean value that determines whether connections should be made over a cellular network.", "var_name": "allowsCellularAccess"}, {"var_type": "TimeInterval", "var_description": "The timeout interval to use when waiting for additional data.", "var_name": "timeoutIntervalForRequest"}, {"var_type": "TimeInterval", "var_description": "The maximum amount of time that a resource request should be allowed to take.", "var_name": "timeoutIntervalForResource"}, {"var_type": "String", "var_description": "The identifier for the shared container into which files in background URL sessions should be downloaded.", "var_name": "sharedContainerIdentifier"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the session should wait for connectivity to become available, or fail immediately.", "var_name": "waitsForConnectivity"}, {"var_type": "HTTPCookie.AcceptPolicy", "var_description": "A policy constant that determines when cookies should be accepted.", "var_name": "httpCookieAcceptPolicy"}, {"var_type": "Bool", "var_description": "A Boolean value that determines whether requests should contain cookies from the cookie store.", "var_name": "httpShouldSetCookies"}, {"var_type": "HTTPCookieStorage", "var_description": "The cookie store for storing cookies within this session.", "var_name": "httpCookieStorage"}, {"var_type": "SSLProtocol", "var_description": "The maximum TLS protocol version that the client should request when making connections in this session.", "var_name": "tlsMaximumSupportedProtocol"}, {"var_type": "SSLProtocol", "var_description": "The minimum TLS protocol that should be accepted during protocol negotiation.", "var_name": "tlsMinimumSupportedProtocol"}, {"var_type": "URLCredentialStorage", "var_description": "A credential store that provides credentials for authentication.", "var_name": "urlCredentialStorage"}, {"var_type": "URLCache", "var_description": "The URL cache for providing cached responses to requests within the session.", "var_name": "urlCache"}, {"var_type": "NSURLRequest.CachePolicy", "var_description": "A predefined constant that determines when to return a response from the cache.", "var_name": "requestCachePolicy"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the app should be resumed or launched in the background when transfers finish.", "var_name": "sessionSendsLaunchEvents"}, {"var_type": "Bool", "var_description": "A Boolean value that determines whether background tasks can be scheduled at the discretion of the system for optimal performance.", "var_name": "isDiscretionary"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether TCP connections should be kept open when the app moves to the background.", "var_name": "shouldUseExtendedBackgroundIdleMode"}, {"var_type": "[AnyClass]", "var_description": "An array of extra protocol subclasses that handle requests in a session.", "var_name": "protocolClasses"}, {"var_type": "URLSessionConfiguration.MultipathServiceType", "var_description": "A service type that specifies the Multipath TCP connection policy for transmitting data over Wi-Fi and cellular interfaces.", "var_name": "multipathServiceType"}, {"var_type": "Int", "var_description": "The maximum number of simultaneous connections to make to a given host.", "var_name": "httpMaximumConnectionsPerHost"}, {"var_type": "Bool", "var_description": "A Boolean value that determines whether the session should use HTTP pipelining.", "var_name": "httpShouldUsePipelining"}, {"var_type": "[AnyHashable", "var_description": "A dictionary containing information about the proxy to use within this session.", "var_name": "connectionProxyDictionary"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the session should wait for connectivity to become available, or fail immediately.", "var_name": "waitsForConnectivity"}], "subclass_list": [], "class_description": "An URLSessionConfiguration object defines the behavior and policies to use when uploading and downloading data using an URLSession object. When uploading or downloading data, creating a configuration object is always the first step you must take. You use this object to configure the timeout values, caching policies, connection requirements, and other types of information that you intend to use with your URLSession object. \nIt is important to configure your URLSessionConfiguration object appropriately before using it to initialize a session object. Session objects make a copy of the configuration settings you provide and use those settings to configure the session. Once configured, the session object ignores any changes you make to the URLSessionConfiguration object. If you need to modify your transfer policies, you must update the session configuration object and use it to create a new URLSession object.\nNote\nIn some cases, the policies defined in this configuration may be overridden by policies specified by an NSURLRequest object provided for a task. Any policy specified on the request object is respected unless the session\u2019s policy is more restrictive. For example, if the session configuration specifies that cellular networking should not be allowed, the NSURLRequest object cannot request cellular networking.\nFor more information about using configuration objects to create sessions, see URLSession. \nThe behavior and capabilities of a URL session are largely determined by the kind of configuration used to create the session. \n\n\nThe singleton shared session (which has no configuration object) is for basic requests. It\u2019s not as customizable as sessions that you create, but it serves as a good starting point if you have very limited requirements. You access this session by calling the shared class method. See that method\u2019s discussion for more information about its limitations.\nDefault sessions behave much like the shared session (unless you customize them further), but let you obtain data incrementally using a delegate. You can create a default session configuration by calling the default method on the URLSessionConfiguration class.\nEphemeral sessions are similar to default sessions, but they don\u2019t write caches, cookies, or credentials to disk. You can create an ephemeral session configuration by calling the ephemeral method on the URLSessionConfiguration class.\nBackground sessions let you perform uploads and downloads of content in the background while your app isn\u2019t running. You can create a background session configuration by calling the backgroundSessionConfiguration(_:) method on the URLSessionConfiguration class.\n", "class_name": "URLSessionConfiguration"}
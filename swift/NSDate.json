{"package_name": "foundation", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the anotherDate is an NSDate object and is exactly equal to the receiver, otherwise false."]}, "method_name": "isEqual", "class_name": "NSDate", "method_description": "Returns a Boolean value that indicates whether a given object is a date that is exactly equal the receiver.", "params": [{"param_type": "Date", "param_name": ["to", "otherDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["The earlier of the receiver and anotherDate, determined using timeIntervalSince(_:). If the receiver and anotherDate represent the same date, returns the receiver."]}, "method_name": "earlierDate", "class_name": "NSDate", "method_description": "Returns the earlier of the receiver and another given date.", "params": [{"param_type": "Date", "param_name": ["anotherDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["The later of the receiver and anotherDate, determined using timeIntervalSince(_:). If the receiver and anotherDate represent the same date, returns the receiver."]}, "method_name": "laterDate", "class_name": "NSDate", "method_description": "Returns the later of the receiver and another given date.", "params": [{"param_type": "Date", "param_name": ["anotherDate"], "param_description": ""}]}, {"return_value": {"return_type": ["ComparisonResult"], "return_name": [""], "return_description": ["If:"]}, "method_name": "compare", "class_name": "NSDate", "method_description": "Indicates the temporal ordering of the receiver and another given date.", "params": [{"param_type": "Date", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["TimeInterval"], "return_name": [""], "return_description": ["The interval between the receiver and the anotherDate parameter. If the receiver is earlier than anotherDate, the return value is negative. If anotherDate is nil, the results are undefined."]}, "method_name": "timeIntervalSince", "class_name": "NSDate", "method_description": "Returns the interval between the receiver and another given date.", "params": [{"param_type": "Date", "param_name": ["anotherDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Self"], "return_name": [""], "return_description": ["A new NSDate object that is set to seconds seconds relative to the receiver. The date returned might have a representation different from the receiver\u2019s."]}, "method_name": "addingTimeInterval", "class_name": "NSDate", "method_description": "Returns a new date object that is set to a given number of seconds relative to the receiver.", "params": [{"param_type": "TimeInterval", "param_name": ["ti"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string representation of the receiver, using the given locale, or if the locale argument is nil, in the international format YYYY-MM-DD HH:MM:SS \u00b1HHMM, where \u00b1HHMM represents the time zone offset in hours and minutes from UTC (for example, \u201c2001-03-24 10:45:32 +0600\u201d)"]}, "method_name": "description", "class_name": "NSDate", "method_description": "Returns a string representation of the date using the given locale.", "params": [{"param_type": "Any", "param_name": ["with", "locale"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["A new NSDate object set to the current date and time specified by string."]}, "method_name": "date", "class_name": "NSDate", "method_description": "Creates and returns a date object set to the date and time specified by a given string.", "params": [{"param_type": "String", "param_name": ["withNaturalLanguageString", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["A new NSDate object set to the date and time specified by string as interpreted according to localeDictionary."]}, "method_name": "date", "class_name": "NSDate", "method_description": "Creates and returns a date object set to the date and time specified by a given string.", "params": [{"param_type": "String", "param_name": ["withNaturalLanguageString", "string"], "param_description": ""}, {"param_type": "Any", "param_name": ["locale"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSDate object with a date and time value specified by aString."]}, "method_name": "date", "class_name": "NSDate", "method_description": "Creates and returns a date object with a date and time value specified by a given string in the international string representation format (YYYY-MM-DD HH:MM:SS \u00b1HHMM).", "params": [{"param_type": "String", "param_name": ["with", "aString"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["A new NSDate object that is set to seconds seconds relative to the receiver. The date returned might have a representation different from the receiver\u2019s."]}, "method_name": "addTimeInterval", "class_name": "NSDate", "method_description": "Returns a new date object that is set to a given number of seconds relative to the receiver.DeprecatedUse addingTimeInterval(_:) instead.", "params": [{"param_type": "TimeInterval", "param_name": ["seconds"], "param_description": ""}]}, {"return_value": {"return_type": ["NSCalendarDate"], "return_name": [""], "return_description": ["A new NSCalendarDate object bound to formatString and the time zone timeZone."]}, "method_name": "date", "class_name": "NSDate", "method_description": "Converts the receiver to a calendar date with a given format string and time zone.DeprecatedUse NSDate methods to set the individual date values.", "params": [{"param_type": "String", "param_name": ["withCalendarFormat", "format"], "param_description": ""}, {"param_type": "TimeZone", "param_name": ["timeZone", "aTimeZone"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string representation of the receiver, formatted as specified by the given conversion specifiers."]}, "method_name": "description", "class_name": "NSDate", "method_description": "Returns a string representation of the date formatted as specified by given conversion specifiers.", "params": [{"param_type": "String", "param_name": ["withCalendarFormat", "format"], "param_description": ""}, {"param_type": "TimeZone", "param_name": ["timeZone", "aTimeZone"], "param_description": ""}, {"param_type": "Any", "param_name": ["locale"], "param_description": ""}]}], "Vars": [{"var_type": "Date", "var_description": "A date object representing a date in the distant future. ", "var_name": "distantFuture"}, {"var_type": "Date", "var_description": "A date object representing a date in the distant past.", "var_name": "distantPast"}, {"var_type": "TimeInterval", "var_description": "The interval between the date object and the current date and time.", "var_name": "timeIntervalSinceNow"}, {"var_type": "TimeInterval", "var_description": "The interval between the date object and 00:00:00 UTC on 1 January 2001.", "var_name": "timeIntervalSinceReferenceDate"}, {"var_type": "TimeInterval", "var_description": "The interval between the date object and 00:00:00 UTC on 1 January 1970.", "var_name": "timeIntervalSince1970"}, {"var_type": "TimeInterval", "var_description": "The interval between 00:00:00 UTC on 1 January 2001 and the current date and time.", "var_name": "timeIntervalSinceReferenceDate"}, {"var_type": "Double", "var_description": "The number of seconds from 1 January 1970 to the reference date, 1 January 2001.", "var_name": "NSTimeIntervalSince1970"}, {"var_type": "String", "var_description": "A string representation of the date object.", "var_name": "description"}, {"var_type": "PlaygroundQuickLook", "var_description": "A custom playground Quick Look for this object.", "var_name": "customPlaygroundQuickLook"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted whenever the system clock is changed. ", "var_name": "NSSystemClockDidChange"}], "subclass_list": [], "class_description": "NSDate objects encapsulate a single point in time, independent of any particular calendrical system or time zone. Date objects are immutable, representing an invariant time interval relative to an absolute reference date (00:00:00 UTC on 1 January 2001).\nThe NSDate class provides methods for comparing dates, calculating the time interval between two dates, and creating a new date from a time interval relative to another date. NSDate objects can be used in conjunction with DateFormatter objects to create localized representations of dates and times, as well as with NSCalendar objects to perform calendar arithmetic.\nNSDate is toll-free bridged with its Core Foundation counterpart, CFDate. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Date structure, which bridges to the NSDate class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nYou might subclass NSDate in order to make it easier to work with a particular calendrical system, or to work with date and time values with a finer temporal granularity.\nIf you want to subclass NSDate to obtain behavior different than that provided by the private or public subclasses, you must:\nDeclare a suitable instance variable to hold the date and time value (relative to an absolute reference date)\nOverride the timeIntervalSinceReferenceDate instance method to provide the correct date and time value based on your instance variable\nOverride init(timeIntervalSinceReferenceDate:), one of the designated initializer methods\nIf creating a subclass that represents a calendrical system, define methods that partition past and future periods into the units of this calendar\nImplement the methods required by the NSCopying and NSCoding protocols, because NSDate adopts these protocols\n\nYour subclass may use a different reference date than the absolute reference date used by NSDate (00:00:00 UTC on 1 January 2001). If it does, it must still use the absolute reference date in its implementations of the methods timeIntervalSinceReferenceDate and init(timeIntervalSinceReferenceDate:). That is, the reference date referred to in the titles of these methods is the absolute reference date. If you do not use the absolute reference date in these methods, comparisons between NSDate objects of your subclass and NSDate objects of a private subclass will not work.\n", "class_name": "NSDate"}
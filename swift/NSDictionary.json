{"class_inherit_list": ["NSObject"], "Vars": [{"var_description": "The number of entries in the dictionary.", "var_type": "Int", "var_name": "count"}, {"var_description": "A new array containing the dictionary\u2019s keys, or an empty array if the dictionary has no entries.", "var_type": "[Any]", "var_name": "allKeys"}, {"var_description": "A new array containing the dictionary\u2019s values, or an empty array if the dictionary has no entries.", "var_type": "[Any]", "var_name": "allValues"}, {"var_description": "A string that represents the contents of the dictionary, formatted as a property list.", "var_type": "String", "var_name": "description"}, {"var_description": "A string that represents the contents of the dictionary, formatted in .strings file format.", "var_type": "String", "var_name": "descriptionInStringsFileFormat"}, {"var_description": "A mirror that reflects the dictionary.", "var_type": "Mirror", "var_name": "customMirror"}], "class_name": "NSDictionary", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByDictionaryLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSFetchRequestResult", "NSMutableCopying", "NSSecureCoding", "Sequence"], "subclass_list": [], "class_description": "The NSDictionary class declares the programmatic interface to objects that manage immutable associations of keys and values. For example, an interactive form could be represented as a dictionary, with the field names as keys, corresponding to user-entered values.\nUse this class or its subclass NSMutableDictionary when you need a convenient and efficient way to retrieve data associated with an arbitrary key. NSDictionary creates static dictionaries, and NSMutableDictionary creates dynamic dictionaries. (For convenience, the term dictionary refers to any instance of one of these classes without specifying its exact class membership.)\nA key-value pair within a dictionary is called an entry. Each entry consists of one object that represents the key and a second object that is that key\u2019s value. Within a dictionary, the keys are unique. That is, no two keys in a single dictionary are equal (as determined by isEqual(_:)). In general, a key can be any object (provided that it conforms to the NSCopying protocol\u2014see below), but note that when using key-value coding the key must be a string (see Accessing Object Properties). Neither a key nor a value can be nil; if you need to represent a null value in a dictionary, you should use NSNull.\nNSDictionary is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFDictionary. See Toll-Free Bridging for more information on toll-free bridging.\nIn addition to the provided initializers, such as init(objects:forKeys:), you can create an NSDictionary object using a dictionary literal.\nIn Objective-C, the compiler generates code that makes an underlying call to the init(objects:forKeys:count:) method.\nUnlike dictionaryWithObjectsAndKeys: and other initializers, dictionary literals specify entries in key-value order. You should not terminate the list of objects with nil when using this literal syntax, and in fact nil is an invalid value. For more information about object literals in Objective-C, see Working with Objects in Programming with Objective-C.\nIn Swift, the NSDictionary class conforms to the DictionaryLiteralConvertible protocol, which allows it to be initialized with dictionary literals. For more information about object literals in Swift, see Literal Expression in The Swift Programming Language (Swift 4.1).\nIn addition to the provided instance methods, such as object(forKey:), you can access NSDictionary values by their keys using subscripting.\nIn addition to the provided instance methods, such as enumerateKeysAndObjects(_:), you can enumerate NSDictionary entries using for-in loops.\nIn Objective-C, NSDictionary conforms to the NSFastEnumeration protocol.\nIn Swift, NSDictionary conforms to the SequenceType protocol.\nYou generally shouldn\u2019t need to subclass NSDictionary. Custom behavior can usually be achieved through composition rather than subclassing.\nIf you do need to subclass NSDictionary, take into account that it is a Class cluster. Any subclass must override the following primitive methods:\ninit(objects:forKeys:count:)\ncount\nobject(forKey:)\nkeyEnumerator() \nThe other methods of NSDictionary operate by invoking one or more of these primitives. The non-primitive methods provide convenient ways of accessing multiple entries at once.\nBefore making a custom class of NSDictionary, investigate NSMapTable and the corresponding Core Foundation type, CFDictionary. Because NSDictionary and CFDictionary are \u201ctoll-free bridged,\u201d you can substitute a CFDictionary object for a NSDictionary object in your code (with appropriate casting). Although they are corresponding types, CFDictionary and NSDictionary do not have identical interfaces or implementations, and you can sometimes do things with CFDictionary that you cannot easily do with NSDictionary.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSDictionary. Keep in mind, however, that this category will be in effect for all instances of NSDictionary that you use, and this might have unintended consequences. Alternatively, you could use composition to achieve the desired behavior.\n", "Methods": [{"return_value": {"return_description": ["A shared key set object."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Creates a shared key set object for the specified keys.", "method_name": "sharedKeySet", "class_name": "NSDictionary", "params": [{"param_description": "The array of keys. If the parameter is nil, an exception is thrown. If the array of keys is empty, an empty key set is returned.", "param_type": "[NSCopying]", "param_name": ["forKeys", "keys"]}]}, {"return_value": {"return_description": ["true if the contents of otherDictionary are equal to the contents of the receiving dictionary, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether the contents of the receiving dictionary are equal to the contents of another given dictionary.", "method_name": "isEqual", "class_name": "NSDictionary", "params": [{"param_description": "The dictionary with which to compare the receiving dictionary.", "param_type": "Any]", "param_name": ["to", "otherDictionary"]}]}, {"return_value": {"return_description": ["A new array containing the keys corresponding to all occurrences of anObject in the dictionary. If no object matching anObject is found, returns an empty array."], "return_name": [""], "return_type": ["[Any]"]}, "method_description": "Returns a new array containing the keys corresponding to all occurrences of a given object in the dictionary.", "method_name": "allKeys", "class_name": "NSDictionary", "params": [{"param_description": "The value to look for in the dictionary.", "param_type": "Any", "param_name": ["for", "anObject"]}]}, {"return_value": {"return_description": ["The value associated with key."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns the value associated with a given key.", "method_name": "value", "class_name": "NSDictionary", "params": [{"param_description": "The key for which to return the corresponding value. Note that when using key-value coding, the key must be a string (see Accessing Object Properties).", "param_type": "String", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["[Any]"]}, "method_description": "Returns as a static array the set of objects from the dictionary that corresponds to the specified keys.", "method_name": "objects", "class_name": "NSDictionary", "params": [{"param_description": "An NSArray containing the keys for which to return corresponding values.", "param_type": "[Any]", "param_name": ["forKeys", "keys"]}, {"param_description": "", "param_type": "Any", "param_name": ["notFoundMarker", "marker"]}]}, {"return_value": {"return_description": ["The value associated with aKey, or nil if no value is associated with aKey."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns the value associated with a given key.", "method_name": "object", "class_name": "NSDictionary", "params": [{"param_description": "The key for which to return the corresponding value.", "param_type": "Any", "param_name": ["forKey", "aKey"]}]}, {"return_value": {"return_description": ["An enumerator object that lets you access each key in the dictionary."], "return_name": [""], "return_type": ["NSEnumerator"]}, "method_description": "Provides an enumerator to access the keys in the dictionary.", "method_name": "keyEnumerator", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["An enumerator object that lets you access each value in the dictionary."], "return_name": [""], "return_type": ["NSEnumerator"]}, "method_description": "Returns an enumerator object that lets you access each value in the dictionary.", "method_name": "objectEnumerator", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Applies a given block object to the entries of the dictionary.", "method_name": "enumerateKeysAndObjects", "class_name": "NSDictionary", "params": [{"param_description": "A block object to operate on entries in the dictionary.", "param_type": "(Any", "param_name": ["block"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Applies a given block object to the entries of the dictionary, with options specifying how the enumeration is performed.", "method_name": "enumerateKeysAndObjects", "class_name": "NSDictionary", "params": [{"param_description": "Enumeration options.", "param_type": "NSEnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "A block object to operate on entries in the dictionary.", "param_type": "(Any", "param_name": ["using", "block"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSDictionary.Iterator"]}, "method_description": "Return an iterator over the elements of this sequence.", "method_name": "makeIterator", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values."], "return_name": [""], "return_type": ["[Any]"]}, "method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values.", "method_name": "keysSortedByValue", "class_name": "NSDictionary", "params": [{"param_description": "A selector that specifies the method to use to compare the values in the dictionary.The comparator method should return NSOrderedAscending if the dictionary value is smaller than the argument, NSOrderedDescending if the dictionary value is larger than the argument, and NSOrderedSame if they are equal.", "param_type": "Selector", "param_name": ["using", "comparator"]}]}, {"return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using cmptr."], "return_name": [""], "return_type": ["ComparisonResult -> [Any]"]}, "method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block. ", "method_name": "keysSortedByValue", "class_name": "NSDictionary", "params": [{"param_description": "A comparator block.", "param_type": "(Any", "param_name": ["comparator", "cmptr"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}]}, {"return_value": {"return_description": ["An array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using cmptr with the options given in opts."], "return_name": [""], "return_type": ["ComparisonResult -> [Any]"]}, "method_description": "Returns an array of the dictionary\u2019s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block and a specified set of options. ", "method_name": "keysSortedByValue", "class_name": "NSDictionary", "params": [{"param_description": "A bitmask of sort options.", "param_type": "NSSortOptions", "param_name": ["options", "opts"]}, {"param_description": "A comparator block.", "param_type": "(Any", "param_name": ["usingComparator", "cmptr"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}]}, {"return_value": {"return_description": ["The set of keys whose corresponding value satisfies predicate."], "return_name": [""], "return_type": ["Bool -> Set<AnyHashable>"]}, "method_description": "Returns the set of keys whose corresponding value satisfies a constraint described by a block object.", "method_name": "keysOfEntries", "class_name": "NSDictionary", "params": [{"param_description": "A block object that specifies constraints for values in the dictionary.", "param_type": "(Any", "param_name": ["passingTest", "predicate"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["The set of keys whose corresponding value satisfies predicate."], "return_name": [""], "return_type": ["Bool -> Set<AnyHashable>"]}, "method_description": "Returns the set of keys whose corresponding value satisfies a constraint described by a block object.", "method_name": "keysOfEntries", "class_name": "NSDictionary", "params": [{"param_description": "A bit mask of enumeration options.", "param_type": "NSEnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "A block object that specifies constraints for values in the dictionary.", "param_type": "(Any", "param_name": ["passingTest", "predicate"]}, {"param_description": "", "param_type": "Any", "param_name": ["Any"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["true if the location is written successfully, otherwise false."], "return_name": [], "return_type": []}, "method_description": "Writes a property list representation of the contents of the dictionary to a given URL.", "method_name": "write", "class_name": "NSDictionary", "params": [{"param_description": "The URL to which to write the dictionary.", "param_type": "URL", "param_name": ["to", "url"]}]}, {"return_value": {"return_description": ["true if the location is written successfully, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Writes a property list representation of the contents of the dictionary to a given URL.DeprecatedUse write(to:) instead.", "method_name": "write", "class_name": "NSDictionary", "params": [{"param_description": "", "param_type": "URL", "param_name": ["to", "url"]}, {"param_description": "", "param_type": "Bool", "param_name": ["atomically"]}]}, {"return_value": {"return_description": ["true if the file is written successfully, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Writes a property list representation of the contents of the dictionary to a given path.DeprecatedUse write(to:) instead.", "method_name": "write", "class_name": "NSDictionary", "params": [{"param_description": "The path at which to write the file.If path contains a tilde (~) character, you must expand it with expandingTildeInPath before invoking this method.", "param_type": "String", "param_name": ["toFile", "path"]}, {"param_description": "", "param_type": "Bool", "param_name": ["atomically", "useAuxiliaryFile"]}]}, {"return_value": {"return_description": ["The value associated with the size file attributes key, as a UInt64, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["UInt64"]}, "method_description": "Returns the file\u2019s size, in bytes.", "method_name": "fileSize", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the type file attributes key, or nil if the file attributes dictionary has no entry for the key. For possible values, see FileAttributeType."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns the file type.", "method_name": "fileType", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the creationDate file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Date"]}, "method_description": "Returns the file\u2019s creation date.", "method_name": "fileCreationDate", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the modificationDate file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Date"]}, "method_description": "Returns file\u2019s modification date.", "method_name": "fileModificationDate", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the posixPermissions file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the file\u2019s POSIX permissions.", "method_name": "filePosixPermissions", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the ownerAccountID file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["NSNumber"]}, "method_description": "Returns the file\u2019s owner account ID.", "method_name": "fileOwnerAccountID", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the ownerAccountName file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns the file\u2019s owner account name.", "method_name": "fileOwnerAccountName", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the groupOwnerAccountID file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["NSNumber"]}, "method_description": "Returns file\u2019s group owner account ID.", "method_name": "fileGroupOwnerAccountID", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the groupOwnerAccountName file attributes key, or nil if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns the file\u2019s group owner account name.", "method_name": "fileGroupOwnerAccountName", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the extensionHidden file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the file hides its extension.", "method_name": "fileExtensionHidden", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the immutable file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the file is immutable.", "method_name": "fileIsImmutable", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the appendOnly file attributes key, or false if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the file is append only.", "method_name": "fileIsAppendOnly", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the systemFileNumber file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key"], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the filesystem file number.", "method_name": "fileSystemFileNumber", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the systemNumber file attributes key as an Int, or 0 if the file attributes dictionary has no entry for the key"], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the filesystem number.", "method_name": "fileSystemNumber", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the hfsTypeCode file attributes key, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["OSType"]}, "method_description": "Returns file\u2019s HFS type code.", "method_name": "fileHFSTypeCode", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": ["The value associated with the hfsCreatorCode file attributes key, or 0 if the file attributes dictionary has no entry for the key."], "return_name": [""], "return_type": ["OSType"]}, "method_description": "Returns the file\u2019s HFS creator code.", "method_name": "fileHFSCreatorCode", "class_name": "NSDictionary", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string object that represents the contents of the dictionary, formatted as a property list.", "method_name": "description", "class_name": "NSDictionary", "params": [{"param_description": "An object that specifies options used for formatting each of the dictionary\u2019s keys and values; pass nil if you don\u2019t want them formatted.On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_type": "Any", "param_name": ["withLocale", "locale"]}]}, {"return_value": {"return_description": ["A string object that represents the contents of the dictionary, formatted as a property list."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string object that represents the contents of the dictionary, formatted as a property list.", "method_name": "description", "class_name": "NSDictionary", "params": [{"param_description": "An object that specifies options used for formatting each of the dictionary\u2019s keys and values; pass nil if you don\u2019t want them formatted.On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale. In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_type": "Any", "param_name": ["withLocale", "locale"]}, {"param_description": "Specifies a level of indentation, to make the output more readable: the indentation is (4 spaces) * level. ", "param_type": "Int", "param_name": ["indent", "level"]}]}], "package_name": "swift"}
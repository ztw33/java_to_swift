{"class_inherit_list": ["NSObject"], "Vars": [{"var_description": "The number of members in the set.", "var_type": "Int", "var_name": "count"}, {"var_description": "An array containing the set\u2019s members, or an empty array if the set has no members.", "var_type": "[Any]", "var_name": "allObjects"}, {"var_description": "A string that represents the contents of the set, formatted as a property list.", "var_type": "String", "var_name": "description"}, {"var_description": "", "var_type": "Mirror", "var_name": "customMirror"}], "class_name": "NSSet", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "NSCopying", "NSFastEnumeration", "NSMutableCopying", "NSSecureCoding", "Sequence"], "subclass_list": [], "class_description": "The NSSet, NSMutableSet, and NSCountedSet classes declare the programmatic interface to an unordered collection of objects.\nNSSet declares the programmatic interface for static sets of distinct objects. You establish a static set\u2019s entries when it\u2019s created, and thereafter the entries can\u2019t be modified. NSMutableSet, on the other hand, declares a programmatic interface for dynamic sets of distinct objects. A dynamic\u2014or mutable\u2014set allows the addition and deletion of entries at any time, automatically allocating memory as needed.\nYou can use sets as an alternative to arrays when the order of elements isn\u2019t important and performance in testing whether an object is contained in the set is a consideration\u2014while arrays are ordered, testing for membership is slower than with sets.\nNSSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFSet. See Toll-Free Bridging for more information on toll-free bridging.\nThere should be little need of subclassing. If you need to customize behavior, it is often better to consider composition instead of subclassing.\nIn a subclass, you must override all of its primitive methods:\ncount\nmember(_:)\nobjectEnumerator()\nBefore making a custom class of NSSet, investigate NSHashTable and the corresponding Core Foundation type, CFSet. Because NSSet and CFSet are \u201ctoll-free bridged,\u201d you can substitute a CFSet object for a NSSet object in your code (with appropriate casting). Although they are corresponding types, CFSet and NSSet do not have identical interfaces or implementations, and you can sometimes do things with CFSet that you cannot easily do with NSSet.\nIf the behavior you want to add supplements that of the existing class, you could write a category on NSSet. Keep in mind, however, that this category will be in effect for all instances of NSSet that you use, and this might have unintended consequences. Alternatively, you could use composition to achieve the desired behavior.\n", "Methods": [{"return_value": {"return_description": ["A new set formed by adding anObject to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable>"]}, "method_description": "Returns a new set formed by adding a given object to the receiving set.", "method_name": "adding", "class_name": "NSSet", "params": [{"param_description": "The object to add to the set.", "param_type": "Any", "param_name": ["anObject"]}]}, {"return_value": {"return_description": ["A new set formed by adding the objects in other to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable>"]}, "method_description": "Returns a new set formed by adding the objects in a given set to the receiving set.", "method_name": "addingObjects", "class_name": "NSSet", "params": [{"param_description": "The set of objects to add to the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["from", "other"]}]}, {"return_value": {"return_description": ["A new set formed by adding the objects in other to the receiving set."], "return_name": [""], "return_type": ["Set<AnyHashable>"]}, "method_description": "Returns a new set formed by adding the objects in a given array to the receiving set.", "method_name": "addingObjects", "class_name": "NSSet", "params": [{"param_description": "The array of objects to add to the set.", "param_type": "[Any]", "param_name": ["from", "other"]}]}, {"return_value": {"return_description": ["One of the objects in the set, or nil if the set contains no objects. The object returned is chosen at the set\u2019s convenience\u2014the selection is not guaranteed to be random."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Returns one of the objects in the set, or nil if the set contains no objects.", "method_name": "anyObject", "class_name": "NSSet", "params": []}, {"return_value": {"return_description": ["true if anObject is present in the set, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether a given object is present in the set.", "method_name": "contains", "class_name": "NSSet", "params": [{"param_description": "An object to look for in the set.", "param_type": "Any", "param_name": ["anObject"]}]}, {"return_value": {"return_description": ["A new set containing the objects in the receiving set for which predicate returns true."], "return_name": [""], "return_type": ["Set<AnyHashable>"]}, "method_description": "Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true.", "method_name": "filtered", "class_name": "NSSet", "params": [{"param_description": "A predicate.", "param_type": "NSPredicate", "param_name": ["using", "predicate"]}]}, {"return_value": {"return_description": ["Returns an object equal to object if it's present in the set, otherwise nil. "], "return_name": [""], "return_type": ["Any"]}, "method_description": "Determines whether a given object is present in the set, and returns that object if it is.", "method_name": "member", "class_name": "NSSet", "params": [{"param_description": "An object to look for in the set.", "param_type": "Any", "param_name": ["object"]}]}, {"return_value": {"return_description": ["An enumerator object that lets you access each object in the set."], "return_name": [""], "return_type": ["NSEnumerator"]}, "method_description": "Returns an enumerator object that lets you access each object in the set.", "method_name": "objectEnumerator", "class_name": "NSSet", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Executes a given block using each object in the set.", "method_name": "enumerateObjects", "class_name": "NSSet", "params": [{"param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_type": "(Any", "param_name": ["block"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "Executes a given block using each object in the set, using the specified enumeration options.", "method_name": "enumerateObjects", "class_name": "NSSet", "params": [{"param_description": "A bitmask that specifies the options for the enumeration.", "param_type": "NSEnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.", "param_type": "(Any", "param_name": ["using", "block"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["An NSSet containing objects that pass the test."], "return_name": [""], "return_type": ["Bool -> Set<AnyHashable>"]}, "method_description": "Returns a set of object that pass a test in a given block.", "method_name": "objects", "class_name": "NSSet", "params": [{"param_description": "The block to apply to elements in the array.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_type": "(Any", "param_name": ["passingTest", "predicate"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["An NSSet containing objects that pass the test."], "return_name": [""], "return_type": ["Bool -> Set<AnyHashable>"]}, "method_description": "Returns a set of object that pass a test in a given block, using the specified enumeration options.", "method_name": "objects", "class_name": "NSSet", "params": [{"param_description": "A bitmask that specifies the options for the enumeration.", "param_type": "NSEnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "The block to apply to elements in the set.The block takes two arguments:objThe element in the set.stopA reference to a Boolean value. The block can set the value to true to stop further processing of the set. The stop argument is an out-only argument. You should only ever set this Boolean to true within the block.The block returns a Boolean value that indicates whether obj passed the test.", "param_type": "(Any", "param_name": ["passingTest", "predicate"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": ["true if every object in the receiving set is also present in otherSet, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set.", "method_name": "isSubset", "class_name": "NSSet", "params": [{"param_description": "The set with which to compare the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["of", "otherSet"]}]}, {"return_value": {"return_description": ["true if at least one object in the receiving set is also present in otherSet, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set.", "method_name": "intersects", "class_name": "NSSet", "params": [{"param_description": "The set with which to compare the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["otherSet"]}]}, {"return_value": {"return_description": ["true if the contents of otherSet are equal to the contents of the receiving set, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Compares the receiving set to another set.", "method_name": "isEqual", "class_name": "NSSet", "params": [{"param_description": "The set with which to compare the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["to", "otherSet"]}]}, {"return_value": {"return_description": ["A set containing the results of invoking valueForKey: (with the argument key) on each of the receiving set's members."], "return_name": [""], "return_type": ["Any"]}, "method_description": "Return a set containing the results of invoking valueForKey: on each of the receiving set's members.", "method_name": "value", "class_name": "NSSet", "params": [{"param_description": "The name of one of the properties of the receiving set's members.", "param_type": "String", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Invokes setValue:forKey: on each of the set\u2019s members.", "method_name": "setValue", "class_name": "NSSet", "params": [{"param_description": "The value for the property identified by key.", "param_type": "Any", "param_name": ["value"]}, {"param_description": "The name of one of the properties of the set's members.", "param_type": "String", "param_name": ["forKey", "key"]}]}, {"return_value": {"return_description": ["An NSArray containing the set\u2019s content sorted as specified by sortDescriptors."], "return_name": [""], "return_type": ["[Any]"]}, "method_description": "Returns an array of the set\u2019s content sorted as specified by a given array of sort descriptors.", "method_name": "sortedArray", "class_name": "NSSet", "params": [{"param_description": "An array of NSSortDescriptor objects.", "param_type": "[NSSortDescriptor]", "param_name": ["using", "sortDescriptors"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Raises an exception.", "method_name": "addObserver", "class_name": "NSSet", "params": [{"param_description": "The object to register for KVO notifications. The observer must implement the key-value observing method observeValue(forKeyPath:of:change:context:).", "param_type": "NSObject", "param_name": ["observer"]}, {"param_description": "The key path, relative to the set, of the property to observe. This value must not be nil.", "param_type": "String", "param_name": ["forKeyPath", "keyPath"]}, {"param_description": "A combination of the NSKeyValueObservingOptions values that specifies what is included in observation notifications. For possible values, see NSKeyValueObservingOptions.", "param_type": "NSKeyValueObservingOptions", "param_name": ["options"]}, {"param_description": "Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).", "param_type": "UnsafeMutableRawPointer", "param_name": ["context"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Raises an exception.", "method_name": "removeObserver", "class_name": "NSSet", "params": [{"param_description": "The object to remove as an observer.", "param_type": "NSObject", "param_name": ["observer"]}, {"param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_type": "String", "param_name": ["forKeyPath", "keyPath"]}, {"param_description": "Arbitrary data that is passed to observer in observeValue(forKeyPath:of:change:context:).", "param_type": "UnsafeMutableRawPointer", "param_name": ["context"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Raises an exception.", "method_name": "removeObserver", "class_name": "NSSet", "params": [{"param_description": "The object to remove as an observer.", "param_type": "NSObject", "param_name": ["observer"]}, {"param_description": "A key-path, relative to the set, for which observer is registered to receive KVO change notifications. This value must not be nil.", "param_type": "String", "param_name": ["forKeyPath", "keyPath"]}]}, {"return_value": {"return_description": ["A string that represents the contents of the set, formatted as a property list."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a string that represents the contents of the set, formatted as a property list.", "method_name": "description", "class_name": "NSSet", "params": [{"param_description": "On iOS and macOS 10.5 and later, either an instance of NSDictionary or an NSLocale object may be used for locale.In OS X v10.4 and earlier it must be an instance of NSDictionary.", "param_type": "Any", "param_name": ["withLocale", "locale"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "method_description": "", "method_name": "enumerateIndexPaths", "class_name": "NSSet", "params": [{"param_description": "", "param_type": "NSEnumerationOptions", "param_name": ["options", "opts"]}, {"param_description": "", "param_type": "(IndexPath", "param_name": ["using", "block"]}, {"param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["NSFastEnumerationIterator"]}, "method_description": "Return an iterator over the elements of this sequence.", "method_name": "makeIterator", "class_name": "NSSet", "params": []}], "package_name": "swift"}
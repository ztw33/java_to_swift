{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An empty document node\u2014that is, an XMLDocument instance without a root element or XML-declaration information (version, encoding, standalone flag). Returns nil if the object couldn't be created."]}, "method_name": "document", "class_name": "XMLNode", "method_description": "Returns an empty document node.", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLDocument object initialized with the root element element or nil if the object couldn't be created. "]}, "method_name": "document", "class_name": "XMLNode", "method_description": "Returns an XMLDocument object initialized with a given root element.", "params": [{"param_type": "XMLElement", "param_name": ["withRootElement", "element"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLElement object or nil if the object couldn't be created. "]}, "method_name": "element", "class_name": "XMLNode", "method_description": "Returns an XMLElement object with a given tag identifier, or name ", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLElement object or nil if the object couldn't be created."]}, "method_name": "element", "class_name": "XMLNode", "method_description": "Returns an XMLElement object with the given tag (name), attributes, and children. ", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "[XMLNode]", "param_name": ["children"], "param_description": ""}, {"param_type": "[XMLNode]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLElement object with a single text-node child\u2014an NSXMLNode object of kind XMLNode.Kind.text\u2014containing the text specified in string. Returns nil if the object couldn't be created. "]}, "method_name": "element", "class_name": "XMLNode", "method_description": "Returns an XMLElement object with a single text-node child containing the specified text. ", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["stringValue", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An XMLElement object or nil if the object cannot be created."]}, "method_name": "element", "class_name": "XMLNode", "method_description": "Returns an element whose fully qualified name is specified.", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["uri", "URI"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLNode object of kind XMLNode.Kind.attribute or nil if the object couldn't be created."]}, "method_name": "attribute", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing an attribute node with a given name and string. ", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["stringValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLNode object of kind XMLNode.Kind.attribute or nil if the object couldn't be created."]}, "method_name": "attribute", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing an attribute node with a given qualified name and string. ", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["uri", "URI"], "param_description": ""}, {"param_type": "String", "param_name": ["stringValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLNode object of kind XMLNode.Kind.text initialized with the textual value or nil if the object couldn't be created."]}, "method_name": "text", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing a text node with specified content.", "params": [{"param_type": "String", "param_name": ["withStringValue", "stringValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An XMLNode object representing an comment node (XMLNode.Kind.comment) containing the text stringValue or nil if the object couldn't be created. If stringValue is nil or an empty string, a content-less comment node is returned (<!--->)."]}, "method_name": "comment", "class_name": "XMLNode", "method_description": "Returns an XMLNode object representing a comment node containing given text.", "params": [{"param_type": "String", "param_name": ["withStringValue", "stringValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLNode object of kind XMLNode.Kind.namespace or nil if the object couldn't be created."]}, "method_name": "namespace", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing a namespace with a specified name and URI.", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["stringValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLDTDNode object representing the DTD declaration or nil if the object couldn't be created."]}, "method_name": "dtdNode", "class_name": "XMLNode", "method_description": "Returns a XMLDTDNode object representing the DTD declaration for an element, attribute, entity, or notation based on a given string.", "params": [{"param_type": "String", "param_name": ["withXMLString", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An NSXMLNode object of kind XMLNode.Kind.namespace or nil if the object couldn't be created. If something other than a predefined-namespace prefix is specified, the method returns nil."]}, "method_name": "predefinedNamespace", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing one of the predefined namespaces with the specified prefix.", "params": [{"param_type": "String", "param_name": ["forPrefix", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["An NSXMLNode object  of kind XMLNode.Kind.processingInstruction or nil if the object couldn't be created."]}, "method_name": "processingInstruction", "class_name": "XMLNode", "method_description": "Returns an NSXMLNode object representing a processing instruction with a specified name and value.", "params": [{"param_type": "String", "param_name": ["withName", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["stringValue"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setStringValue", "class_name": "XMLNode", "method_description": "Sets the content of the receiver as a string value and, optionally, resolves character references, predefined entities, and user-defined entities as declared in the associated DTD.", "params": [{"param_type": "String", "param_name": ["string"], "param_description": ""}, {"param_type": "Bool", "param_name": ["resolvingEntities", "resolve"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An NSXMLNode object or nil f the receiver has no children. "]}, "method_name": "child", "class_name": "XMLNode", "method_description": "Returns the child node of the receiver at the specified location.", "params": [{"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "detach", "class_name": "XMLNode", "method_description": "Detaches the receiver from its parent node.", "params": []}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "xmlString", "class_name": "XMLNode", "method_description": "Returns the string representation of the receiver as it would appear in an XML document, with one or more output options specified.", "params": [{"param_type": "XMLNode.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "canonicalXMLStringPreservingComments", "class_name": "XMLNode", "method_description": "Returns a string object encapsulating the receiver\u2019s XML in canonical form.", "params": [{"param_type": "Bool", "param_name": ["comments"], "param_description": ""}]}, {"return_value": {"return_type": ["[XMLNode]"], "return_name": [""], "return_description": ["An array of NSXMLNode objects that match the query, or an empty array if there are no matches."]}, "method_name": "nodes", "class_name": "XMLNode", "method_description": "Returns the nodes resulting from executing an XPath query upon the receiver.", "params": [{"param_type": "String", "param_name": ["forXPath", "xpath"], "param_description": ""}]}, {"return_value": {"return_type": ["[Any]"], "return_name": [""], "return_description": []}, "method_name": "objects", "class_name": "XMLNode", "method_description": "Returns the objects resulting from executing an XQuery query upon the receiver.", "params": [{"param_type": "String", "param_name": ["forXQuery", "xquery"], "param_description": ""}]}, {"return_value": {"return_type": ["[Any]"], "return_name": [""], "return_description": []}, "method_name": "objects", "class_name": "XMLNode", "method_description": "Returns the objects resulting from executing an XQuery query upon the receiver.", "params": [{"param_type": "String", "param_name": ["forXQuery", "xquery"], "param_description": ""}, {"param_type": "Any]", "param_name": ["constants"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "localName", "class_name": "XMLNode", "method_description": "Returns the local name from the specified qualified name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": []}, "method_name": "prefix", "class_name": "XMLNode", "method_description": "Returns the prefix from the specified qualified name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}], "Vars": [{"var_type": "Int", "var_description": "Returns the index of the receiver identifying its position relative to its sibling nodes.", "var_name": "index"}, {"var_type": "XMLNode.Kind", "var_description": "Returns the kind of node the receiver is as a constant of type XMLNode.Kind.", "var_name": "kind"}, {"var_type": "Int", "var_description": "Returns the nesting level of the receiver within the tree hierarchy.", "var_name": "level"}, {"var_type": "String", "var_description": "Returns the name of the receiver.", "var_name": "name"}, {"var_type": "Any", "var_description": "Returns the object value of the receiver. ", "var_name": "objectValue"}, {"var_type": "String", "var_description": "Returns the content of the receiver as a string value.", "var_name": "stringValue"}, {"var_type": "String", "var_description": "Returns the URI associated with the receiver.", "var_name": "uri"}, {"var_type": "XMLDocument", "var_description": "Returns the XMLDocument object containing the root element and representing the XML document as a whole.", "var_name": "rootDocument"}, {"var_type": "XMLNode", "var_description": "Returns the parent node of the receiver.", "var_name": "parent"}, {"var_type": "Int", "var_description": "Returns the number of child nodes the receiver has.", "var_name": "childCount"}, {"var_type": "[XMLNode]", "var_description": "Returns an immutable array containing the child nodes of the receiver (as NSXMLNode objects).", "var_name": "children"}, {"var_type": "XMLNode", "var_description": "Returns the next NSXMLNode object in document order.", "var_name": "next"}, {"var_type": "XMLNode", "var_description": "Returns the next NSXMLNode object that is a sibling node to the receiver.", "var_name": "nextSibling"}, {"var_type": "XMLNode", "var_description": "Returns the previous NSXMLNode object in document order.", "var_name": "previous"}, {"var_type": "XMLNode", "var_description": "Returns the previous NSXMLNode object that is a sibling node to the receiver.", "var_name": "previousSibling"}, {"var_type": "String", "var_description": "Returns the string representation of the receiver as it would appear in an XML document.", "var_name": "xmlString"}, {"var_type": "String", "var_description": "Returns a description of the receiver.", "var_name": "description"}, {"var_type": "String", "var_description": "Returns the XPath expression identifying the receiver\u2019s location in the document tree.", "var_name": "xPath"}, {"var_type": "String", "var_description": "Returns the local name of the receiver.", "var_name": "localName"}, {"var_type": "String", "var_description": "Returns the prefix of the receiver\u2019s name.", "var_name": "prefix"}], "subclass_list": [], "class_description": "Node objects can be of different kinds, corresponding to the following markup constructs in an XML document: element, attribute, text, processing instruction, namespace, and comment. In addition, a document-node object (specifically, an instance of XMLDocument) represents an XML document in its entirety. XMLNode objects can also represent document type declarations as well as declarations in Document Type Definitions (DTDs). Class factory methods of XMLNode enable you to create nodes of each kind. Only document, element, and DTD nodes may have child nodes. \nAmong the XML family of classes (excluding XMLParser) the XMLNode class is the base class. Inheriting from it are the classes XMLElement, XMLDocument, XMLDTD, and XMLDTDNode. XMLNode specifies the interface common to all XML node objects and defines common node behavior and attributes, for example hierarchy level, node name and value, tree traversal, and the ability to emit representative XML markup text.\nYou can subclass XMLNode if you want nodes of kinds different from the supported ones, You can also create a subclass with more specialized attributes or behavior than XMLNode.\nTo subclass XMLNode you need to override the primary initializer, init(kind:options:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary.\nkind\nparent\nname\nchild(at:)\nname\nchildCount\nobjectValue\nchildren\nobjectValue\ndetach()\nstringValue\nlocalName\nsetStringValue(_:resolvingEntities:)\nprefix\nindex\nuri\nBy default XMLNode implements the NSObject isEqual(_:) method to perform a deep comparison: two XMLNode objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. The comparison looks at the node and its children, but does not include the node\u2019s parent. If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the XMLDocument class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of XMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate.\n", "class_name": "XMLNode"}
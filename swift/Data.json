{"package_name": "foundation", "interface_list": ["CKRecordValueProtocol", "CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "MutableCollection", "RandomAccessCollection", "RangeReplaceableCollection", "ReferenceConvertible"], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "resetBytes", "class_name": "Data", "method_description": "Sets a region of the data buffer to 0.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "write", "class_name": "Data", "method_description": "Writes the contents of the data buffer to a location.", "params": [{"param_type": "URL", "param_name": ["to", "url"], "param_description": ""}, {"param_type": "Data.WritingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["The Base-64 encoded data."]}, "method_name": "base64EncodedData", "class_name": "Data", "method_description": "Returns Base-64 encoded data.", "params": [{"param_type": "Data.Base64EncodingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The Base-64 encoded string."]}, "method_name": "base64EncodedString", "class_name": "Data", "method_description": "Returns a Base-64 encoded string.", "params": [{"param_type": "Data.Base64EncodingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["ResultType rethrows -> ResultType"], "return_name": [""], "return_description": []}, "method_name": "ContentType>", "class_name": "Data", "method_description": "Accesses the raw bytes in the data's buffer.", "params": [{"param_type": "(UnsafePointer<ContentType>", "param_name": ["body"], "param_description": ""}]}, {"return_value": {"return_type": ["ResultType rethrows -> ResultType"], "return_name": [""], "return_description": []}, "method_name": "ContentType>", "class_name": "Data", "method_description": "Mutates the raw bytes in the data's buffer.", "params": [{"param_type": "(UnsafeMutablePointer<ContentType>", "param_name": ["body"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "copyBytes", "class_name": "Data", "method_description": "Copies the contents of the data to memory.", "params": [{"param_type": "UnsafeMutablePointer<UInt8>", "param_name": ["to", "pointer"], "param_description": ""}, {"param_type": "Int", "param_name": ["count"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "copyBytes", "class_name": "Data", "method_description": "Copies a subset of the contents of the data to memory.", "params": [{"param_type": "UnsafeMutablePointer<UInt8>", "param_name": ["to", "pointer"], "param_description": ""}, {"param_type": "Range<Data.Index>", "param_name": ["from", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["Number of bytes copied into the destination buffer."]}, "method_name": "copyBytes", "class_name": "Data", "method_description": "Copies the bytes in a range from the data into a buffer. ", "params": [{"param_type": "UnsafeMutableBufferPointer<DestinationType>", "param_name": ["to", "buffer"], "param_description": ""}, {"param_type": "Range<Data.Index>", "param_name": ["from", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Adds an element to the end of the collection.", "params": [{"param_type": "UInt8", "param_name": ["newElement"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Appends the specified data to the end of this data.", "params": [{"param_type": "Data", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Append a buffer of bytes to the data.", "params": [{"param_type": "UnsafeBufferPointer<SourceType>", "param_name": ["buffer"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Appends the specified bytes from memory to the end of the data.", "params": [{"param_type": "UnsafePointer<UInt8>", "param_name": ["bytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["count"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Appends the bytes in the specified array to the end of the data.", "params": [{"param_type": "[UInt8]", "param_name": ["contentsOf", "bytes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "Data", "method_description": "Inserts a new element into the collection at the specified position.", "params": [{"param_type": "UInt8", "param_name": ["newElement"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "i"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "Data", "method_description": "Inserts the elements of a sequence into the collection at the specified position.", "params": [{"param_type": "Collection", "param_name": ["contentsOf", "newElements"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "i"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "reserveCapacity", "class_name": "Data", "method_description": "Prepares the collection to store the specified number of elements, when doing so is appropriate for the underlying type.", "params": [{"param_type": "Int", "param_name": ["n"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The removed element."]}, "method_name": "remove", "class_name": "Data", "method_description": "Removes and returns the element at the specified position.", "params": [{"param_type": "Int", "param_name": ["at", "position"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeAll", "class_name": "Data", "method_description": "Removes all elements from the collection.", "params": [{"param_type": "Bool", "param_name": ["keepingCapacity", "keepCapacity"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeSubrange", "class_name": "Data", "method_description": "Removes the elements in the specified subrange from the collection.", "params": [{"param_type": "Range<Int>", "param_name": ["bounds"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceSubrange", "class_name": "Data", "method_description": "Replaces a region of bytes in the data with new data.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["subrange"], "param_description": ""}, {"param_type": "Data", "param_name": ["with", "data"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceSubrange", "class_name": "Data", "method_description": "Replaces a region of bytes in the data with new bytes from a collection.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["subrange"], "param_description": ""}, {"param_type": "Collection", "param_name": ["with", "newElements"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceSubrange", "class_name": "Data", "method_description": "Replaces a region of bytes in the data with new bytes from a buffer.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["subrange"], "param_description": ""}, {"param_type": "UnsafeBufferPointer<SourceType>", "param_name": ["with", "buffer"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceSubrange", "class_name": "Data", "method_description": "Replaces a region of bytes in the data with bytes from memory.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["subrange"], "param_description": ""}, {"param_type": "UnsafeRawPointer", "param_name": ["with", "bytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["count", "cnt"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."]}, "method_name": "first", "class_name": "Data", "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."]}, "method_name": "max", "class_name": "Data", "method_description": "Returns the maximum element in the sequence.", "params": []}, {"return_value": {"return_type": ["Bool rethrows -> UInt8"], "return_name": [""], "return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."]}, "method_name": "max", "class_name": "Data", "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "params": [{"param_type": "(UInt8", "param_name": ["by", "areInIncreasingOrder"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."]}, "method_name": "min", "class_name": "Data", "method_description": "Returns the minimum element in the sequence.", "params": []}, {"return_value": {"return_type": ["Bool rethrows -> UInt8"], "return_name": [""], "return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."]}, "method_name": "min", "class_name": "Data", "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "params": [{"param_type": "(UInt8", "param_name": ["by", "areInIncreasingOrder"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["Range<Data.Index>"], "return_name": [""], "return_description": ["A Range specifying the location of the found data, or nil if a match could not be found."]}, "method_name": "range", "class_name": "Data", "method_description": "Finds the range of the specified data as a subsequence of this data, if it exists.", "params": [{"param_type": "Data", "param_name": ["of", "dataToFind"], "param_description": ""}, {"param_type": "Data.SearchOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "Range<Data.Index>", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Data"], "return_name": [""], "return_description": ["A collection of the elements that isIncluded allowed."]}, "method_name": "filter", "class_name": "Data", "method_description": "Returns a new collection of the same type containing, in order, the elements of the original collection that satisfy the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["isIncluded"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."]}, "method_name": "prefix", "class_name": "Data", "method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "params": [{"param_type": "Int", "param_name": ["maxLength"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence up to, and including, the end position."]}, "method_name": "prefix", "class_name": "Data", "method_description": "Returns a subsequence from the start of the collection through the specified position.", "params": [{"param_type": "Int", "param_name": ["through", "position"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence up to, but not including, the end position."]}, "method_name": "prefix", "class_name": "Data", "method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "params": [{"param_type": "Int", "param_name": ["upTo", "end"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Data"], "return_name": [""], "return_description": []}, "method_name": "prefix", "class_name": "Data", "method_description": "Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.", "params": [{"param_type": "(UInt8", "param_name": ["while", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."]}, "method_name": "suffix", "class_name": "Data", "method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "params": [{"param_type": "Int", "param_name": ["maxLength"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence starting at the start position."]}, "method_name": "suffix", "class_name": "Data", "method_description": "Returns a subsequence from the specified position to the end of the collection.", "params": [{"param_type": "Int", "param_name": ["from", "start"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence leaving off the last element of the sequence."]}, "method_name": "dropLast", "class_name": "Data", "method_description": "Returns a subsequence containing all but the last element of the sequence.", "params": []}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence that leaves off k elements from the end."]}, "method_name": "dropLast", "class_name": "Data", "method_description": "Returns a subsequence containing all but the specified number of final elements.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence starting after the first element of the sequence."]}, "method_name": "dropFirst", "class_name": "Data", "method_description": "Returns a subsequence containing all but the first element of the sequence.", "params": []}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A subsequence starting after the specified number of elements."]}, "method_name": "dropFirst", "class_name": "Data", "method_description": "Returns a subsequence containing all but the given number of initial elements.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Data"], "return_name": [""], "return_description": []}, "method_name": "drop", "class_name": "Data", "method_description": "Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.", "params": [{"param_type": "(UInt8", "param_name": ["while", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["A newly created data buffer that is shorter by the given amount than the original."]}, "method_name": "advanced", "class_name": "Data", "method_description": "Returns a new data buffer created by removing the given number of bytes from the front of the original buffer.", "params": [{"param_type": "Int", "param_name": ["by", "amount"], "param_description": ""}]}, {"return_value": {"return_type": ["Result rethrows -> Result"], "return_name": [""], "return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."]}, "method_name": "reduce", "class_name": "Data", "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "params": [{"param_type": "Result", "param_name": ["initialResult"], "param_description": ""}, {"param_type": "(Result", "param_name": ["nextPartialResult"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["Void rethrows"], "return_name": [""], "return_description": []}, "method_name": "forEach", "class_name": "Data", "method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "params": [{"param_type": "(UInt8", "param_name": ["body"], "param_description": ""}]}, {"return_value": {"return_type": ["EnumeratedSequence<Data>"], "return_name": [""], "return_description": ["A sequence of pairs enumerating the sequence."]}, "method_name": "enumerated", "class_name": "Data", "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "params": []}, {"return_value": {"return_type": ["Data.Iterator"], "return_name": [""], "return_description": []}, "method_name": "makeIterator", "class_name": "Data", "method_description": "Returns an iterator over the contents of the data.", "params": []}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateBytes", "class_name": "Data", "method_description": "Enumerates the contents of the data's buffer.", "params": [{"param_type": "(UnsafeBufferPointer<UInt8>", "param_name": ["block"], "param_description": ""}, {"param_type": "Data.Index", "param_name": ["Data.Index"], "param_description": ""}, {"param_type": "inout Bool", "param_name": ["inout", "Bool"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows"], "return_name": [""], "return_description": []}, "method_name": "sort", "class_name": "Data", "method_description": "Sorts the collection in place, using the given predicate as the comparison between elements.", "params": [{"param_type": "(UInt8", "param_name": ["by", "areInIncreasingOrder"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["[UInt8]"], "return_name": [""], "return_description": ["A sorted array of the sequence\u2019s elements."]}, "method_name": "sorted", "class_name": "Data", "method_description": "Returns the elements of the sequence, sorted.", "params": []}, {"return_value": {"return_type": ["Bool rethrows -> [UInt8]"], "return_name": [""], "return_description": ["A sorted array of the sequence\u2019s elements."]}, "method_name": "sorted", "class_name": "Data", "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "params": [{"param_type": "(UInt8", "param_name": ["by", "areInIncreasingOrder"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["ReversedCollection<Data>"], "return_name": [""], "return_description": []}, "method_name": "reversed", "class_name": "Data", "method_description": "Returns a view presenting the elements of the collection in reverse order.", "params": []}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "subdata", "class_name": "Data", "method_description": "Returns a new copy of the data in a specified range.", "params": [{"param_type": "Range<Data.Index>", "param_name": ["in", "range"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["An array of subsequences, split from this collection\u2019s elements."]}, "method_name": "split", "class_name": "Data", "method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "params": [{"param_type": "Int", "param_name": ["maxSplits"], "param_description": ""}, {"param_type": "Bool", "param_name": ["omittingEmptySubsequences"], "param_description": ""}, {"param_type": "(UInt8", "param_name": ["whereSeparator", "isSeparator"], "param_description": ""}]}, {"return_value": {"return_type": ["[Data]"], "return_name": [""], "return_description": ["An array of subsequences, split from this collection\u2019s elements."]}, "method_name": "split", "class_name": "Data", "method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "params": [{"param_type": "UInt8", "param_name": ["separator"], "param_description": ""}, {"param_type": "Int", "param_name": ["maxSplits"], "param_description": ""}, {"param_type": "Bool", "param_name": ["omittingEmptySubsequences"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether or not two data buffers are equivalent.", "params": [{"param_type": "Data", "param_name": ["d1"], "param_description": ""}, {"param_type": "Data", "param_name": ["d2"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if this sequence and other contain the same elements in the same order."]}, "method_name": "elementsEqual", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "params": [{"param_type": "Sequence", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."]}, "method_name": "starts", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "params": [{"param_type": "Sequence", "param_name": ["with", "possiblePrefix"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."]}, "method_name": "lexicographicallyPrecedes", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "params": [{"param_type": "Sequence", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Bool"], "return_name": [""], "return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."]}, "method_name": "lexicographicallyPrecedes", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "params": [{"param_type": "Sequence", "param_name": ["other"], "param_description": ""}, {"param_type": "(UInt8", "param_name": ["by", "areInIncreasingOrder"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:)."]}, "method_name": "index", "class_name": "Data", "method_description": "Returns an index that is the specified distance from the given index.", "params": [{"param_type": "Int", "param_name": ["i"], "param_description": ""}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": ""}]}, {"return_value": {"return_type": ["Data.Index"], "return_name": [""], "return_description": []}, "method_name": "index", "class_name": "Data", "method_description": "Returns the index that immediately follows the specified index.", "params": [{"param_type": "Data.Index", "param_name": ["after", "i"], "param_description": ""}]}, {"return_value": {"return_type": ["Data.Index"], "return_name": [""], "return_description": []}, "method_name": "index", "class_name": "Data", "method_description": "Returns the index that immediately precedes the specified index.", "params": [{"param_type": "Data.Index", "param_name": ["before", "i"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The distance between start and end."]}, "method_name": "distance", "class_name": "Data", "method_description": "Returns the distance between two indices.", "params": [{"param_type": "Int", "param_name": ["from", "start"], "param_description": ""}, {"param_type": "Int", "param_name": ["to", "end"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Bool"], "return_name": [""], "return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."]}, "method_name": "allSatisfy", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["predicate"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "", "params": [{"param_type": "Sequence", "param_name": ["contentsOf", "newElements"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "Data", "method_description": "Adds the elements of a sequence or collection to the end of this collection.", "params": [{"param_type": "Sequence", "param_name": ["contentsOf", "newElements"], "param_description": ""}]}, {"return_value": {"return_type": ["ElementOfResult rethrows -> [ElementOfResult]"], "return_name": [""], "return_description": ["An array of the non-nil results of calling transform with each element of the sequence."]}, "method_name": "compactMap", "class_name": "Data", "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "params": [{"param_type": "(UInt8", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the element was found in the sequence; otherwise, false."]}, "method_name": "contains", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "params": [{"param_type": "UInt8", "param_name": ["element"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."]}, "method_name": "contains", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Bool"], "return_name": [""], "return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."]}, "method_name": "elementsEqual", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "params": [{"param_type": "Sequence", "param_name": ["other"], "param_description": ""}, {"param_type": "(UInt8", "param_name": ["by", "areEquivalent"], "param_description": ""}, {"param_type": "Sequence.Element", "param_name": ["Sequence.Element"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "Data", "method_description": "", "params": [{"param_type": "Encoder", "param_name": ["to", "encoder"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The first index where element is found. If element is not found in the collection, returns nil."]}, "method_name": "firstIndex", "class_name": "Data", "method_description": "Returns the first index where the specified value appears in the collection.", "params": [{"param_type": "UInt8", "param_name": ["of", "element"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."]}, "method_name": "firstIndex", "class_name": "Data", "method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["String rethrows -> [String]"], "return_name": [""], "return_description": []}, "method_name": "flatMap", "class_name": "Data", "method_description": "", "params": [{"param_type": "(UInt8", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formIndex", "class_name": "Data", "method_description": "Offsets the given index by the specified distance.", "params": [{"param_type": "inout Int", "param_name": ["i"], "param_description": ""}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."]}, "method_name": "formIndex", "class_name": "Data", "method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "params": [{"param_type": "inout Int", "param_name": ["i"], "param_description": ""}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": ""}, {"param_type": "Int", "param_name": ["limitedBy", "limit"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formIndex", "class_name": "Data", "method_description": "Replaces the given index with its successor.", "params": [{"param_type": "inout Int", "param_name": ["after", "i"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formIndex", "class_name": "Data", "method_description": "Replaces the given index with its predecessor.", "params": [{"param_type": "inout Int", "param_name": ["before", "i"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."]}, "method_name": "index", "class_name": "Data", "method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "params": [{"param_type": "Int", "param_name": ["i"], "param_description": ""}, {"param_type": "Int", "param_name": ["offsetBy", "distance"], "param_description": ""}, {"param_type": "Int", "param_name": ["limitedBy", "limit"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."]}, "method_name": "last", "class_name": "Data", "method_description": "Returns the last element of the sequence that satisfies the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."]}, "method_name": "lastIndex", "class_name": "Data", "method_description": "Returns the last index where the specified value appears in the collection.", "params": [{"param_type": "UInt8", "param_name": ["of", "element"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."]}, "method_name": "lastIndex", "class_name": "Data", "method_description": "Returns the index of the last element in the collection that matches the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["T rethrows -> [T]"], "return_name": [""], "return_description": ["An array containing the transformed elements of this sequence."]}, "method_name": "map", "class_name": "Data", "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "params": [{"param_type": "(UInt8", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": ["T rethrows -> [T]"], "return_name": [""], "return_description": ["An array containing the transformed elements of this sequence."]}, "method_name": "map", "class_name": "Data", "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "params": [{"param_type": "(UInt8", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Int"], "return_name": [""], "return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."]}, "method_name": "partition", "class_name": "Data", "method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.", "params": [{"param_type": "(UInt8", "param_name": ["by", "belongsInSecondPartition"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool rethrows -> Int"], "return_name": [""], "return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."]}, "method_name": "partition", "class_name": "Data", "method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.", "params": [{"param_type": "(UInt8", "param_name": ["by", "belongsInSecondPartition"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The first element of the collection if the collection is not empty; otherwise, nil."]}, "method_name": "popFirst", "class_name": "Data", "method_description": "Removes and returns the first element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection if the collection has one or more elements; otherwise, nil."]}, "method_name": "popLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection if the collection is not empty; otherwise, nil."]}, "method_name": "popLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection if the collection is not empty; otherwise, nil."]}, "method_name": "popLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["A random element from the collection. If the collection is empty, the method returns nil."]}, "method_name": "randomElement", "class_name": "Data", "method_description": "Returns a random element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["A random element from the collection. If the collection is empty, the method returns nil."]}, "method_name": "randomElement", "class_name": "Data", "method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "params": [{"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": ""}]}, {"return_value": {"return_type": ["rethrows -> Result"], "return_name": [""], "return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."]}, "method_name": "reduce", "class_name": "Data", "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "params": [{"param_type": "Result", "param_name": ["into", "initialResult"], "param_description": ""}, {"param_type": "(inout Result", "param_name": ["updateAccumulatingResult"], "param_description": ""}, {"param_type": "UInt8", "param_name": ["UInt8"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": []}, "method_name": "removeAll", "class_name": "Data", "method_description": "Removes all the elements that satisfy the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": [""], "return_name": [""], "return_description": []}, "method_name": "removeAll", "class_name": "Data", "method_description": "Removes all the elements that satisfy the given predicate.", "params": [{"param_type": "(UInt8", "param_name": ["where", "predicate"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The first element of the collection."]}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes and returns the first element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The first element of the collection."]}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes and returns the first element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The removed element."]}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes and returns the first element of the collection.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes the specified number of elements from the beginning of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes the specified number of elements from the beginning of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeFirst", "class_name": "Data", "method_description": "Removes the specified number of elements from the beginning of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection."]}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection."]}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": ["UInt8"], "return_name": [""], "return_description": ["The last element of the collection."]}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes and returns the last element of the collection.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes the given number of elements from the end of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes the specified number of elements from the end of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeLast", "class_name": "Data", "method_description": "Removes the specified number of elements from the end of the collection.", "params": [{"param_type": "Int", "param_name": ["k"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeSubrange", "class_name": "Data", "method_description": "Removes the elements in the specified subrange from the collection.", "params": [{"param_type": "RangeExpression", "param_name": ["bounds"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "R>", "class_name": "Data", "method_description": "Replaces the specified subrange of elements with the given collection.", "params": [{"param_type": "RangeExpression", "param_name": ["subrange"], "param_description": ""}, {"param_type": "Collection", "param_name": ["with", "newElements"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "reverse", "class_name": "Data", "method_description": "Reverses the elements of the collection in place.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "shuffle", "class_name": "Data", "method_description": "Shuffles the collection in place.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "shuffle", "class_name": "Data", "method_description": "Shuffles the collection in place, using the given generator as a source for randomness.", "params": [{"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": ""}]}, {"return_value": {"return_type": ["[UInt8]"], "return_name": [""], "return_description": ["A shuffled array of this sequence\u2019s elements."]}, "method_name": "shuffled", "class_name": "Data", "method_description": "Returns the elements of the sequence, shuffled.", "params": []}, {"return_value": {"return_type": ["[UInt8]"], "return_name": [""], "return_description": ["An array of this sequence\u2019s elements in a shuffled order."]}, "method_name": "shuffled", "class_name": "Data", "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "params": [{"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "sort", "class_name": "Data", "method_description": "Sorts the collection in place.", "params": []}, {"return_value": {"return_type": ["Bool rethrows -> Bool"], "return_name": [""], "return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."]}, "method_name": "starts", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "params": [{"param_type": "Sequence", "param_name": ["with", "possiblePrefix"], "param_description": ""}, {"param_type": "(UInt8", "param_name": ["by", "areEquivalent"], "param_description": ""}, {"param_type": "Sequence.Element", "param_name": ["Sequence.Element"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "swapAt", "class_name": "Data", "method_description": "Exchanges the values at the specified indices of the collection.", "params": [{"param_type": "Int", "param_name": ["i"], "param_description": ""}, {"param_type": "Int", "param_name": ["j"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "!=", "class_name": "Data", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "params": [{"param_type": "Data", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Data", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "Data", "method_description": "Creates a new collection by concatenating the elements of a sequence and a collection.", "params": [{"param_type": "Sequence", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Data", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "Data", "method_description": "Creates a new collection by concatenating the elements of a collection and a sequence.", "params": [{"param_type": "Data", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Sequence", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "", "class_name": "Data", "method_description": "Creates a new collection by concatenating the elements of two collections.", "params": [{"param_type": "Data", "param_name": ["lhs"], "param_description": ""}, {"param_type": "RangeReplaceableCollection", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "", "class_name": "Data", "method_description": "Appends the elements of a sequence to a range-replaceable collection.", "params": [{"param_type": "inout Data", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Sequence", "param_name": ["rhs"], "param_description": ""}]}], "Vars": [{"var_type": "Bool", "var_description": "A Boolean value indicating whether the collection is empty.", "var_name": "isEmpty"}, {"var_type": "LazyCollection<Data>", "var_description": "A view onto this collection that provides lazy implementations of normally eager operations, such as map and filter.", "var_name": "lazy"}, {"var_type": "LazySequence<Data>", "var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_name": "lazy"}, {"var_type": "Data.Index", "var_description": "The beginning index into the data.", "var_name": "startIndex"}, {"var_type": "Data.Index", "var_description": "The end index into the data.", "var_name": "endIndex"}, {"var_type": "String", "var_description": "A textual description of the data.", "var_name": "description"}, {"var_type": "String", "var_description": "A textual description the data suitable for debugging.", "var_name": "debugDescription"}, {"var_type": "Mirror", "var_description": "A mirror that reflects the data.", "var_name": "customMirror"}, {"var_type": "Int", "var_description": "The hash value for the data.", "var_name": "hashValue"}, {"var_type": "Int", "var_description": "", "var_name": "count"}, {"var_type": "Int", "var_description": "The number of elements in the collection.", "var_name": "count"}, {"var_type": "UInt8", "var_description": "The first element of the collection.", "var_name": "first"}, {"var_type": "Range<Int>", "var_description": "", "var_name": "indices"}, {"var_type": "Range<Int>", "var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_name": "indices"}, {"var_type": "UInt8", "var_description": "The last element of the collection.", "var_name": "last"}, {"var_type": "Int", "var_description": "A value less than or equal to the number of elements in the sequence, calculated nondestructively.", "var_name": "underestimatedCount"}, {"var_type": "Int", "var_description": "A value less than or equal to the number of elements in the collection.", "var_name": "underestimatedCount"}], "subclass_list": [], "class_description": "The Data value type allows simple byte buffers to take on the behavior of Foundation objects. You can create empty or pre-populated buffers from a variety of sources and later add or remove bytes. You can filter and sort the content, or compare against other buffers. You can manipulate subranges of bytes and iterate over some or all of them.\nData bridges to the NSData class and its mutable subclass, NSMutableData. You can use these interchangeably in code that interacts with Objective-C APIs.\n", "class_name": "Data"}
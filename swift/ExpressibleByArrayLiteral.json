{"class_description": "An array literal is a simple way of expressing a list of values. Simply surround a comma-separated list of values, instances, or literals with square brackets to create an array literal. You can use an array literal anywhere an instance of an ExpressibleByArrayLiteral type is expected: as a value assigned to a variable or constant, as a parameter to a method or initializer, or even as the subject of a nonmutating operation like map(_:) or filter(_:).\nArrays, sets, and option sets all conform to ExpressibleByArrayLiteral, and your own custom types can as well. Here\u2019s an example of creating a set and an array using array literals:\nThe Set and Array types each handle array literals in their own way to create new instances. In this case, the newly created set drops the duplicate value (\u201cDave\u201d) and doesn\u2019t maintain the order of the array literal\u2019s elements. The new array, on the other hand, matches the order and number of elements provided.\nNote\nAn array literal is not the same as an Array instance. You can\u2019t initialize a type that conforms to ExpressibleByArrayLiteral simply by assigning an existing array.\nWhenever possible, Swift\u2019s compiler infers the full intended type of your array literal. Because Array is the default type for an array literal, without writing any other code, you can declare an array with a particular element type by providing one or more values.\nIn this example, the compiler infers the full type of each array literal.\nAn empty array literal alone doesn\u2019t provide enough information for the compiler to infer the intended type of the Array instance. When using an empty array literal, specify the type of the variable or constant.\nBecause many functions and initializers fully specify the types of their parameters, you can often use an array literal with or without elements as a parameter. For example, the sum(_:) function shown here takes an Int array as a parameter:\nWhen you call a function that does not fully specify its parameters\u2019 types, use the type-cast operator (as) to specify the type of an array literal. For example, the log(name:value:) function shown here has an unconstrained generic value parameter.\nAdd the capability to be initialized with an array literal to your own custom types by declaring an init(arrayLiteral:) initializer. The following example shows the array literal initializer for a hypothetical OrderedSet type, which has setlike semantics but maintains the order of its elements.\n", "package_name": "swift", "interface_list": [], "Methods": [], "class_inherit_list": [], "Vars": [], "subclass_list": ["SetAlgebra"], "class_name": "ExpressibleByArrayLiteral"}
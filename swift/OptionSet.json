{"class_description": "You use the OptionSet protocol to represent bitset types, where individual bits represent members of a set. Adopting this protocol in your custom types lets you perform set-related operations such as membership tests, unions, and intersections on those types. What\u2019s more, when implemented using specific criteria, adoption of this protocol requires no extra work on your part.\nWhen creating an option set, include a rawValue property in your type declaration. For your type to automatically receive default implementations for set-related operations, the rawValue property must be of a type that conforms to the FixedWidthInteger protocol, such as Int or UInt8. Next, create unique options as static properties of your custom type using unique powers of two (1, 2, 4, 8, 16, and so forth) for each individual property\u2019s raw value so that each property can be represented by a single bit of the type\u2019s raw value.\nFor example, consider a custom type called ShippingOptions that is an option set of the possible ways to ship a customer\u2019s purchase. ShippingOptions includes a rawValue property of type Int that stores the bit mask of available shipping options. The static members nextDay, secondDay, priority, and standard are unique, individual options.\nDeclare additional preconfigured option set values as static properties initialized with an array literal containing other option values. In the example, because the express static property is assigned an array literal with the nextDay and secondDay options, it will contain those two elements.\nWhen you need to create an instance of an option set, assign one of the type\u2019s static members to your variable or constant. Alternatively, to create an option set instance with multiple members, assign an array literal with multiple static members of the option set. To create an empty instance, assign an empty array literal to your variable.\nUse set-related operations to check for membership and to add or remove members from an instance of your custom option set type. The following example shows how you can determine free shipping options based on a customer\u2019s purchase price:\n", "package_name": "swift", "interface_list": [], "Methods": [], "class_inherit_list": ["RawRepresentable", "SetAlgebra"], "Vars": [], "subclass_list": [], "class_name": "OptionSet"}
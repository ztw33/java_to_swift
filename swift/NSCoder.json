{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "containsValue", "class_name": "NSCoder", "method_description": "Returns a Boolean value that indicates whether an encoded value is available for a string.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeArray", "class_name": "NSCoder", "method_description": "Encodes an array of count items, whose Objective-C type is given by itemType.", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["ofObjCType", "type"], "param_description": ""}, {"param_type": "Int", "param_name": ["count"], "param_description": ""}, {"param_type": "UnsafeRawPointer", "param_name": ["at", "array"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes boolv and associates it with the string key.", "params": [{"param_type": "Bool", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeBycopyObject", "class_name": "NSCoder", "method_description": "Can be overridden by subclasses to encode object so that a copy, rather than a proxy, is created upon decoding.", "params": [{"param_type": "Any", "param_name": ["anObject"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeByrefObject", "class_name": "NSCoder", "method_description": "Can be overridden by subclasses to encode object so that a proxy, rather than a copy, is created upon decoding.", "params": [{"param_type": "Any", "param_name": ["anObject"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeBytes", "class_name": "NSCoder", "method_description": "Encodes a buffer of data whose types are unspecified.", "params": [{"param_type": "UnsafeRawPointer", "param_name": ["byteaddr"], "param_description": ""}, {"param_type": "Int", "param_name": ["length"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeBytes", "class_name": "NSCoder", "method_description": "Encodes a buffer of data, bytesp, whose length is specified by lenv, and associates it with the string key.", "params": [{"param_type": "UnsafePointer<UInt8>", "param_name": ["bytes"], "param_description": ""}, {"param_type": "Int", "param_name": ["length"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeConditionalObject", "class_name": "NSCoder", "method_description": "Can be overridden by subclasses to conditionally encode object, preserving common references to that object.", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeConditionalObject", "class_name": "NSCoder", "method_description": "Conditionally encodes a reference to objv and associates it with the string key only if objv has been unconditionally encoded with encode(_:forKey:).", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a given NSData object.", "params": [{"param_type": "Data", "param_name": ["data"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes realv and associates it with the string key.", "params": [{"param_type": "Double", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes realv and associates it with the string key.", "params": [{"param_type": "Float", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeCInt", "class_name": "NSCoder", "method_description": "Encodes intv and associates it with the string key.", "params": [{"param_type": "Int32", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a given NSInteger and associates it with a given key.", "params": [{"param_type": "Int", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes the 32-bit integer intv and associates it with the string key.", "params": [{"param_type": "Int32", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes the 64-bit integer intv and associates it with the string key.", "params": [{"param_type": "Int64", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes object.", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes the object objv and associates it with the string key.", "params": [{"param_type": "Any", "param_name": ["object"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes point.", "params": [{"param_type": "NSPoint", "param_name": ["point"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes point and associates it with the string key.", "params": [{"param_type": "NSPoint", "param_name": ["point"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodePropertyList", "class_name": "NSCoder", "method_description": "Encodes the property list aPropertyList.", "params": [{"param_type": "Any", "param_name": ["aPropertyList"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes rect.", "params": [{"param_type": "NSRect", "param_name": ["rect"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes rect and associates it with the string key.", "params": [{"param_type": "NSRect", "param_name": ["rect"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeRootObject", "class_name": "NSCoder", "method_description": "Can be overridden by subclasses to encode an interconnected group of Objective-C objects, starting with rootObject.", "params": [{"param_type": "Any", "param_name": ["rootObject"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes size.", "params": [{"param_type": "NSSize", "param_name": ["size"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes size and associates it with the string key.", "params": [{"param_type": "NSSize", "param_name": ["size"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encodeValue", "class_name": "NSCoder", "method_description": "Must be overridden by subclasses to encode a single value residing at address, whose Objective-C type is given by valueType.", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["ofObjCType", "type"], "param_description": ""}, {"param_type": "UnsafeRawPointer", "param_name": ["at", "addr"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a point and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "CGPoint", "param_name": ["point"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a rectangle and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "CGRect", "param_name": ["rect"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes size information and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "CGSize", "param_name": ["size"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes an affine transform and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "CGAffineTransform", "param_name": ["transform"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes edge inset data and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "UIEdgeInsets", "param_name": ["insets"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes offset data and associates it with the specified key in the receiver\u2019s archive.", "params": [{"param_type": "UIOffset", "param_name": ["offset"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes vector data and associates it with the specified key in the coder\u2019s archive.", "params": [{"param_type": "CGVector", "param_name": ["vector"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a given CMTime structure and associates it with a specified key.", "params": [{"param_type": "CMTime", "param_name": ["time"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a given CMTimeRange structure and associates it with a specified key.", "params": [{"param_type": "CMTimeRange", "param_name": ["timeRange"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "Encodes a given CMTimeMapping structure and associates it with a specified key.", "params": [{"param_type": "CMTimeMapping", "param_name": ["timeMapping"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "decodeArray", "class_name": "NSCoder", "method_description": "Decodes an array of count items, whose Objective-C type is given by itemType.", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["ofObjCType", "itemType"], "param_description": ""}, {"param_type": "Int", "param_name": ["count"], "param_description": ""}, {"param_type": "UnsafeMutableRawPointer", "param_name": ["at", "array"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "decodeBool", "class_name": "NSCoder", "method_description": "Decodes and returns a boolean value that was previously encoded with encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["UnsafePointer<UInt8>"], "return_name": [""], "return_description": []}, "method_name": "decodeBytes", "class_name": "NSCoder", "method_description": "Decodes a buffer of data that was previously encoded with encodeBytes(_:length:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["returnedLength", "lengthp"], "param_description": ""}]}, {"return_value": {"return_type": ["UnsafeMutableRawPointer"], "return_name": [""], "return_description": []}, "method_name": "decodeBytes", "class_name": "NSCoder", "method_description": "Decodes a buffer of data whose types are unspecified.", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_name": ["withReturnedLength", "lengthp"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "decodeData", "class_name": "NSCoder", "method_description": "Decodes and returns an NSData object that was previously encoded with encode(_:). Subclasses must override this method.", "params": []}, {"return_value": {"return_type": ["Double"], "return_name": [""], "return_description": []}, "method_name": "decodeDouble", "class_name": "NSCoder", "method_description": "Decodes and returns a double value that was previously encoded with either encode(_:forKey:) or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Float"], "return_name": [""], "return_description": []}, "method_name": "decodeFloat", "class_name": "NSCoder", "method_description": "Decodes and returns a float value that was previously encoded with encode(_:forKey:) or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int32"], "return_name": [""], "return_description": []}, "method_name": "decodeCInt", "class_name": "NSCoder", "method_description": "Decodes and returns an int value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": []}, "method_name": "decodeInteger", "class_name": "NSCoder", "method_description": "Decodes and returns an NSInteger value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int32"], "return_name": [""], "return_description": []}, "method_name": "decodeInt32", "class_name": "NSCoder", "method_description": "Decodes and returns a 32-bit integer value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int64"], "return_name": [""], "return_description": []}, "method_name": "decodeInt64", "class_name": "NSCoder", "method_description": "Decodes and returns a 64-bit integer value that was previously encoded with encodeCInt(_:forKey:), encode(_:forKey:), encode(_:forKey:), or encode(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeObject", "class_name": "NSCoder", "method_description": "Decodes an Objective-C object that was previously encoded with any of the encode...Object: methods.", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeObject", "class_name": "NSCoder", "method_description": "Decodes and returns an Objective-C object that was previously encoded with encode(_:forKey:) or encodeConditionalObject(_:forKey:) and associated with the string key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["NSPoint"], "return_name": [""], "return_description": []}, "method_name": "decodePoint", "class_name": "NSCoder", "method_description": "Decodes and returns an NSPoint structure that was previously encoded with encode(_:).", "params": []}, {"return_value": {"return_type": ["NSPoint"], "return_name": [""], "return_description": []}, "method_name": "decodePoint", "class_name": "NSCoder", "method_description": "Decodes and returns an NSPoint structure that was previously encoded with encode(_:forKey:).", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodePropertyList", "class_name": "NSCoder", "method_description": "Decodes a property list that was previously encoded with encodePropertyList(_:).", "params": []}, {"return_value": {"return_type": ["NSRect"], "return_name": [""], "return_description": []}, "method_name": "decodeRect", "class_name": "NSCoder", "method_description": "Decodes and returns an NSRect structure that was previously encoded with encode(_:).", "params": []}, {"return_value": {"return_type": ["NSRect"], "return_name": [""], "return_description": []}, "method_name": "decodeRect", "class_name": "NSCoder", "method_description": "Decodes and returns an NSRect structure that was previously encoded with encode(_:forKey:).", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["NSSize"], "return_name": [""], "return_description": []}, "method_name": "decodeSize", "class_name": "NSCoder", "method_description": "Decodes and returns an NSSize structure that was previously encoded with encode(_:).", "params": []}, {"return_value": {"return_type": ["NSSize"], "return_name": [""], "return_description": []}, "method_name": "decodeSize", "class_name": "NSCoder", "method_description": "Decodes and returns an NSSize structure that was previously encoded with encode(_:forKey:).", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "decodeValue", "class_name": "NSCoder", "method_description": "Decodes a single value, whose Objective-C type is given by valueType.", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["ofObjCType", "type"], "param_description": ""}, {"param_type": "UnsafeMutableRawPointer", "param_name": ["at", "data"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["A decoded object containing a property list."]}, "method_name": "decodePropertyList", "class_name": "NSCoder", "method_description": "Returns a decoded property list for the specified key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CGPoint"], "return_name": [""], "return_description": ["The CGPoint structure."]}, "method_name": "decodeCGPoint", "class_name": "NSCoder", "method_description": "Decodes and returns the CGPoint structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CGRect"], "return_name": [""], "return_description": ["The CGRect structure."]}, "method_name": "decodeCGRect", "class_name": "NSCoder", "method_description": "Decodes and returns the CGRect structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CGSize"], "return_name": [""], "return_description": ["The CGSize structure."]}, "method_name": "decodeCGSize", "class_name": "NSCoder", "method_description": "Decodes and returns the CGSize structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CGAffineTransform"], "return_name": [""], "return_description": ["The affine transform."]}, "method_name": "decodeCGAffineTransform", "class_name": "NSCoder", "method_description": "Decodes and returns the CGAffineTransform structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["UIEdgeInsets"], "return_name": [""], "return_description": ["The edge insets data."]}, "method_name": "decodeUIEdgeInsets", "class_name": "NSCoder", "method_description": "Decodes and returns the UIEdgeInsets structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["UIOffset"], "return_name": [""], "return_description": ["The offset data."]}, "method_name": "decodeUIOffset", "class_name": "NSCoder", "method_description": "Decodes and returns the UIOffset structure associated with the specified key in the receiver\u2019s archive. ", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CGVector"], "return_name": [""], "return_description": ["The vector data."]}, "method_name": "decodeCGVector", "class_name": "NSCoder", "method_description": "Decodes and returns the CGVector data associated with the specified key in the coder\u2019s archive.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CMTime"], "return_name": [""], "return_description": ["The CMTime structure associated with key in the archive. "]}, "method_name": "decodeTime", "class_name": "NSCoder", "method_description": "Returns the CMTime structure associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CMTimeRange"], "return_name": [""], "return_description": ["The CMTimeRange structure associated with key in the archive. "]}, "method_name": "decodeTimeRange", "class_name": "NSCoder", "method_description": "Returns the CMTimeRange structure associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["CMTimeMapping"], "return_name": [""], "return_description": ["The CMTimeMapping structure associated with key in the archive. "]}, "method_name": "decodeTimeMapping", "class_name": "NSCoder", "method_description": "Returns the CMTimeMapping structure associated with a given key.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The version in effect for the class named className or NSNotFound if no class named className exists."]}, "method_name": "version", "class_name": "NSCoder", "method_description": "This method is present for historical reasons and is not used with keyed archivers.", "params": [{"param_type": "String", "param_name": ["forClassName", "className"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDirectionalEdgeInsets"], "return_name": [""], "return_description": []}, "method_name": "decodeDirectionalEdgeInsets", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["DecodedObjectType"], "return_name": [""], "return_description": []}, "method_name": "decodeObject", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "NSObject.Type", "param_name": ["of", "cls"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeObject", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "[AnyClass]", "param_name": ["of", "classes"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeTopLevelObject", "class_name": "NSCoder", "method_description": "", "params": []}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeTopLevelObject", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["DecodedObjectType"], "return_name": [""], "return_description": []}, "method_name": "decodeTopLevelObject", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "NSObject.Type", "param_name": ["of", "cls"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": []}, "method_name": "decodeTopLevelObject", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "[AnyClass]", "param_name": ["of", "classes"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "decodeValue", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["ofObjCType", "type"], "param_description": ""}, {"param_type": "UnsafeMutableRawPointer", "param_name": ["at", "data"], "param_description": ""}, {"param_type": "Int", "param_name": ["size"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "NSDirectionalEdgeInsets", "param_name": ["insets"], "param_description": ""}, {"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "failWithError", "class_name": "NSCoder", "method_description": "", "params": [{"param_type": "Error", "param_name": ["error"], "param_description": ""}]}, {"return_value": {"return_type": ["CGAffineTransform"], "return_name": [""], "return_description": ["A Core Graphics affine transform structure. If the string is not well-formed, the function returns the identity transform. "]}, "method_name": "cgAffineTransform", "class_name": "NSCoder", "method_description": "Returns a Core Graphics affine transform structure corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CGPoint"], "return_name": [""], "return_description": ["A Core Graphics structure that represents a point. If the string is not well-formed, the function returns CGPointZero."]}, "method_name": "cgPoint", "class_name": "NSCoder", "method_description": "Returns a Core Graphics point structure corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CGRect"], "return_name": [""], "return_description": ["A Core Graphics structure that represents a rectangle. If the string is not well-formed, the function returns CGRectZero."]}, "method_name": "cgRect", "class_name": "NSCoder", "method_description": "Returns a Core Graphics rectangle structure corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CGSize"], "return_name": [""], "return_description": ["A Core Graphics structure that represents a size. If the string is not well-formed, the function returns CGSizeZero."]}, "method_name": "cgSize", "class_name": "NSCoder", "method_description": "Returns a Core Graphics size structure corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CGVector"], "return_name": [""], "return_description": ["A Core Graphics structure that represents a two-dimensional vector. If the string is not well-formed, the function returns a vector whose dx and dy values are 0."]}, "method_name": "cgVector", "class_name": "NSCoder", "method_description": "Returns a Core Graphics vector corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["NSDirectionalEdgeInsets"], "return_name": [""], "return_description": ["A directional edge insets data structure. If the string is not well-formed, the function returns zero."]}, "method_name": "nsDirectionalEdgeInsets", "class_name": "NSCoder", "method_description": "Returns a directional edge insets structure based on the data in the specified string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to rect. See cgRect(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from a rectangle.", "params": [{"param_type": "CGRect", "param_name": ["for", "rect"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to vector. See cgVector(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from a vector data structure.", "params": [{"param_type": "CGVector", "param_name": ["for", "vector"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to offset."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from an offset structure.", "params": [{"param_type": "UIOffset", "param_name": ["for", "offset"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to transform. See cgAffineTransform(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from an affine transform.", "params": [{"param_type": "CGAffineTransform", "param_name": ["for", "transform"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to point. See cgPoint(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from a point.", "params": [{"param_type": "CGPoint", "param_name": ["for", "point"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to size. See cgSize(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from a size data structure.", "params": [{"param_type": "CGSize", "param_name": ["for", "size"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to insets. See uiEdgeInsets(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from an edge insets structure.", "params": [{"param_type": "UIEdgeInsets", "param_name": ["for", "insets"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that corresponds to insets. See nsDirectionalEdgeInsets(for:) for a discussion of the string format."]}, "method_name": "string", "class_name": "NSCoder", "method_description": "Returns a string formatted to contain the data from a directional edge insets structure.", "params": [{"param_type": "NSDirectionalEdgeInsets", "param_name": ["for", "insets"], "param_description": ""}]}, {"return_value": {"return_type": ["UIEdgeInsets"], "return_name": [""], "return_description": ["An edge insets data structure. If the string is not well-formed, the function returns zero.  "]}, "method_name": "uiEdgeInsets", "class_name": "NSCoder", "method_description": "Returns a UIKit edge insets structure based on the data in the specified string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["UIOffset"], "return_name": [""], "return_description": ["An edge insets data structure. If the string is not well-formed, the function returns zero.  "]}, "method_name": "uiOffset", "class_name": "NSCoder", "method_description": "Returns a UIKit offset structure corresponding to the data in a given string.", "params": [{"param_type": "String", "param_name": ["for", "string"], "param_description": ""}]}], "Vars": [{"var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver supports keyed coding of objects.", "var_name": "allowsKeyedCoding"}, {"var_type": "Bool", "var_description": "Boolean value that indicates whether the coder requires secure coding.", "var_name": "requiresSecureCoding"}, {"var_type": "Set<AnyHashable>", "var_description": "The set of coded classes allowed for secure coding.", "var_name": "allowedClasses"}, {"var_type": "UInt32", "var_description": "The system version in effect for the archive.", "var_name": "systemVersion"}, {"var_type": "Int", "var_description": "", "var_name": "NSCoderErrorMaximum"}, {"var_type": "Int", "var_description": "", "var_name": "NSCoderErrorMinimum"}, {"var_type": "Int", "var_description": "", "var_name": "NSCoderReadCorruptError"}, {"var_type": "Int", "var_description": "", "var_name": "NSCoderValueNotFoundError"}, {"var_type": "NSCoder.DecodingFailurePolicy", "var_description": "", "var_name": "decodingFailurePolicy"}, {"var_type": "Error", "var_description": "", "var_name": "error"}], "subclass_list": [], "class_description": "The NSCoder abstract class declares the interface used by concrete subclasses to transfer objects and other values between memory and some other format. This capability provides the basis for archiving (where objects and data items are stored on disk) and distribution (where objects and data items are copied between different processes or threads). The concrete subclasses provided by Foundation for these purposes are NSArchiver, NSUnarchiver, NSKeyedArchiver, NSKeyedUnarchiver, and NSPortCoder. Concrete subclasses of NSCoder are referred to in general as coder classes, and instances of these classes as coder objects (or simply coders). A coder object that can only encode values is referred to as an encoder object, and one that can only decode values as a decoder object.\nNSCoder operates on objects, scalars, C arrays, structures, and strings, and on pointers to these types. It does not handle types whose implementation varies across platforms, such as union, void *, function pointers, and long chains of pointers. A coder object stores object type information along with the data, so an object decoded from a stream of bytes is normally of the same class as the object that was originally encoded into the stream. An object can change its class when encoded, however; this is described in Archives and Serializations Programming Guide.\nThe AVFoundation framework adds methods to the NSCoder class to make it easier to create archives including Core Media time structures, and extract Core Media time structure from archives.\nFor details of how to create a subclass of NSCoder, see Subclassing NSCoder in Archives and Serializations Programming Guide.\n", "class_name": "NSCoder"}
{"class_inherit_list": [], "Vars": [{"var_description": "The number of elements in the collection.", "var_type": "Int", "var_name": "count"}, {"var_description": "Identical to self.", "var_type": "LazyDropWhileCollection<Base>", "var_name": "elements"}, {"var_description": "", "var_type": "LazyDropWhileCollection<Base>.Index", "var_name": "endIndex"}, {"var_description": "The first element of the collection.", "var_type": "Base.Element", "var_name": "first"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "DefaultIndices<LazyDropWhileCollection<Base>>", "var_name": "indices"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "var_name": "isEmpty"}, {"var_description": "The last element of the collection.", "var_type": "Base.Element", "var_name": "last"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<LazyDropWhileCollection<Base>>", "var_name": "lazy"}, {"var_description": "A view onto this collection that provides lazy implementations of normally eager operations, such as map and filter.", "var_type": "LazyCollection<LazyDropWhileCollection<Base>>", "var_name": "lazy"}, {"var_description": "", "var_type": "LazySequence<LazyDropWhileCollection<Base>>", "var_name": "lazy"}, {"var_description": "", "var_type": "LazyDropWhileCollection<Base>", "var_name": "lazy"}, {"var_description": "", "var_type": "LazyCollection<LazyDropWhileCollection<Base>>", "var_name": "lazy"}, {"var_description": "", "var_type": "LazyDropWhileCollection<Base>", "var_name": "lazy"}, {"var_description": "", "var_type": "LazyDropWhileCollection<Base>.Index", "var_name": "startIndex"}, {"var_description": "A value less than or equal to the number of elements in the sequence, calculated nondestructively.", "var_type": "Int", "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "var_name": "underestimatedCount"}], "class_name": "LazyDropWhileCollection", "interface_list": ["BidirectionalCollection", "Collection", "LazyCollectionProtocol", "Sequence"], "subclass_list": [], "class_description": "Note\nThe performance of accessing startIndex, first, or any methods that depend on startIndex depends on how many elements satisfy the predicate at the start of the collection, and may not offer the usual performance given by the Collection protocol. Be aware, therefore, that general operations on lazy collections may not have the documented complexity.\n", "Methods": [{"return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_type": "(Base.Element", "param_name": ["predicate"]}]}, {"return_value": {"return_description": [], "return_name": ["", "", ""], "return_type": ["ElementOfResult -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<LazyDropWhileCollection<Base>", "ElementOfResult>>", "ElementOfResult>"]}, "method_description": "Returns the non-nil results of mapping the given transformation over this sequence.", "method_name": "compactMap", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "@escaping (Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": ["", "", ""], "return_type": ["ElementOfResult -> LazyMapCollection<LazyFilterCollection<LazyMapCollection<LazyDropWhileCollection<Base>", "ElementOfResult>>", "ElementOfResult>"]}, "method_description": "Returns the non-nil results of mapping the given transformation over this collection.", "method_name": "compactMap", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that accepts an element of this collection as its argument and returns an optional value.", "param_type": "@escaping (Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["ElementOfResult rethrows -> [ElementOfResult]"]}, "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The element to find in the sequence.", "param_type": "Base.Element", "param_name": ["element"]}]}, {"return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Base.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the distance between two indices.", "method_name": "distance", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["from", "start"]}, {"param_description": "Another valid index of the collection. If end is equal to start, the result is zero.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["to", "end"]}]}, {"return_value": {"return_description": ["The distance between start and end. The result can be negative only if the collection conforms to the BidirectionalCollection protocol."], "return_name": [""], "return_type": ["Int"]}, "method_description": "Returns the distance between two indices.", "method_name": "distance", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["from", "start"]}, {"param_description": "Another valid index of the collection. If end is equal to start, the result is zero.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["to", "end"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool -> LazyDropWhileCollection<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a lazy collection that skips any initial elements that satisfy predicate.", "method_name": "drop", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the collection as its argument and returns true if the element should be skipped or false otherwise. Once predicate returns false it will not be called again.", "param_type": "@escaping (Base.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence starting after the first element of the sequence."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence containing all but the first element of the sequence.", "method_name": "dropFirst", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A subsequence starting after the specified number of elements."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence containing all but the given number of initial elements.", "method_name": "dropFirst", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The number of elements to drop from the beginning of the collection. k must be greater than or equal to zero.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["A subsequence leaving off the last element of the sequence."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence containing all but the last element of the sequence.", "method_name": "dropLast", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A subsequence that leaves off the specified number of elements at the end."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence containing all but the specified number of final elements.", "method_name": "dropLast", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The number of elements to drop off the end of the collection. k must be greater than or equal to zero.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool -> LazyFilterCollection<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns the elements of self that satisfy predicate.", "method_name": "filter", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "@escaping (Base.Element", "param_name": ["isIncluded"]}]}, {"return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Base.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Base.Element", "param_name": ["of", "element"]}]}, {"return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Base.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["String rethrows -> [String]"]}, "method_description": "", "method_name": "flatMap", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "(Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "method_description": "Calls the given closure on each element in the sequence in the same order as a for-in loop.", "method_name": "forEach", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the sequence as a parameter.", "param_type": "(Base.Element", "param_name": ["body"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Offsets the given index by the specified distance.", "method_name": "formIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "inout LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}]}, {"return_value": {"return_description": ["true if i has been offset by exactly distance steps without going beyond limit; otherwise, false. When the return value is false, the value of i is equal to limit."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Offsets the given index by the specified distance, or so that it equals the given limiting index.", "method_name": "formIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "inout LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}, {"param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the given index with its successor.", "method_name": "formIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection. i must be less than endIndex.", "param_type": "inout LazyDropWhileCollection<Base>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Replaces the given index with its predecessor.", "method_name": "formIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection. i must be greater than startIndex.", "param_type": "inout LazyDropWhileCollection<Base>.Index", "param_name": ["before", "i"]}]}, {"return_value": {"return_description": ["An index offset by n from the index i. If n is positive, this is the same value as the result of n calls to index(after:). If n is negative, this is the same value as the result of -n calls to index(before:)."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns an index that is the specified distance from the given index.", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "distance"]}]}, {"return_value": {"return_description": ["An index offset by distance from the index i. If distance is positive, this is the same value as the result of distance calls to index(after:). If distance is negative, this is the same value as the result of abs(distance) calls to index(before:)."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns an index that is the specified distance from the given index.", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}]}, {"return_value": {"return_description": ["An index offset by n from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "distance"]}, {"param_description": "A valid index of the collection to use as a limit. If n > 0, a limit that is less than i has no effect. Likewise, if n < 0, a limit that is greater than i has no effect.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": ["An index offset by distance from the index i, unless that index would be beyond limit in the direction of movement. In that case, the method returns nil."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["i"]}, {"param_description": "The distance to offset i. distance must not be negative unless the collection conforms to the BidirectionalCollection protocol.", "param_type": "Int", "param_name": ["offsetBy", "distance"]}, {"param_description": "A valid index of the collection to use as a limit. If distance > 0, a limit that is less than i has no effect. Likewise, if distance < 0, a limit that is greater than i has no effect.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "", "method_name": "index", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["before", "i"]}]}, {"return_value": {"return_description": ["A flattened view of the elements of this collection of collections."], "return_name": [""], "return_type": ["FlattenCollection<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns the elements of this collection of collections, concatenated.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": [""], "return_type": ["FlattenSequence<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["LazyCollection<FlattenCollection<LazyDropWhileCollection<Base>>>"]}, "method_description": "A concatenation of the elements of self.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["LazySequence<FlattenSequence<LazyDropWhileCollection<Base>>>"]}, "method_description": "Returns a lazy sequence that concatenates the elements of this sequence of sequences.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_type": "Sequence", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["The last element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the last element of the sequence that satisfies the given predicate.", "method_name": "last", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Base.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The last index where element is found. If element is not found in the collection, this method returns nil."], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Index"]}, "method_description": "Returns the last index where the specified value appears in the collection.", "method_name": "lastIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Base.Element", "param_name": ["of", "element"]}]}, {"return_value": {"return_description": ["The index of the last element in the collection that matches predicate, or nil if no elements match."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the index of the last element in the collection that matches the given predicate.", "method_name": "lastIndex", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Base.Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["LazyDropWhileCollection<Base>.Iterator"]}, "method_description": "Returns an iterator over the elements of this sequence.", "method_name": "makeIterator", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["U -> LazyMapSequence<LazyDropWhileCollection<Base>", "U>"]}, "method_description": "Returns a LazyMapSequence over this Sequence.  The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.", "method_name": "map", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "@escaping (Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": ["", ""], "return_type": ["U -> LazyMapCollection<LazyDropWhileCollection<Base>", "U>"]}, "method_description": "Returns a LazyMapCollection over this Collection.  The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.", "method_name": "map", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "@escaping (Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Base.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Base.Element"]}, "method_description": "Returns the maximum element in the sequence.", "method_name": "max", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Bool rethrows -> Base.Element"]}, "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Base.Element"]}, "method_description": "Returns the minimum element in the sequence.", "method_name": "min", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bool rethrows -> Base.Element"]}, "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": ["A subsequence starting at the beginning of this collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.", "method_name": "prefix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The maximum number of elements to return. maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["through", "position"]}]}, {"return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["upTo", "end"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool -> LazyPrefixWhileCollection<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a lazy collection of the initial consecutive elements that satisfy predicate.", "method_name": "prefix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A closure that takes an element of the collection as its argument and returns true if the element should be included or false otherwise. Once predicate returns false it will not be called again.", "param_type": "@escaping (Base.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Base.Element"]}, "method_description": "Returns a random element of the collection.", "method_name": "randomElement", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Base.Element"]}, "method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The random number generator to use when choosing a random element.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_type": "Result", "param_name": ["initialResult"]}, {"param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_type": "(Result", "param_name": ["nextPartialResult"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The value to use as the initial accumulating value.", "param_type": "Result", "param_name": ["into", "initialResult"]}, {"param_description": "A closure that updates the accumulating value with an element of the sequence.", "param_type": "(inout Result", "param_name": ["updateAccumulatingResult"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": ["An array containing the elements of this sequence in reverse order."], "return_name": [""], "return_type": ["[Base.Element]"]}, "method_description": "Returns an array containing the elements of this sequence in reverse order.", "method_name": "reversed", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Base.Element]"]}, "method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Base.Element]"]}, "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The random number generator to use when shuffling the sequence.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Base.Element]"]}, "method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "class_name": "LazyDropWhileCollection", "params": []}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["Bool rethrows -> [Base.Element]"]}, "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Base.Element", "param_name": ["Base.Element"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the longest possible subsequences of the collection, in order, that don\u2019t contain elements satisfying the given predicate.", "method_name": "split", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each pair of consecutive elements satisfying the isSeparator predicate and for each element at the start or end of the collection satisfying the isSeparator predicate. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}, {"param_description": "A closure that takes an element as an argument and returns a Boolean value indicating whether the collection should be split at that element.", "param_type": "(Base.Element", "param_name": ["whereSeparator", "isSeparator"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Slice<LazyDropWhileCollection<Base>>]"]}, "method_description": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.", "method_name": "split", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The element that should be split upon.", "param_type": "Base.Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[Slice<LazyDropWhileCollection<Base>>]"]}, "method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The element that should be split upon.", "param_type": "Base.Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Base.Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": ["A subsequence terminating at the end of the collection with at most maxLength elements."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence, up to the given maximum length, containing the final elements of the collection.", "method_name": "suffix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The maximum number of elements to return. The value of maxLength must be greater than or equal to zero.", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["Slice<LazyDropWhileCollection<Base>>"]}, "method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "class_name": "LazyDropWhileCollection", "params": [{"param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_type": "LazyDropWhileCollection<Base>.Index", "param_name": ["from", "start"]}]}], "package_name": "swift"}
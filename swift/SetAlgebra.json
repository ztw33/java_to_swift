{"class_description": "You use types that conform to the SetAlgebra protocol when you need efficient membership tests or mathematical set operations such as intersection, union, and subtraction. In the standard library, you can use the Set type with elements of any hashable type, or you can easily create bit masks with SetAlgebra conformance using the OptionSet protocol. See those types for more information.\nNote\nUnlike ordinary set types, the Element type of an OptionSet is identical to the OptionSet type itself. The SetAlgebra protocol is specifically designed to accommodate both kinds of set.\nWhen implementing a custom type that conforms to the SetAlgebra protocol, you must implement the required initializers and methods. For the inherited methods to work properly, conforming types must meet the following axioms. Assume that S is a custom type that conforms to the SetAlgebra protocol, x and y are instances of S, and e is of type S.Element\u2014the type that the set holds.\nS() == []\nx.intersection(x) == x\nx.intersection([]) == []\nx.union(x) == x\nx.union([]) == x\nx.contains(e) implies x.union(y).contains(e)\nx.union(y).contains(e) implies x.contains(e) || y.contains(e)\nx.contains(e) && y.contains(e) if and only if x.intersection(y).contains(e)\nx.isSubset(of: y) implies x.union(y) == y\nx.isSuperset(of: y) implies x.union(y) == x\nx.isSubset(of: y) if and only if y.isSuperset(of: x)\nx.isStrictSuperset(of: y) if and only if x.isSuperset(of: y) && x != y\nx.isStrictSubset(of: y) if and only if x.isSubset(of: y) && x != y\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": ["true if member exists in the set; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether the given element exists in the set.Required. Default implementation provided.", "method_name": "contains", "params": [{"param_type": "Self.Element", "param_name": ["member"], "param_description": "An element to look for in the set."}]}, {"return_value": {"return_name": [["inserted"], ["memberAfterInsert"]], "return_description": ["(true, newMember) if newMember was not contained in the set. If an element equal to newMember was already contained in the set, the method returns (false, oldMember), where oldMember is the element that was equal to newMember. In some cases, oldMember may be distinguishable from newMember by identity comparison or some other means."], "return_type": ["Bool", "Self.Element"]}, "class_name": "SetAlgebra", "method_description": "Inserts the given element in the set if it is not already present.Required. Default implementation provided.", "method_name": "insert", "params": [{"param_type": "Self.Element", "param_name": ["newMember"], "param_description": "An element to insert into the set."}]}, {"return_value": {"return_name": [""], "return_description": ["For ordinary sets, an element equal to newMember if the set already contained such a member; otherwise, nil. In some cases, the returned element may be distinguishable from newMember by identity comparison or some other means."], "return_type": ["Self.Element"]}, "class_name": "SetAlgebra", "method_description": "Inserts the given element into the set unconditionally.Required. Default implementation provided.", "method_name": "update", "params": [{"param_type": "Self.Element", "param_name": ["with", "newMember"], "param_description": "An element to insert into the set."}]}, {"return_value": {"return_name": [""], "return_description": ["For ordinary sets, an element equal to member if member is contained in the set; otherwise, nil. In some cases, a returned element may be distinguishable from newMember by identity comparison or some other means."], "return_type": ["Self.Element"]}, "class_name": "SetAlgebra", "method_description": "Removes the given element and any elements subsumed by the given element.Required. Default implementation provided.", "method_name": "remove", "params": [{"param_type": "Self.Element", "param_name": ["member"], "param_description": "The element of the set to remove."}]}, {"return_value": {"return_name": [""], "return_description": ["A new set with the unique elements of this set and other."], "return_type": ["Self"]}, "class_name": "SetAlgebra", "method_description": "Returns a new set with the elements of both this and the given set.Required. Default implementation provided.", "method_name": "union", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "SetAlgebra", "method_description": "Adds the elements of the given set to the set.Required. Default implementation provided.", "method_name": "formUnion", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["A new set."], "return_type": ["Self"]}, "class_name": "SetAlgebra", "method_description": "Returns a new set with the elements that are common to both this set and the given set.Required. Default implementation provided.", "method_name": "intersection", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "SetAlgebra", "method_description": "Removes the elements of this set that aren\u2019t also in the given set.Required. Default implementation provided.", "method_name": "formIntersection", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["A new set."], "return_type": ["Self"]}, "class_name": "SetAlgebra", "method_description": "Returns a new set with the elements that are either in this set or in the given set, but not in both.Required. Default implementation provided.", "method_name": "symmetricDifference", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "SetAlgebra", "method_description": "Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set.Required. Default implementation provided.", "method_name": "formSymmetricDifference", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type."}]}, {"return_value": {"return_name": [""], "return_description": ["true if the set is a strict subset of other; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether this set is a strict subset of the given set.", "method_name": "isStrictSubset", "params": [{"param_type": "Self", "param_name": ["of", "other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["true if the set is a strict superset of other; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether this set is a strict superset of the given set.", "method_name": "isStrictSuperset", "params": [{"param_type": "Self", "param_name": ["of", "other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["true if the set has no elements in common with other; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether the set has no members in common with the given set.Required. Default implementation provided.", "method_name": "isDisjoint", "params": [{"param_type": "Self", "param_name": ["with", "other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["true if the set is a subset of other; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether the set is a subset of another set.Required. Default implementation provided.", "method_name": "isSubset", "params": [{"param_type": "Self", "param_name": ["of", "other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["true if the set is a superset of possibleSubset; otherwise, false."], "return_type": ["Bool"]}, "class_name": "SetAlgebra", "method_description": "Returns a Boolean value that indicates whether the set is a superset of the given set.Required. Default implementation provided.", "method_name": "isSuperset", "params": [{"param_type": "Self", "param_name": ["of", "other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "SetAlgebra", "method_description": "Removes the elements of the given set from this set.Required. Default implementation provided.", "method_name": "subtract", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}, {"return_value": {"return_name": [""], "return_description": ["A new set."], "return_type": ["Self"]}, "class_name": "SetAlgebra", "method_description": "Returns a new set containing the elements of this set that do not occur in the given set.Required. Default implementation provided.", "method_name": "subtracting", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "A set of the same type as the current set."}]}], "class_inherit_list": ["Equatable", "ExpressibleByArrayLiteral"], "Vars": [{"var_type": "Bool", "var_description": "A Boolean value that indicates whether the set has no elements.Required. Default implementation provided.", "var_name": "isEmpty"}], "subclass_list": ["OptionSet"], "class_name": "SetAlgebra"}
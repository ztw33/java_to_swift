{"class_inherit_list": [], "Vars": [{"var_description": "The number of elements in the collection.", "var_type": "Int", "var_name": "count"}, {"var_description": "The number of elements.", "var_type": "Int", "var_name": "count"}, {"var_description": "The collection\u2019s \u201cpast the end\u201d position\u2014that is, the position one greater than the last valid subscript argument.", "var_type": "AnyCollection<Element>.Index", "var_name": "endIndex"}, {"var_description": "The first element of the collection.", "var_type": "Element", "var_name": "first"}, {"var_description": "", "var_type": "Element", "var_name": "first"}, {"var_description": "The indices that are valid for subscripting the collection, in ascending order.", "var_type": "DefaultIndices<AnyCollection<Element>>", "var_name": "indices"}, {"var_description": "A Boolean value indicating whether the collection is empty.", "var_type": "Bool", "var_name": "isEmpty"}, {"var_description": "A view onto this collection that provides lazy implementations of normally eager operations, such as map and filter.", "var_type": "LazyCollection<AnyCollection<Element>>", "var_name": "lazy"}, {"var_description": "A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.", "var_type": "LazySequence<AnyCollection<Element>>", "var_name": "lazy"}, {"var_description": "The position of the first element in a non-empty collection.", "var_type": "AnyCollection<Element>.Index", "var_name": "startIndex"}, {"var_description": "", "var_type": "Int", "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the sequence, calculated nondestructively.", "var_type": "Int", "var_name": "underestimatedCount"}, {"var_description": "A value less than or equal to the number of elements in the collection.", "var_type": "Int", "var_name": "underestimatedCount"}], "class_name": "AnyCollection", "interface_list": ["Collection"], "subclass_list": [], "class_description": "An AnyCollection instance forwards its operations to a base collection having the same Element type, hiding the specifics of the underlying collection.\n", "Methods": [{"return_value": {"return_description": ["true if the sequence contains only elements that satisfy predicate; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.", "method_name": "allSatisfy", "class_name": "AnyCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element satisfies a condition.", "param_type": "(Element", "param_name": ["predicate"]}]}, {"return_value": {"return_description": ["An array of the non-nil results of calling transform with each element of the sequence."], "return_name": [""], "return_type": ["ElementOfResult rethrows -> [ElementOfResult]"]}, "method_description": "Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.", "method_name": "compactMap", "class_name": "AnyCollection", "params": [{"param_description": "A closure that accepts an element of this sequence as its argument and returns an optional value.", "param_type": "(Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["true if the element was found in the sequence; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence contains the given element.", "method_name": "contains", "class_name": "AnyCollection", "params": [{"param_description": "The element to find in the sequence.", "param_type": "Element", "param_name": ["element"]}]}, {"return_value": {"return_description": ["true if the sequence contains an element that satisfies predicate; otherwise, false."], "return_name": [""], "return_type": [""]}, "method_description": "Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.", "method_name": "contains", "class_name": "AnyCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "method_description": "", "method_name": "distance", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["from", "start"]}, {"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["to", "end"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "drop", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A subsequence starting after the first element of the sequence."], "return_name": [""], "return_type": ["AnyCollection<Element>"]}, "method_description": "Returns a subsequence containing all but the first element of the sequence.", "method_name": "dropFirst", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "dropFirst", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["n"]}]}, {"return_value": {"return_description": ["A subsequence leaving off the last element of the sequence."], "return_name": [""], "return_type": ["AnyCollection<Element>"]}, "method_description": "Returns a subsequence containing all but the last element of the sequence.", "method_name": "dropLast", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "dropLast", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["n"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain the same elements in the same order."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.", "method_name": "elementsEqual", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence and other contain equivalent items, using areEquivalent as the equivalence test; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.", "method_name": "elementsEqual", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": ["A sequence of pairs enumerating the sequence."], "return_name": [""], "return_type": ["EnumeratedSequence<AnyCollection<Element>>"]}, "method_description": "Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.", "method_name": "enumerated", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> [AnyCollection<Element>.Element]"]}, "method_description": "", "method_name": "filter", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["isIncluded"]}]}, {"return_value": {"return_description": ["The first element of the sequence that satisfies predicate, or nil if there is no element that satisfies predicate."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first element of the sequence that satisfies the given predicate.", "method_name": "first", "class_name": "AnyCollection", "params": [{"param_description": "A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element is a match.", "param_type": "(Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": ["The first index where element is found. If element is not found in the collection, returns nil."], "return_name": [""], "return_type": ["AnyIndex"]}, "method_description": "Returns the first index where the specified value appears in the collection.", "method_name": "firstIndex", "class_name": "AnyCollection", "params": [{"param_description": "An element to search for in the collection.", "param_type": "Element", "param_name": ["of", "element"]}]}, {"return_value": {"return_description": ["The index of the first element for which predicate returns true. If no elements in the collection satisfy the given predicate, returns nil."], "return_name": [""], "return_type": [""]}, "method_description": "Returns the first index in which an element of the collection satisfies the given predicate.", "method_name": "firstIndex", "class_name": "AnyCollection", "params": [{"param_description": "A closure that takes an element as its argument and returns a Boolean value that indicates whether the passed element represents a match.", "param_type": "(Element", "param_name": ["where", "predicate"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["String rethrows -> [String]"]}, "method_description": "", "method_name": "flatMap", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Void rethrows"]}, "method_description": "", "method_name": "forEach", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["body"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "formIndex", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "inout AnyCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "formIndex", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "inout AnyCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}, {"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "", "method_name": "formIndex", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "inout AnyCollection<Element>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<Element>.Index"]}, "method_description": "", "method_name": "index", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<Element>.Index"]}, "method_description": "", "method_name": "index", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["i"]}, {"param_description": "", "param_type": "Int", "param_name": ["offsetBy", "n"]}, {"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["limitedBy", "limit"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<Element>.Index"]}, "method_description": "", "method_name": "index", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "AnyCollection<Element>.Index", "param_name": ["after", "i"]}]}, {"return_value": {"return_description": ["A flattened view of the elements of this sequence of sequences."], "return_name": [""], "return_type": ["FlattenSequence<AnyCollection<Element>>"]}, "method_description": "Returns the elements of this sequence of sequences, concatenated.", "method_name": "joined", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["A flattened view of the elements of this collection of collections."], "return_name": [""], "return_type": ["FlattenCollection<AnyCollection<Element>>"]}, "method_description": "Returns the elements of this collection of collections, concatenated.", "method_name": "joined", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["The joined sequence of elements."], "return_name": [""], "return_type": ["JoinedSequence<AnyCollection<Element>>"]}, "method_description": "Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.", "method_name": "joined", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to insert between each of this sequence\u2019s elements.", "param_type": "Sequence", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["A single, concatenated string."], "return_name": [""], "return_type": ["String"]}, "method_description": "Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.", "method_name": "joined", "class_name": "AnyCollection", "params": [{"param_description": "A string to insert between each of the elements in this sequence. The default separator is an empty string.", "param_type": "String", "param_name": ["separator"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}]}, {"return_value": {"return_description": ["true if this sequence precedes other in a dictionary ordering as ordered by areInIncreasingOrder; otherwise, false."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.", "method_name": "lexicographicallyPrecedes", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["other"]}, {"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<Element>.Iterator"]}, "method_description": "Returns an iterator over the elements of this collection.", "method_name": "makeIterator", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "", "method_name": "map", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "AnyCollection", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["An array containing the transformed elements of this sequence."], "return_name": [""], "return_type": ["T rethrows -> [T]"]}, "method_description": "Returns an array containing the results of mapping the given closure over the sequence\u2019s elements.", "method_name": "map", "class_name": "AnyCollection", "params": [{"param_description": "A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.", "param_type": "(Element", "param_name": ["transform"]}]}, {"return_value": {"return_description": ["The sequence\u2019s maximum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Returns the maximum element in the sequence.", "method_name": "max", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s maximum element if the sequence is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Bool rethrows -> Element"]}, "method_description": "Returns the maximum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "max", "class_name": "AnyCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": ["The sequence\u2019s minimum element. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Returns the minimum element in the sequence.", "method_name": "min", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["The sequence\u2019s minimum element, according to areInIncreasingOrder. If the sequence has no elements, returns nil."], "return_name": [""], "return_type": ["Bool rethrows -> Element"]}, "method_description": "Returns the minimum element in the sequence, using the given predicate as the comparison between elements.", "method_name": "min", "class_name": "AnyCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": ["The first element of the collection if the collection is not empty; otherwise, nil."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Removes and returns the first element of the collection.", "method_name": "popFirst", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "prefix", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence up to, and including, the end position."], "return_name": [""], "return_type": ["AnyCollection<Element>"]}, "method_description": "Returns a subsequence from the start of the collection through the specified position.", "method_name": "prefix", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "AnyIndex", "param_name": ["through", "position"]}]}, {"return_value": {"return_description": ["A subsequence up to, but not including, the end position."], "return_name": [""], "return_type": ["AnyCollection<Element>"]}, "method_description": "Returns a subsequence from the start of the collection up to, but not including, the specified position.", "method_name": "prefix", "class_name": "AnyCollection", "params": [{"param_description": "The \u201cpast the end\u201d index of the resulting subsequence. end must be a valid index of the collection.", "param_type": "AnyIndex", "param_name": ["upTo", "end"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "prefix", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["while", "predicate"]}]}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Returns a random element of the collection.", "method_name": "randomElement", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["A random element from the collection. If the collection is empty, the method returns nil."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Returns a random element of the collection, using the given generator as a source for randomness.", "method_name": "randomElement", "class_name": "AnyCollection", "params": [{"param_description": "The random number generator to use when choosing a random element.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["Result rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "AnyCollection", "params": [{"param_description": "The value to use as the initial accumulating value. initialResult is passed to nextPartialResult the first time the closure is executed.", "param_type": "Result", "param_name": ["initialResult"]}, {"param_description": "A closure that combines an accumulating value and an element of the sequence into a new accumulating value, to be used in the next call of the nextPartialResult closure or returned to the caller.", "param_type": "(Result", "param_name": ["nextPartialResult"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": ["The final accumulated value. If the sequence has no elements, the result is initialResult."], "return_name": [""], "return_type": ["rethrows -> Result"]}, "method_description": "Returns the result of combining the elements of the sequence using the given closure.", "method_name": "reduce", "class_name": "AnyCollection", "params": [{"param_description": "The value to use as the initial accumulating value.", "param_type": "Result", "param_name": ["into", "initialResult"]}, {"param_description": "A closure that updates the accumulating value with an element of the sequence.", "param_type": "(inout Result", "param_name": ["updateAccumulatingResult"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": ["The first element of the collection."], "return_name": [""], "return_type": ["Element"]}, "method_description": "Removes and returns the first element of the collection.", "method_name": "removeFirst", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes the specified number of elements from the beginning of the collection.", "method_name": "removeFirst", "class_name": "AnyCollection", "params": [{"param_description": "The number of elements to remove. k must be greater than or equal to zero, and must be less than or equal to the number of elements in the collection.", "param_type": "Int", "param_name": ["k"]}]}, {"return_value": {"return_description": ["An array containing the elements of this sequence in reverse order."], "return_name": [""], "return_type": ["[Element]"]}, "method_description": "Returns an array containing the elements of this sequence in reverse order.", "method_name": "reversed", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["A shuffled array of this sequence\u2019s elements."], "return_name": [""], "return_type": ["[Element]"]}, "method_description": "Returns the elements of the sequence, shuffled.", "method_name": "shuffled", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["An array of this sequence\u2019s elements in a shuffled order."], "return_name": [""], "return_type": ["[Element]"]}, "method_description": "Returns the elements of the sequence, shuffled using the given generator as a source for randomness.", "method_name": "shuffled", "class_name": "AnyCollection", "params": [{"param_description": "The random number generator to use when shuffling the sequence.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["[Element]"]}, "method_description": "Returns the elements of the sequence, sorted.", "method_name": "sorted", "class_name": "AnyCollection", "params": []}, {"return_value": {"return_description": ["A sorted array of the sequence\u2019s elements."], "return_name": [""], "return_type": ["Bool rethrows -> [Element]"]}, "method_description": "Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.", "method_name": "sorted", "class_name": "AnyCollection", "params": [{"param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areInIncreasingOrder"]}, {"param_description": "", "param_type": "Element", "param_name": ["Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": [""]}, "method_description": "", "method_name": "split", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}, {"param_description": "", "param_type": "(AnyCollection<Element>.Element", "param_name": ["whereSeparator", "isSeparator"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this sequence\u2019s elements."], "return_name": [""], "return_type": ["[AnyCollection<Element>]"]}, "method_description": "Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.", "method_name": "split", "class_name": "AnyCollection", "params": [{"param_description": "The element that should be split upon.", "param_type": "Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the sequence, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original sequence containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the sequence and for each instance of separator at the start or end of the sequence. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": ["An array of subsequences, split from this collection\u2019s elements."], "return_name": [""], "return_type": ["[AnyCollection<Element>]"]}, "method_description": "Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.", "method_name": "split", "class_name": "AnyCollection", "params": [{"param_description": "The element that should be split upon.", "param_type": "Element", "param_name": ["separator"]}, {"param_description": "The maximum number of times to split the collection, or one less than the number of subsequences to return. If maxSplits + 1 subsequences are returned, the last one is a suffix of the original collection containing the remaining elements. maxSplits must be greater than or equal to zero. The default value is Int.max.", "param_type": "Int", "param_name": ["maxSplits"]}, {"param_description": "If false, an empty subsequence is returned in the result for each consecutive pair of separator elements in the collection and for each instance of separator at the start or end of the collection. If true, only nonempty subsequences are returned. The default value is true.", "param_type": "Bool", "param_name": ["omittingEmptySubsequences"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are the same as the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.", "method_name": "starts", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}]}, {"return_value": {"return_description": ["true if the initial elements of the sequence are equivalent to the elements of possiblePrefix; otherwise, false. If possiblePrefix has no elements, the return value is true."], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.", "method_name": "starts", "class_name": "AnyCollection", "params": [{"param_description": "A sequence to compare to this sequence.", "param_type": "Sequence", "param_name": ["with", "possiblePrefix"]}, {"param_description": "A predicate that returns true if its two arguments are equivalent; otherwise, false.", "param_type": "(Element", "param_name": ["by", "areEquivalent"]}, {"param_description": "", "param_type": "Sequence.Element", "param_name": ["Sequence.Element"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["AnyCollection<AnyCollection<Element>.Element>"]}, "method_description": "", "method_name": "suffix", "class_name": "AnyCollection", "params": [{"param_description": "", "param_type": "Int", "param_name": ["maxLength"]}]}, {"return_value": {"return_description": ["A subsequence starting at the start position."], "return_name": [""], "return_type": ["AnyCollection<Element>"]}, "method_description": "Returns a subsequence from the specified position to the end of the collection.", "method_name": "suffix", "class_name": "AnyCollection", "params": [{"param_description": "The index at which to start the resulting subsequence. start must be a valid index of the collection.", "param_type": "AnyIndex", "param_name": ["from", "start"]}]}], "package_name": "swift"}
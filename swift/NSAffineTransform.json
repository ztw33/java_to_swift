{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "rotate", "class_name": "NSAffineTransform", "method_description": "Applies a rotation factor (measured in degrees) to the receiver\u2019s transformation matrix.", "params": [{"param_type": "CGFloat", "param_name": ["byDegrees", "angle"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "rotate", "class_name": "NSAffineTransform", "method_description": "Applies a rotation factor (measured in radians) to the receiver\u2019s transformation matrix.", "params": [{"param_type": "CGFloat", "param_name": ["byRadians", "angle"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "scale", "class_name": "NSAffineTransform", "method_description": "Applies the specified scaling factor along both x and y axes to the receiver\u2019s transformation matrix.", "params": [{"param_type": "CGFloat", "param_name": ["by", "scale"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "scaleX", "class_name": "NSAffineTransform", "method_description": "Applies scaling factors to each axis of the receiver\u2019s transformation matrix.", "params": [{"param_type": "CGFloat", "param_name": ["by", "scaleX"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["yBy", "scaleY"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "translateX", "class_name": "NSAffineTransform", "method_description": "Applies the specified translation factors to the receiver\u2019s transformation matrix.", "params": [{"param_type": "CGFloat", "param_name": ["by", "deltaX"], "param_description": ""}, {"param_type": "CGFloat", "param_name": ["yBy", "deltaY"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "append", "class_name": "NSAffineTransform", "method_description": "Appends the specified matrix to the receiver\u2019s matrix.", "params": [{"param_type": "AffineTransform", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "prepend", "class_name": "NSAffineTransform", "method_description": "Prepends the specified matrix to the receiver\u2019s matrix.", "params": [{"param_type": "AffineTransform", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "invert", "class_name": "NSAffineTransform", "method_description": "Replaces the receiver\u2019s matrix with its inverse matrix.", "params": []}, {"return_value": {"return_type": ["NSPoint"], "return_name": [""], "return_description": ["The resulting point after applying the receiver's transformations."]}, "method_name": "transform", "class_name": "NSAffineTransform", "method_description": "Applies the receiver\u2019s transform to the specified point and returns the result.", "params": [{"param_type": "NSPoint", "param_name": ["aPoint"], "param_description": ""}]}, {"return_value": {"return_type": ["NSSize"], "return_name": [""], "return_description": ["The resulting size after applying the receiver's transformations. "]}, "method_name": "transform", "class_name": "NSAffineTransform", "method_description": "Applies the receiver\u2019s transform to the specified size and returns the results.", "params": [{"param_type": "NSSize", "param_name": ["aSize"], "param_description": ""}]}, {"return_value": {"return_type": ["NSBezierPath"], "return_name": [""], "return_description": []}, "method_name": "transform", "class_name": "NSAffineTransform", "method_description": "Creates and returns a new NSBezierPath object with each point in the given path transformed by the receiver.", "params": [{"param_type": "NSBezierPath", "param_name": ["path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "set", "class_name": "NSAffineTransform", "method_description": "Sets the current transformation matrix to the receiver\u2019s transformation matrix.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "concat", "class_name": "NSAffineTransform", "method_description": "Appends the receiver\u2019s matrix to the current transformation matrix stored in the current graphics context, replacing the current transformation matrix with the result.", "params": []}], "Vars": [{"var_type": "NSAffineTransformStruct", "var_description": "The matrix coefficients stored as the transformation matrix.", "var_name": "transformStruct"}], "subclass_list": [], "class_description": "A transformation specifies how points in one coordinate system are transformed to points in another coordinate system. An affine transformation is a special type of transformation that preserves parallel lines in a path but does not necessarily preserve lengths or angles. Scaling, rotation, and translation are the most commonly used manipulations supported by affine transforms, but shearing is also possible.\nNote\nIn OS X 10.3 and earlier the NSAffineTransform class was declared and implemented entirely in the Application Kit framework. As of macOS 10.4 the NSAffineTransform class has been split across the Foundation and Application Kit frameworks.\nMethods for applying affine transformations to the current graphics context and a method for applying an affine transformation to an NSBezierPath object are described in NSAffineTransform Additions Reference in the Application Kit.\nImportant\nThe Swift overlay to the Foundation framework provides the AffineTransform structure, which bridges to the NSAffineTransform class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "class_name": "NSAffineTransform"}
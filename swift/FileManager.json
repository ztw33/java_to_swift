{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The path to the current home directory.."]}, "method_name": "NSHomeDirectory", "class_name": "FileManager", "method_description": "Returns the path to either the user\u2019s or application\u2019s home directory, depending on the platform.", "params": []}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The logon name of the current user."]}, "method_name": "NSUserName", "class_name": "FileManager", "method_description": "Returns the logon name of the current user.", "params": []}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string containing the full name of the current user. "]}, "method_name": "NSFullUserName", "class_name": "FileManager", "method_description": "Returns a string containing the full name of the current user.", "params": []}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["A URL object containing the location of the specified user\u2019s home directory, or nil if no such user exists or the user\u2019s home directory is not available."]}, "method_name": "homeDirectory", "class_name": "FileManager", "method_description": "Returns the home directory for the specified user.", "params": [{"param_type": "String", "param_name": ["forUser", "userName"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The path to the home directory for the user specified by userName."]}, "method_name": "NSHomeDirectoryForUser", "class_name": "FileManager", "method_description": "Returns the path to a given user\u2019s home directory.", "params": [{"param_type": "String", "param_name": ["userName"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string containing the path of the temporary directory for the current user."]}, "method_name": "NSTemporaryDirectory", "class_name": "FileManager", "method_description": "Returns the path of the temporary directory for the current user.", "params": []}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The NSURL for the requested directory."]}, "method_name": "url", "class_name": "FileManager", "method_description": "Locates and optionally creates the specified common directory in a domain.", "params": [{"param_type": "FileManager.SearchPathDirectory", "param_name": ["for", "directory"], "param_description": ""}, {"param_type": "FileManager.SearchPathDomainMask", "param_name": ["in", "domain"], "param_description": ""}, {"param_type": "URL", "param_name": ["appropriateFor", "url"], "param_description": ""}, {"param_type": "Bool", "param_name": ["create", "shouldCreate"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array of NSURL objects identifying the requested directories. The directories are ordered according to the order of the domain mask constants, with items in the user domain first and items in the system domain last. "]}, "method_name": "urls", "class_name": "FileManager", "method_description": "Returns an array of URLs for the specified common directory in the requested domains.", "params": [{"param_type": "FileManager.SearchPathDirectory", "param_name": ["for", "directory"], "param_description": ""}, {"param_type": "FileManager.SearchPathDomainMask", "param_name": ["in", "domainMask"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": []}, "method_name": "NSSearchPathForDirectoriesInDomains", "class_name": "FileManager", "method_description": "Creates a list of directory search paths.", "params": [{"param_type": "FileManager.SearchPathDirectory", "param_name": ["directory"], "param_description": ""}, {"param_type": "FileManager.SearchPathDomainMask", "param_name": ["domainMask"], "param_description": ""}, {"param_type": "Bool", "param_name": ["expandTilde"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string identifying the root directory of the user\u2019s system."]}, "method_name": "NSOpenStepRootDirectory", "class_name": "FileManager", "method_description": "Returns the root directory of the user\u2019s system.", "params": []}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["A URL indicating the location of the group's shared directory in the file system. In iOS, the value is nil when the group identifier is invalid. In macOS, a URL of the expected form is always returned, even if the app group is invalid, so be sure to test that you can access the underlying directory before attempting to use it."]}, "method_name": "containerURL", "class_name": "FileManager", "method_description": "Returns the container directory associated with the specified security application group identifier.", "params": [{"param_type": "String", "param_name": ["forSecurityApplicationGroupIdentifier", "groupIdentifier"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array of NSURL objects, each of which identifies a file, directory, or symbolic link contained in url. If the directory contains no entries, this method returns an empty array."]}, "method_name": "contentsOfDirectory", "class_name": "FileManager", "method_description": "Performs a shallow search of the specified directory and returns URLs for the contained items. ", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "[URLResourceKey]", "param_name": ["includingPropertiesForKeys", "keys"], "param_description": ""}, {"param_type": "FileManager.DirectoryEnumerationOptions", "param_name": ["options", "mask"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of NSString objects, each of which identifies a file, directory, or symbolic link contained in path. Returns an empty array if the directory exists but has no contents."]}, "method_name": "contentsOfDirectory", "class_name": "FileManager", "method_description": "Performs a shallow search of the specified directory and returns the paths of any contained items.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool = default -> FileManager.DirectoryEnumerator"], "return_name": [""], "return_description": ["An directory enumerator object that enumerates the contents of the directory at url. If url is a filename, the method returns an enumerator object that enumerates no files\u2014the first call to nextObject() returns nil. "]}, "method_name": "enumerator", "class_name": "FileManager", "method_description": "Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified URL.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "[URLResourceKey]", "param_name": ["includingPropertiesForKeys", "keys"], "param_description": ""}, {"param_type": "FileManager.DirectoryEnumerationOptions", "param_name": ["options", "mask"], "param_description": ""}, {"param_type": "((URL", "param_name": ["errorHandler", "handler"], "param_description": ""}, {"param_type": "Error", "param_name": ["Error"], "param_description": ""}]}, {"return_value": {"return_type": ["FileManager.DirectoryEnumerator"], "return_name": [""], "return_description": ["An NSDirectoryEnumerator object that enumerates the contents of the directory at path."]}, "method_name": "enumerator", "class_name": "FileManager", "method_description": "Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array of NSURL objects identifying the mounted volumes. "]}, "method_name": "mountedVolumeURLs", "class_name": "FileManager", "method_description": "Returns an array of URLs that identify the mounted volumes available on the device.", "params": [{"param_type": "[URLResourceKey]", "param_name": ["includingResourceValuesForKeys", "propertyKeys"], "param_description": ""}, {"param_type": "FileManager.VolumeEnumerationOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of strings, each containing the path of an item in the directory specified by path."]}, "method_name": "subpathsOfDirectory", "class_name": "FileManager", "method_description": "Performs a deep enumeration of the specified directory and returns the paths of all of the contained subdirectories. ", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of NSString objects, each of which contains the path of an item in the directory specified by path. If path is a symbolic link, this method traverses the link. This method returns nil if it cannot retrieve the device of the linked-to file."]}, "method_name": "subpaths", "class_name": "FileManager", "method_description": "Returns an array of strings identifying the paths for all items in the specified directory. ", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the directory was created, true if createIntermediates is set and the directory already exists, or false if an error occurred."]}, "method_name": "createDirectory", "class_name": "FileManager", "method_description": "Creates a directory with the given attributes at the specified URL.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "Bool", "param_name": ["withIntermediateDirectories", "createIntermediates"], "param_description": ""}, {"param_type": "Any]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the directory was created, true if createIntermediates is set and the directory already exists, or false if an error occurred."]}, "method_name": "createDirectory", "class_name": "FileManager", "method_description": "Creates a directory with given attributes at the specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "Bool", "param_name": ["withIntermediateDirectories", "createIntermediates"], "param_description": ""}, {"param_type": "Any]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation was successful or if the item already exists, otherwise false."]}, "method_name": "createFile", "class_name": "FileManager", "method_description": "Creates a file with the specified content and attributes at the given location.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "Data", "param_name": ["contents", "data"], "param_description": ""}, {"param_type": "Any]", "param_name": ["attributes", "attr"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was removed successfully or if URL was nil. Returns false if an error occurred. If the delegate stops the operation for a file, this method returns true. However, if the delegate stops the operation for a directory, this method returns false.  "]}, "method_name": "removeItem", "class_name": "FileManager", "method_description": "Removes the file or directory at the specified URL.", "params": [{"param_type": "URL", "param_name": ["at", "URL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was removed successfully or if path was nil. Returns false if an error occurred. If the delegate stops the operation for a file, this method returns true. However, if the delegate stops the operation for a directory, this method returns false. "]}, "method_name": "removeItem", "class_name": "FileManager", "method_description": "Removes the file or directory at the specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item at url was successfully moved to the trash, or false if the item was not moved to the trash."]}, "method_name": "trashItem", "class_name": "FileManager", "method_description": "Moves an item to the trash.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSURL>", "param_name": ["resultingItemURL", "outResultingURL"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The URL of the new item. If no new file system object is required, the URL object in this parameter may be the same passed to the originalItemURL parameter. However, if a new file system object is required, the URL object may be different. For example, replacing an RTF document with an RTFD document requires the creation of a new file."]}, "method_name": "replaceItemAt", "class_name": "FileManager", "method_description": "Replaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.", "params": [{"param_type": "URL", "param_name": ["originalItemURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["withItemAt", "newItemURL"], "param_description": ""}, {"param_type": "String", "param_name": ["backupItemName"], "param_description": ""}, {"param_type": "FileManager.ItemReplacementOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the replacement was successful or false if an error occurred."]}, "method_name": "replaceItem", "class_name": "FileManager", "method_description": "Replaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.", "params": [{"param_type": "URL", "param_name": ["at", "originalItemURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["withItemAt", "newItemURL"], "param_description": ""}, {"param_type": "String", "param_name": ["backupItemName"], "param_description": ""}, {"param_type": "FileManager.ItemReplacementOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSURL>", "param_name": ["resultingItemURL", "resultingURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was copied successfully or the file manager\u2019s delegate stopped the operation deliberately. Returns false if an error occurred. "]}, "method_name": "copyItem", "class_name": "FileManager", "method_description": "Copies the file at the specified URL to a new location synchronously.", "params": [{"param_type": "URL", "param_name": ["at", "srcURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["to", "dstURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was copied successfully or the file manager\u2019s delegate stopped the operation deliberately. Returns false if an error occurred. "]}, "method_name": "copyItem", "class_name": "FileManager", "method_description": "Copies the item at the specified path to a new location synchronously.", "params": [{"param_type": "String", "param_name": ["atPath", "srcPath"], "param_description": ""}, {"param_type": "String", "param_name": ["toPath", "dstPath"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was moved successfully or the file manager\u2019s delegate stopped the operation deliberately. Returns false if an error occurred. "]}, "method_name": "moveItem", "class_name": "FileManager", "method_description": "Moves the file or directory at the specified URL to a new location synchronously.", "params": [{"param_type": "URL", "param_name": ["at", "srcURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["to", "dstURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item was moved successfully or the file manager\u2019s delegate stopped the operation deliberately. Returns false if an error occurred."]}, "method_name": "moveItem", "class_name": "FileManager", "method_description": "Moves the file or directory at the specified path to a new location synchronously.", "params": [{"param_type": "String", "param_name": ["atPath", "srcPath"], "param_description": ""}, {"param_type": "String", "param_name": ["toPath", "dstPath"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["A URL pointing to the specified ubiquity container, or nil if the container could not be located or if iCloud storage is unavailable for the current user or device."]}, "method_name": "url", "class_name": "FileManager", "method_description": "Returns the URL for the iCloud container associated with the specified identifier and establishes access to that container.", "params": [{"param_type": "String", "param_name": ["forUbiquityContainerIdentifier", "containerIdentifier"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the item is targeted for iCloud storage or false if it is not. This method also returns false if no item exists at url."]}, "method_name": "isUbiquitousItem", "class_name": "FileManager", "method_description": "Returns a Boolean indicating whether the item is targeted for storage in iCloud.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the item\u2019s status was updated successfully or false if an error occurred. If this method returns false and you specified a value for the errorOut parameter, this method returns an error object in the provided pointer. "]}, "method_name": "setUbiquitous", "class_name": "FileManager", "method_description": "Indicates whether the item at the specified URL should be stored in iCloud.", "params": [{"param_type": "Bool", "param_name": ["flag"], "param_description": ""}, {"param_type": "URL", "param_name": ["itemAt", "url"], "param_description": ""}, {"param_type": "URL", "param_name": ["destinationURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the download started successfully or was not necessary, otherwise false. If false is returned and errorOut is not nil, an NSError object describing the error is returned in that parameter."]}, "method_name": "startDownloadingUbiquitousItem", "class_name": "FileManager", "method_description": "Starts downloading (if necessary) the specified item to the local system.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the local item was removed successfully or false if it was not. If false is returned and error is not nil, an NSError object describing the error is returned in that parameter."]}, "method_name": "evictUbiquitousItem", "class_name": "FileManager", "method_description": "Removes the local copy of the specified item that\u2019s stored in iCloud.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["A URL with which users can download a copy of the item at url."]}, "method_name": "url", "class_name": "FileManager", "method_description": "Returns a URL that can be emailed to users to allow them to download a copy of a flat file item from iCloud.", "params": [{"param_type": "URL", "param_name": ["forPublishingUbiquitousItemAt", "url"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDate>", "param_name": ["expiration", "outDate"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "getFileProviderServicesForItem", "class_name": "FileManager", "method_description": "Returns the services provided by the File Provider extension that manages the item at the given URL.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "NSFileProviderService]", "param_name": ["completionHandler"], "param_description": ""}, {"param_type": "Error", "param_name": ["Error"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the symbolic link was created or false if an error occurred. This method also returns false if a file, directory, or link already exists at url."]}, "method_name": "createSymbolicLink", "class_name": "FileManager", "method_description": "Creates a symbolic link at the specified URL that points to an item at the given URL. ", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "URL", "param_name": ["withDestinationURL", "destURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the symbolic link was created or false if an error occurred. This method also returns false if a file, directory, or link already exists at path."]}, "method_name": "createSymbolicLink", "class_name": "FileManager", "method_description": "Creates a symbolic link that points to the specified destination. ", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "String", "param_name": ["withDestinationPath", "destPath"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the hard link was created or false if an error occurred. This method also returns false if a file, directory, or link already exists at dstURL."]}, "method_name": "linkItem", "class_name": "FileManager", "method_description": "Creates a hard link between the items at the specified URLs.", "params": [{"param_type": "URL", "param_name": ["at", "srcURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["to", "dstURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the hard link was created or false if an error occurred. This method also returns false if a file, directory, or link already exists at dstPath."]}, "method_name": "linkItem", "class_name": "FileManager", "method_description": "Creates a hard link between the items at the specified paths.", "params": [{"param_type": "String", "param_name": ["atPath", "srcPath"], "param_description": ""}, {"param_type": "String", "param_name": ["toPath", "dstPath"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["An NSString object containing the path of the directory or file to which the symbolic link path refers. If the symbolic link is specified as a relative path, that relative path is returned."]}, "method_name": "destinationOfSymbolicLink", "class_name": "FileManager", "method_description": "Returns the path of the item pointed to by a symbolic link.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if a file at the specified path exists, or false if the file does not exist or its existence could not be determined. "]}, "method_name": "fileExists", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether a file or directory exists at a specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if a file at the specified path exists, or false if the file\u2019s does not exist or its existence could not be determined. "]}, "method_name": "fileExists", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether a file or directory exists at a specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["isDirectory"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the current process has read privileges for the file at path; otherwise false if the process does not have read privileges or the existence of the file could not be determined. "]}, "method_name": "isReadableFile", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether the invoking object appears able to read a specified file. ", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the current process has write privileges for the file at path; otherwise false if the process does not have write privileges or the existence of the file could not be determined. "]}, "method_name": "isWritableFile", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether the invoking object appears able to write to a specified file.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the current process has execute privileges for the file at path; otherwise false if the process does not have execute privileges or the existence of the file could not be determined. "]}, "method_name": "isExecutableFile", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether the operating system appears able to execute a specified file.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the current process has delete privileges for the file at path; otherwise false if the process does not have delete privileges or the existence of the file could not be determined. "]}, "method_name": "isDeletableFile", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether the invoking object appears able to delete a specified file.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of NSString objects representing the user-visible (for the Finder, Open and Save panels, and so on) components of path. Returns nil if path does not exist."]}, "method_name": "componentsToDisplay", "class_name": "FileManager", "method_description": "Returns an array of strings representing the user-visible components of a given path.", "params": [{"param_type": "String", "param_name": ["forPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The name of the file or directory at path in a localized form appropriate for presentation to the user. If there is no file or directory at path, or if an error occurs, returns path as is."]}, "method_name": "displayName", "class_name": "FileManager", "method_description": "Returns the display name of the file or directory at a specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[FileAttributeKey"]], "return_description": ["A dictionary object that describes the attributes (file, directory, symlink, and so on) of the file specified by path. The keys in the dictionary are described in File Attribute Keys."]}, "method_name": "attributesOfItem", "class_name": "FileManager", "method_description": "Returns the attributes of the item at a given path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[FileAttributeKey"]], "return_description": ["A dictionary object that describes the attributes of the mounted file system on which path resides. See File-System Attribute Keys for a description of the keys available in the dictionary."]}, "method_name": "attributesOfFileSystem", "class_name": "FileManager", "method_description": "Returns a dictionary that describes the attributes of the mounted file system on which a given path resides.", "params": [{"param_type": "String", "param_name": ["forPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if all changes succeed. If any change fails, returns false, but it is undefined whether any changes actually occurred."]}, "method_name": "setAttributes", "class_name": "FileManager", "method_description": "Sets the attributes of the specified file or directory. ", "params": [{"param_type": "Any]", "param_name": ["attributes"], "param_description": ""}, {"param_type": "String", "param_name": ["ofItemAtPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": ["An NSData object with the contents of the file. If path specifies a directory, or if some other error occurs, this method returns nil."]}, "method_name": "contents", "class_name": "FileManager", "method_description": "Returns the contents of the file at the specified path.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if file or directory specified in path1 has the same contents as that specified in path2, otherwise false."]}, "method_name": "contentsEqual", "class_name": "FileManager", "method_description": "Returns a Boolean value that indicates whether the files or directories in specified paths have the same contents.", "params": [{"param_type": "String", "param_name": ["atPath", "path1"], "param_description": ""}, {"param_type": "String", "param_name": ["andPath", "path2"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the relationship between the items was successfully determined, or false if an error occurred."]}, "method_name": "getRelationship", "class_name": "FileManager", "method_description": "Determines the type of relationship that exists between a directory and an item.", "params": [{"param_type": "UnsafeMutablePointer<FileManager.URLRelationship>", "param_name": ["outRelationship"], "param_description": ""}, {"param_type": "URL", "param_name": ["ofDirectoryAt", "directoryURL"], "param_description": ""}, {"param_type": "URL", "param_name": ["toItemAt", "otherURL"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the relationship between the items was successfully determined, or false if an error occurred."]}, "method_name": "getRelationship", "class_name": "FileManager", "method_description": "Determines the type of relationship that exists between a system directory and the specified item. ", "params": [{"param_type": "UnsafeMutablePointer<FileManager.URLRelationship>", "param_name": ["outRelationship"], "param_description": ""}, {"param_type": "FileManager.SearchPathDirectory", "param_name": ["of", "directory"], "param_description": ""}, {"param_type": "FileManager.SearchPathDomainMask", "param_name": ["in", "domainMask"], "param_description": ""}, {"param_type": "URL", "param_name": ["toItemAt", "url"], "param_description": ""}]}, {"return_value": {"return_type": ["UnsafePointer<Int8>"], "return_name": [""], "return_description": ["A C-string representation of path that properly encodes Unicode strings for use by the file system."]}, "method_name": "fileSystemRepresentation", "class_name": "FileManager", "method_description": "Returns a C-string representation of a given path that properly encodes Unicode strings for use by the file system.", "params": [{"param_type": "String", "param_name": ["withPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["An NSString object converted from the C-string representation string with length len of a pathname in the current file system."]}, "method_name": "string", "class_name": "FileManager", "method_description": "Returns an NSString object whose contents are derived from the specified C-string path.", "params": [{"param_type": "UnsafePointer<Int8>", "param_name": ["withFileSystemRepresentation", "str"], "param_description": ""}, {"param_type": "Int", "param_name": ["length", "len"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if successful, otherwise false."]}, "method_name": "changeCurrentDirectoryPath", "class_name": "FileManager", "method_description": "Changes the path of the current working directory to the specified path. ", "params": [{"param_type": "String", "param_name": ["path"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "unmountVolume", "class_name": "FileManager", "method_description": "Starts the process of unmounting the specified volume.", "params": [{"param_type": "URL", "param_name": ["at", "url"], "param_description": ""}, {"param_type": "FileManager.UnmountOptions", "param_name": ["options", "mask"], "param_description": ""}, {"param_type": "@escaping (Error", "param_name": ["completionHandler"], "param_description": ""}]}, {"return_value": {"return_type": ["String!"], "return_name": [""], "return_description": ["A string that encodes hfsFileTypeCode."]}, "method_name": "NSFileTypeForHFSTypeCode", "class_name": "FileManager", "method_description": "Returns a string encoding a file type code.", "params": [{"param_type": "OSType", "param_name": ["hfsFileTypeCode"], "param_description": ""}]}, {"return_value": {"return_type": ["OSType"], "return_name": [""], "return_description": ["The HFS file type code corresponding to fileTypeString, or 0 if it cannot be found."]}, "method_name": "NSHFSTypeCodeFromFileType", "class_name": "FileManager", "method_description": "Returns a file type code.", "params": [{"param_type": "String!", "param_name": ["fileTypeString"], "param_description": ""}]}, {"return_value": {"return_type": ["String!"], "return_name": [""], "return_description": ["A string that encodes fullFilePath\u2018s HFS file type, or nil if the operation was not successful"]}, "method_name": "NSHFSTypeOfFile", "class_name": "FileManager", "method_description": "Returns a string encoding a file type.", "params": [{"param_type": "String!", "param_name": ["fullFilePath"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if all changes succeed. If any change fails, returns false, but it is undefined whether any changes actually occurred."]}, "method_name": "changeFileAttributes", "class_name": "FileManager", "method_description": "Changes the attributes of a given file or directory. DeprecatedUse setAttributes(_:ofItemAtPath:) instead.", "params": [{"param_type": "]", "param_name": ["attributes"], "param_description": ""}, {"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[AnyHashable"]], "return_description": ["An NSDictionary object that describes the POSIX attributes of the file specified at path. The keys in the dictionary are described in File Attribute Keys. If there is no item at path, returns nil."]}, "method_name": "fileAttributes", "class_name": "FileManager", "method_description": "Returns a dictionary that describes the POSIX attributes of the file specified at a given.DeprecatedUse attributesOfItem(atPath:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "Bool", "param_name": ["traverseLink", "yorn"], "param_description": ""}]}, {"return_value": {"return_type": ["Any]"], "return_name": [["[AnyHashable"]], "return_description": ["An NSDictionary object that describes the attributes of the mounted file system on which path resides. See File-System Attribute Keys for a description of the keys available in the dictionary."]}, "method_name": "fileSystemAttributes", "class_name": "FileManager", "method_description": "Returns a dictionary that describes the attributes of the mounted file system on which a given path resides.DeprecatedUse attributesOfFileSystem(forPath:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["[Any]"], "return_name": [""], "return_description": ["An array of NSString objects identifying the directories and files (including symbolic links) contained in path. Returns an empty array if the directory exists but has no contents. Returns nil if the directory specified at path does not exist or there is some other error accessing it. "]}, "method_name": "directoryContents", "class_name": "FileManager", "method_description": "Returns the directories and files (including symbolic links) contained in a given directory.DeprecatedUse contentsOfDirectory(atPath:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation was successful, otherwise false."]}, "method_name": "createDirectory", "class_name": "FileManager", "method_description": "Creates a directory (without contents) at a given path with given attributes.DeprecatedUse createDirectory(at:withIntermediateDirectories:attributes:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation is successful, otherwise false. Returns false if a file, directory, or symbolic link identical to path already exists."]}, "method_name": "createSymbolicLink", "class_name": "FileManager", "method_description": "Creates a symbolic link identified by a given path that refers to a given location.DeprecatedUse createSymbolicLink(at:withDestinationURL:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}, {"param_type": "String", "param_name": ["pathContent", "otherpath"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The path of the directory or file to which the symbolic link path refers, or nil upon failure. If the symbolic link is specified as a relative path, that relative path is returned."]}, "method_name": "pathContentOfSymbolicLink", "class_name": "FileManager", "method_description": "Returns the path of the directory or file that a symbolic link at a given path refers to.DeprecatedUse destinationOfSymbolicLink(atPath:) instead.", "params": [{"param_type": "String", "param_name": ["atPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation (which is often continuous within a loop) should proceed, otherwise false. "]}, "method_name": "fileManager", "class_name": "FileManager", "method_description": "An NSFileManager object sends this message to its handler for each error it encounters when copying, moving, removing, or linking files or directories. DeprecatedSee delegate methods for copy, move, remove, and link methods.", "params": [{"param_type": "FileManager", "param_name": ["fm"], "param_description": ""}, {"param_type": "Any]", "param_name": ["shouldProceedAfterError", "errorInfo"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "fileManager", "class_name": "FileManager", "method_description": "An NSFileManager object sends this message to a handler immediately before attempting to move, copy, rename, or delete, or before attempting to link to a given path.DeprecatedSee delegate methods for copy, move, link, and remove methods.", "params": [{"param_type": "FileManager", "param_name": ["fm"], "param_description": ""}, {"param_type": "String", "param_name": ["willProcessPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["NSURL"], "return_name": [""], "return_description": ["The URL of the new item. If no new file system object is required, the URL object in this parameter may be the same passed to the originalItemURL parameter. However, if a new file system object is required, the URL object may be different. For example, replacing an RTF document with an RTFD document requires the creation of a new file."]}, "method_name": "replaceItemAtURL", "class_name": "FileManager", "method_description": "Replaces the contents of the item at the specified URL in a manner that ensures no data loss occurs.DeprecatedUse replaceItemAt(_:withItemAt:backupItemName:options:) instead.", "params": [{"param_type": "NSURL", "param_name": ["originalItemURL"], "param_description": ""}, {"param_type": "NSURL", "param_name": ["withItemAtURL", "newItemURL"], "param_description": ""}, {"param_type": "String", "param_name": ["backupItemName"], "param_description": ""}, {"param_type": "FileManager.ItemReplacementOptions", "param_name": ["options"], "param_description": ""}]}], "Vars": [{"var_type": "FileManager", "var_description": "The shared file manager object for the process.", "var_name": "`default`"}, {"var_type": "URL", "var_description": "The home directory for the current user.", "var_name": "homeDirectoryForCurrentUser"}, {"var_type": "URL", "var_description": "The temporary directory for the current user.", "var_name": "temporaryDirectory"}, {"var_type": "(NSCoding", "var_description": "An opaque token that represents the current user\u2019s iCloud identity.", "var_name": "ubiquityIdentityToken"}, {"var_type": "FileManagerDelegate", "var_description": "The delegate of the file manager object.", "var_name": "delegate"}, {"var_type": "String", "var_description": "The path to the program\u2019s current directory.", "var_name": "currentDirectoryPath"}, {"var_type": "String", "var_description": "The process identifier of the process that prevented a volume from unmounting.", "var_name": "NSFileManagerUnmountDissentingProcessIdentifierErrorKey"}, {"var_type": "Int32", "var_description": "The version of the Foundation framework in which NSFileManager first supported resource forks.", "var_name": "NSFoundationVersionWithFileManagerResourceForkSupport"}, {"var_type": "NSNotification.Name", "var_description": "Sent after the iCloud (\u201cubiquity\u201d) identity has changed.", "var_name": "NSUbiquityIdentityDidChange"}], "subclass_list": [], "class_description": "A file manager object lets you examine the contents of the file system and make changes to it. The FileManager class provides convenient access to a shared file manager object that is suitable for most types of file-related manipulations. A file manager object is typically your primary mode of interaction with the file system. You use it to locate, create, copy, and move files and directories. You also use it to get information about a file or directory or change some of its attributes.\nWhen specifying the location of files, you can use either NSURL or NSString objects. The use of the NSURL class is generally preferred for specifying file-system items because URLs can convert path information to a more efficient representation internally. You can also obtain a bookmark from an NSURL object, which is similar to an alias and offers a more sure way of locating the file or directory later.\nIf you are moving, copying, linking, or removing files or directories, you can use a delegate in conjunction with a file manager object to manage those operations. The delegate\u2019s role is to affirm the operation and to decide whether to proceed when errors occur. In macOS 10.7 and later, the delegate must conform to the FileManagerDelegate protocol.\nIn iOS 5.0 and later and in macOS 10.7 and later, FileManager includes methods for managing items stored in iCloud. Files and directories tagged for cloud storage are synced to iCloud so that they can be made available to the user\u2019s iOS devices and Macintosh computers. Changes to an item in one location are propagated to all other locations to ensure the items stay in sync.\nThe methods of the shared FileManager object can be called from multiple threads safely. However, if you use a delegate to receive notifications about the status of move, copy, remove, and link operations, you should create a unique instance of the file manager object, assign your delegate to that object, and use that file manager to initiate your operations.\n", "class_name": "FileManager"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [], "Vars": [{"var_type": "String", "var_description": "The portion of a name\u2019s full form of address that precedes the name itself (for example, \u201cDr.,\u201d \u201cMr.,\u201d \u201cMs.\u201d).", "var_name": "namePrefix"}, {"var_type": "String", "var_description": "Name bestowed upon an individual to differentiate them from other members of a group that share a family name (for example, \u201cJohnathan\u201d).", "var_name": "givenName"}, {"var_type": "String", "var_description": "Secondary name bestowed upon an individual to differentiate them from others that have the same given name (for example, \u201cMaple\u201d).", "var_name": "middleName"}, {"var_type": "String", "var_description": "Name bestowed upon an individual to denote membership in a group or family. (for example, \u201cAppleseed\u201d).", "var_name": "familyName"}, {"var_type": "String", "var_description": "The portion of a name\u2019s full form of address that follows the name itself (for example, \u201cEsq.,\u201d \u201cJr.,\u201d \u201cPh.D.\u201d).", "var_name": "nameSuffix"}, {"var_type": "String", "var_description": "Name substituted for the purposes of familiarity (for example, \"Johnny\").", "var_name": "nickname"}, {"var_type": "PersonNameComponents", "var_description": "The phonetic representation name components of the receiver. ", "var_name": "phoneticRepresentation"}], "subclass_list": [], "class_description": "An NSPersonNameComponents object encapsulates the components of a person's name in an extendable, object-oriented manner. It is used to specify a person's name by providing the components comprising a full name: given name, middle name, family name, prefix, suffix, nickname, and phonetic representation.\nNSPersonNameComponents objects can be used by an instance of PersonNameComponentsFormatter to create string representations suitable for display in the current locale.\nImportant\nThe Swift overlay to the Foundation framework provides the PersonNameComponents structure, which bridges to the NSPersonNameComponents class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nIt is important to understand that names are disjoint from a person\u2019s identity. An individual may, at any time, have zero, one, or many names. Names cannot be used as a determination of a person\u2019s identity, because two names may correspond to the same individual, and two people may have the same name. Nor can names be used as a determination of a person\u2019s relation to others, because an individual may have a different family name than their relatives, and two individuals may have the same family name, but not be related.\nMany locales and cultures have rules about what kinds of names are allowed and how they are structured. An NSPersonNameComponents object does not impose any restrictions about which combinations of properties may have values or what those values may be.\nNote\nNSPersonNameComponents represents only the components of a name. To represent contact information, such as postal addresses or phone numbers, in addition to a personal name, use CNContact or CNMutableContact instead.\nAn NSPersonNameComponents object encodes the following components of a personal name, which are described in detail below.\nGiven Name (givenName)\nMiddle Name (middleName)\nFamily Name (familyName)\nPrefix (namePrefix)\nSuffix (nameSuffix)\nNickname (nickname)\nPhonetic Representation (phoneticRepresentation)\nA given name is bestowed upon an individual to differentiate them from other members of a group that share a family name. In some locales, this is also known as a \u201cfirst name\u201d or \u201cforename.\u201d\nNames may consist of multiple given names. For example, the Spanish name \u201cMar\u00eda Rosal\u00eda Rita de Castro\u201d consists of the given names \u201cMar\u00eda,\u201d \u201cRosal\u00eda,\u201d and \u201cRita.\u201d\nWhen modeling a name containing multiple given names with an NSPersonNameComponents object, concatenate them using a locale-appropriate delimiter and set the result as the givenName property value. If one of the given names is more commonly used in informal settings, such as \u201cRosal\u00eda\u201d for \u201cRosal\u00eda de Castro,\u201d you can set that as the nickname property value.\nA middle name is a secondary given name bestowed upon an individual to differentiate them from others that have the same given name.\nNames can consist of one or more middle names in addition to a given name and/or family name. A middle name may appear only in certain styles, depending on the user localization preferences.\nA middle name may consist only of an initial, such as the American name \u201cSalmon P. Chase.\u201d When modeling a name containing a middle initial, set the initial and locale-appropriate punctuation as the middleName property value. Although many English-speaking locales commonly abbreviate middle names with middle initials, don\u2019t attempt to abbreviate a provided middle name yourself.\nSometimes, a middle name is preferred to a given name for common use. In that case, set the middleName property value as the nickname property value instead.\nWhen modeling a name containing multiple middle names with an NSPersonNameComponents object, concatenate them using a locale-appropriate delimiter and set the result as the middleName property value.\nA family name is a name bestowed upon an individual to denote membership in a group or family.\nSome family names consist of a prepositional phrase to denote nobility or regional ancestry, such as the Dutch name \u201cJoost van den Vondel,\u201d which contains the prepositional phrase \u201cvan den.\u201d When modeling a name containing such a family name with an NSPersonNameComponents object, include any prepositional particles as part of the familyName property value.\nSome family names consist of matronymic, patronymic, or other ancestral names. For example, the Chilean name \u201cManuel Xavier Rodr\u00edguez Erdo\u00edza\u201d consists of the paternal name \u201cRodr\u00edguez\u201d and the maternal name \u201cErdo\u00edza.\u201d The usage and order of composite name components vary across different locales and cultures.\nWhen modeling a name containing multiple family names with an NSPersonNameComponents object, use the entire composite family name as the familyName property value.\nIt is traditional in some locales, particularly in China, for relatives born in the same generation to have a common generational name. For example, the Chinese name \u201c\u90d1\u79cb\u5a9b (Zheng Qiuyuan)\u201d consists of the family name \u201c\u90d1 (Zheng)\u201d and the given name \u201c\u79cb\u5a9b (Qiuyuan).\u201d The generational name \u201c\u79cb (Qiu)\u201d might be shared between the names of siblings or cousins, for instance, \u201c\u90d1\u79cb\u5fb7 (Zheng Qiude).\u201d When modeling a name consisting of a generational name with NSPersonNameComponents, you should use the combined generational and given name values as the givenName property value.\nSome names incorporate generational suffixes, such as \u201cJr.,\u201d \u201cSr.,\u201d or a roman numeral (I, II, III, IV, etc.) to distinguish between family members that have the same name. For example, the Samoan name \u201cMalietoa Tanumafili II\u201d contains the generational suffix \u201cII\u201d to denote the second generation. When modeling a name consisting of a generational suffix with NSPersonNameComponents, use it as the nameSuffix property value.\nSome individuals are commonly, legally, and/or historically identified by a single name. For example, the Lithuanian names \u201cVyd\u016bnas,\u201d \u201c\u017demait\u0117,\u201d and \u201cMaironis.\u201d When modeling a mononymous name with NSPersonNameComponents, set the name as the familyName property value.\nA name prefix is the portion of a name\u2019s full form of address that precedes the name itself. A name suffix is the portion of a name\u2019s full form of address that follows the name itself. Depending on the locale and individual, both may include any number of titles, honorifics, distinctions, or other information.\nNames can incorporate honorifics to convey respect when addressing an individual. Depending on the locale, honorifics may be incorporated into a name prefix or suffix, which is usually applied to a full name or family name only. For example, the American name \u201cMr. Sherman\u201d contains the honorific \u201cMr.\u201d as a prefix, whereas the Japanese name \u201c\u590f\u76ee\u3055\u3093 (Natsume-san)\u201d contains the honorific \u201csan (\u3055\u3093)\u201d as a suffix. Unlike most other aspects of names, honorifics are often localized to their corresponding equivalent for another language. For example, an American person might address a Japanese person as \u201cMr. Natsume,\u201d and a Japanese person might address an American person as \u201c\u30b7\u30e3\u30fc\u30de\u30f3\u3055\u3093 (Sherman-san).\u201d\nA person that holds an academic degree, accreditation, decoration, or honor may convey that distinction through a name prefix or suffix, which can sometimes take the place of a conventional honorific. For example, the name \u201cJames Watt, FRS, FRSE\u201d contains the postnominal letters \u201cFRS\u201d and \u201cFRSE\u201d to convey membership to learned societies. When modeling postnominal letters with NSPersonNameComponents, concatenate them using a locale-appropriate delimiter and set the result as the nameSuffix property value.\nUsers often prefer to be addressed informally when using an app, so the use of honorifics in names is not always appropriate. For this reason, honorifics and other distinctions typically appear in names only when a formatter specifies the most explicit style. When such formalities are appropriate, you should be aware of the particular conventions for addressing individuals in the target locale.\nIt is sometimes beneficial to provide phonetic representations to aid in the pronunciation of names that are foreign or unfamiliar. For example, the Malay name \u201c\u064a\u0648\u0633\u0641 \u0628\u0646 \u0627\u0633\u062d\u0627\u0642\u201d in Jawi script may be transliterated into Latin script as \u201cYusof bin Ishak\u201d for English-speaking locales, where Latin script is commonly used. Depending on the locale and on the way the name is to be displayed to the user, it may be appropriate to provide an appropriate transliteration. This may be provided by the user or computed using the CFStringTransform(_:_:_:_:) function, except for names in certain nonphonetic scripts.\nA phonetic representation may also be used to specify the pronunciation of a name in idiographic script with multiple pronunciations. For example, the character \u201c\u85e4\u201d in the Japanese name \u201c\u8fd1\u85e4 \u85e4\u5b50 (Kond\u014d Fujiko)\u201d is pronounced \u201cd\u014d\u201d in the family name and \u201cfuji\u201d in the given name, which can be clarified by providing the furigana \u201c\u3053\u3093\u3069\u3046 \u3075\u3058\u3053\u201d as a phonetic representation for a Japanese locale.\nA phonetic representation may also be appropriate for names in a script appropriate for, but unfamiliar to, a given locale. For example, for the French name \u201cClaude Debussy\u201d the phonetic representation \u201cclawed deb-you-see\u201d as a pronunciation aid to an American English-speaking locale. Use of this kind of phonetic representation is discouraged for most user contexts.\nIndividuals may have one or more valid names, or aliases. This may be the result of adopting a new name in conjunction with a life event, such as marriage. For example, the name \u201cMarie Curie\u201d could have the corresponding alias \u201cMaria Salomea Sk\u0142odowska.\u201d\nBecause each alias represents a separate name, an individual with one or more aliases would be modeled by a corresponding of number of NSPersonNameComponents objects, each representing a single alias.\n", "class_name": "NSPersonNameComponents"}
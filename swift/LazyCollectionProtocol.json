{"class_description": "Please see LazySequenceProtocol for background; LazyCollectionProtocol is an analogous component, but for collections.\nTo add new lazy collection operations, extend this protocol with methods that return lazy wrappers that are themselves LazyCollectionProtocols.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": ["", "", ""], "return_description": [], "return_type": ["ElementOfResult -> LazyMapCollection<LazyFilterCollection<LazyMapCollection<Self.Elements", "ElementOfResult>>", "ElementOfResult>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns the non-nil results of mapping the given transformation over this collection.", "method_name": "compactMap", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["transform"], "param_description": "A closure that accepts an element of this collection as its argument and returns an optional value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool -> LazyDropWhileCollection<Self.Elements>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns a lazy collection that skips any initial elements that satisfy predicate.", "method_name": "drop", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["while", "predicate"], "param_description": "A closure that takes an element of the collection as its argument and returns true if the element should be skipped or false otherwise. Once predicate returns false it will not be called again."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool -> LazyFilterCollection<Self.Elements>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns the elements of self that satisfy predicate.", "method_name": "filter", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["isIncluded"], "param_description": ""}]}, {"return_value": {"return_name": ["", ""], "return_description": [], "return_type": ["SegmentOfResult -> LazyCollection<FlattenCollection<LazyMapCollection<Self.Elements", "SegmentOfResult>>>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns the concatenated results of mapping the given transformation over this collection.", "method_name": "flatMap", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_name": ["", "", ""], "return_description": [], "return_type": ["ElementOfResult -> LazyMapCollection<LazyFilterCollection<LazyMapCollection<Self.Elements", "ElementOfResult>>", "ElementOfResult>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns the non-nil results of mapping the given transformation over this collection.", "method_name": "flatMap", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["transform"], "param_description": "A closure that accepts an element of this collection as its argument and returns an optional value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["LazyCollection<FlattenCollection<Self.Elements>>"]}, "class_name": "LazyCollectionProtocol", "method_description": "A concatenation of the elements of self.", "method_name": "joined", "params": []}, {"return_value": {"return_name": ["", ""], "return_description": [], "return_type": ["U -> LazyMapCollection<Self.Elements", "U>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns a LazyMapCollection over this Collection.  The elements of the result are computed lazily, each time they are read, by calling transform function on a base element.", "method_name": "map", "params": [{"param_type": "@escaping (Self.Elements.Element", "param_name": ["transform"], "param_description": ""}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool -> LazyPrefixWhileCollection<Self.Elements>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns a lazy collection of the initial consecutive elements that satisfy predicate.", "method_name": "prefix", "params": [{"param_type": "@escaping (Self.Element", "param_name": ["while", "predicate"], "param_description": "A closure that takes an element of the collection as its argument and returns true if the element should be included or false otherwise. Once predicate returns false it will not be called again."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["LazyCollection<ReversedCollection<Self.Elements>>"]}, "class_name": "LazyCollectionProtocol", "method_description": "Returns the elements of the collection in reverse order.", "method_name": "reversed", "params": []}], "class_inherit_list": ["Collection", "LazySequenceProtocol"], "Vars": [{"var_type": "LazyCollection<Self.Elements>", "var_description": "", "var_name": "lazy"}, {"var_type": "Self.Elements", "var_description": "", "var_name": "lazy"}], "subclass_list": [], "class_name": "LazyCollectionProtocol"}
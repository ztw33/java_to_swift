{"class_inherit_list": [], "Vars": [{"var_description": "A textual representation of the Boolean value.", "var_type": "String", "var_name": "description"}, {"var_description": "A mirror that reflects the Bool instance.", "var_type": "Mirror", "var_name": "customMirror"}, {"var_description": "A custom playground Quick Look for the Bool instance.", "var_type": "PlaygroundQuickLook", "var_name": "customPlaygroundQuickLook"}, {"var_description": "", "var_type": "MLDataValue", "var_name": "dataValue"}, {"var_description": "", "var_type": "MLDataValue.ValueType", "var_name": "dataValueType"}], "class_name": "Bool", "interface_list": ["CKRecordValueProtocol", "CustomPlaygroundQuickLookable", "CustomReflectable", "CustomStringConvertible", "CVarArg", "Equatable", "ExpressibleByBooleanLiteral", "Hashable", "LosslessStringConvertible"], "subclass_list": [], "class_description": "Bool represents Boolean values in Swift. Create instances of Bool by using one of the Boolean literals true or false, or by assigning the result of a Boolean method or operation to a variable or constant.\nSwift uses only simple Boolean values in conditional contexts to help avoid accidental programming errors and to help maintain the clarity of each control statement. Unlike in other programming languages, in Swift, integers and strings cannot be used where a Boolean value is required.\nFor example, the following code sample does not compile, because it attempts to use the integer i in a logical context:\nThe correct approach in Swift is to compare the i value with zero in the while statement.\nThe C bool and Boolean types and the Objective-C BOOL type are all bridged into Swift as Bool. The single Bool type in Swift guarantees that functions, methods, and properties imported from C and Objective-C have a consistent type interface.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "Bool", "params": [{"param_description": "", "param_type": "Bool", "param_name": ["lhs"]}, {"param_description": "", "param_type": "Bool", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "Bool", "params": [{"param_description": "A value to compare.", "param_type": "Bool", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "Bool", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Toggles the Boolean variable\u2019s value.", "method_name": "toggle", "class_name": "Bool", "params": []}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Performs a logical NOT operation on a Boolean value.", "method_name": "!", "class_name": "Bool", "params": [{"param_description": "The Boolean value to negate.", "param_type": "Bool", "param_name": ["a"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Performs a logical OR operation on two Boolean values.", "method_name": "||", "class_name": "Bool", "params": [{"param_description": "The left-hand side of the operation.", "param_type": "Bool", "param_name": ["lhs"]}, {"param_description": "The right-hand side of the operation.", "param_type": "@autoclosure (", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool rethrows -> Bool"]}, "method_description": "Performs a logical AND operation on two Boolean values.", "method_name": "&&", "class_name": "Bool", "params": [{"param_description": "The left-hand side of the operation.", "param_type": "Bool", "param_name": ["lhs"]}, {"param_description": "The right-hand side of the operation.", "param_type": "@autoclosure (", "param_name": ["rhs"]}]}, {"return_value": {"return_description": ["Either true or false, randomly chosen with equal probability."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a random Boolean value.", "method_name": "random", "class_name": "Bool", "params": []}, {"return_value": {"return_description": ["Either true or false, randomly chosen with equal probability."], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a random Boolean value, using the given generator as a source for randomness.", "method_name": "random", "class_name": "Bool", "params": [{"param_description": "The random number generator to use when creating the new random value.", "param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Hashes the essential components of this value by feeding them into the given hasher.", "method_name": "hash", "class_name": "Bool", "params": [{"param_description": "The hasher to use when combining the components of this instance.", "param_type": "inout Hasher", "param_name": ["into", "hasher"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Encodes this value into the given encoder.", "method_name": "encode", "class_name": "Bool", "params": [{"param_description": "The encoder to write data to.", "param_type": "Encoder", "param_name": ["to", "encoder"]}]}], "package_name": "swift"}
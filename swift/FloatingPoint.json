{"class_description": "Floating-point types are used to represent fractional numbers, like 5.5, 100.0, or 3.14159274. Each floating-point type has its own possible range and precision. The floating-point types in the standard library are Float, Double, and Float80 where available.\nCreate new instances of floating-point types using integer or floating-point literals. For example:\nThe FloatingPoint protocol declares common arithmetic operations, so you can write functions and algorithms that work on any floating-point type. The following example declares a function that calculates the length of the hypotenuse of a right triangle given its two perpendicular sides. Because the hypotenuse(_:_:) function uses a generic parameter constrained to the FloatingPoint protocol, you can call it using any floating-point type.\nFloating-point values are represented as a sign and a magnitude, where the magnitude is calculated using the type\u2019s radix and the instance\u2019s significand and exponent. This magnitude calculation takes the following form for a floating-point value x of type F, where ** is exponentiation:\nHere\u2019s an example of the number -8.5 represented as an instance of the Double type, which defines a radix of 2.\nTypes that conform to the FloatingPoint protocol provide most basic (clause 5) operations of the IEEE 754 specification. The base, precision, and exponent range are not fixed in any way by this protocol, but it enforces the basic requirements of any IEEE 754 floating-point type.\nIn addition to representing specific numbers, floating-point types also have special values for working with overflow and nonnumeric results of calculation.\nAny value whose magnitude is so great that it would round to a value outside the range of representable numbers is rounded to infinity. For a type F, positive and negative infinity are represented as F.infinity and -F.infinity, respectively. Positive infinity compares greater than every finite value and negative infinity, while negative infinity compares less than every finite value and positive infinity. Infinite values with the same sign are equal to each other.\nOperations with infinite values follow real arithmetic as much as possible: Adding or subtracting a finite value, or multiplying or dividing infinity by a nonzero finite value, results in infinity.\nFloating-point types represent values that are neither finite numbers nor infinity as NaN, an abbreviation for \u201cnot a number.\u201d Comparing a NaN with any value, including another NaN, results in false.\nBecause testing whether one NaN is equal to another NaN results in false, use the isNaN property to test whether a value is NaN.\nNaN propagates through many arithmetic operations. When you are operating on many values, this behavior is valuable because operations on NaN simply forward the value and don\u2019t cause runtime errors. The following example shows how NaN values operate in different contexts.\nImagine you have a set of temperature data for which you need to report some general statistics: the total number of observations, the number of valid observations, and the average temperature. First, a set of observations in Celsius is parsed from strings to Double values:\nNote that some elements in the temperatureData array are not valid numbers. When these invalid strings are parsed by the Double failable initializer, the example uses the nil-coalescing operator (??) to provide NaN as a fallback value.\nNext, the observations in Celsius are converted to Fahrenheit:\nThe NaN values in the tempsCelsius array are propagated through the conversion and remain NaN in tempsFahrenheit.\nBecause calculating the average of the observations involves combining every value of the tempsFahrenheit array, any NaN values cause the result to also be NaN, as seen in this example:\nInstead, when you need an operation to have a specific numeric result, filter out any NaN values using the isNaN property.\nFinally, report the average temperature and observation counts:\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Adds the product of the two given values to this value in place, computed without intermediate rounding.Required.", "method_name": "addProduct", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "One of the values to multiply before adding to this value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The other value to multiply."}]}, {"return_value": {"return_name": [""], "return_description": ["The product of lhs and rhs, added to this value."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the result of adding the product of the two given values to this value, computed without intermediate rounding.Required. Default implementation provided.", "method_name": "addingProduct", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "One of the values to multiply before adding to this value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The other value to multiply."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Replaces this value with the remainder of itself divided by the given value.Required.", "method_name": "formRemainder", "params": [{"param_type": "Self", "param_name": ["dividingBy", "other"], "param_description": "The value to use when dividing this value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Replaces this value with its square root, rounded to a representable value.Required.", "method_name": "formSquareRoot", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Replaces this value with the remainder of itself divided by the given value using truncating division.Required.", "method_name": "formTruncatingRemainder", "params": [{"param_type": "Self", "param_name": ["dividingBy", "other"], "param_description": "The value to use when dividing this value."}]}, {"return_value": {"return_name": [""], "return_description": ["true if other has the same value as this instance; otherwise, false. If either this value or other is NaN, the result of this method is false."], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether this instance is equal to the given value.Required.", "method_name": "isEqual", "params": [{"param_type": "Self", "param_name": ["to", "other"], "param_description": "The value to compare with this value."}]}, {"return_value": {"return_name": [""], "return_description": ["true if this value is less than other; otherwise, false. If either this value or other is NaN, the result of this method is false."], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether this instance is less than the given value.Required.", "method_name": "isLess", "params": [{"param_type": "Self", "param_name": ["than", "other"], "param_description": "The value to compare with this value."}]}, {"return_value": {"return_name": [""], "return_description": ["true if other is greater than this value; otherwise, false. If either this value or other is NaN, the result of this method is false."], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether this instance is less than or equal to the given value.Required.", "method_name": "isLessThanOrEqualTo", "params": [{"param_type": "Self", "param_name": ["other"], "param_description": "The value to compare with this value."}]}, {"return_value": {"return_name": [""], "return_description": ["true if this value is ordered below or the same as other in a total ordering of the floating-point type; otherwise, false."], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether this instance should precede or tie positions with the given value in an ascending sort.Required. Default implementation provided.", "method_name": "isTotallyOrdered", "params": [{"param_type": "Self", "param_name": ["belowOrEqualTo", "other"], "param_description": "A floating-point value to compare to this value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Replaces this value with its additive inverse.Required.", "method_name": "negate", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The remainder of this value divided by other."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the remainder of this value divided by the given value.Required. Default implementation provided.", "method_name": "remainder", "params": [{"param_type": "Self", "param_name": ["dividingBy", "other"], "param_description": "The value to use when dividing this value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Rounds this value to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "round", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Rounds the value to an integral value using the specified rounding rule.Required.", "method_name": "round", "params": [{"param_type": "FloatingPointRoundingRule", "param_name": ["rule"], "param_description": "The rounding rule to use."}]}, {"return_value": {"return_name": [""], "return_description": ["The nearest integral value, or, if two integral values are equally close, the integral value with greater magnitude."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns this value rounded to an integral value using \u201cschoolbook rounding.\u201d", "method_name": "rounded", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The integral value found by rounding using rule."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns this value rounded to an integral value using the specified rounding rule.Required. Default implementation provided.", "method_name": "rounded", "params": [{"param_type": "FloatingPointRoundingRule", "param_name": ["rule"], "param_description": "The rounding rule to use."}]}, {"return_value": {"return_name": [""], "return_description": ["The square root of the value."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the square root of the value, rounded to a representable value.Required. Default implementation provided.", "method_name": "squareRoot", "params": []}, {"return_value": {"return_name": [""], "return_description": ["The remainder of this value divided by other using truncating division."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the remainder of this value divided by the given value using truncating division.Required. Default implementation provided.", "method_name": "truncatingRemainder", "params": [{"param_type": "Self", "param_name": ["dividingBy", "other"], "param_description": "The value to use when dividing this value."}]}, {"return_value": {"return_name": [""], "return_description": ["The greater of x and y, or whichever is a number if the other is NaN."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the greater of the two given values.Required. Default implementation provided.", "method_name": "maximum", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": "A floating-point value."}, {"param_type": "Self", "param_name": ["y"], "param_description": "Another floating-point value."}]}, {"return_value": {"return_name": [""], "return_description": ["Whichever of x or y has greater magnitude, or whichever is a number if the other is NaN."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the value with greater magnitude.Required. Default implementation provided.", "method_name": "maximumMagnitude", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": "A floating-point value."}, {"param_type": "Self", "param_name": ["y"], "param_description": "Another floating-point value."}]}, {"return_value": {"return_name": [""], "return_description": ["The minimum of x and y, or whichever is a number if the other is NaN."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the lesser of the two given values.Required. Default implementation provided.", "method_name": "minimum", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": "A floating-point value."}, {"param_type": "Self", "param_name": ["y"], "param_description": "Another floating-point value."}]}, {"return_value": {"return_name": [""], "return_description": ["Whichever of x or y has lesser magnitude, or whichever is a number if the other is NaN."], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the value with lesser magnitude.Required. Default implementation provided.", "method_name": "minimumMagnitude", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": "A floating-point value."}, {"param_type": "Self", "param_name": ["y"], "param_description": "Another floating-point value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Multiplies two values and produces their product, rounding to a representable value.Required.", "method_name": "*", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Multiplies two values and stores the result in the left-hand-side variable, rounding to a representable value.Required.", "method_name": "*=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Adds two values and produces their sum, rounded to a representable value.Required.", "method_name": "+", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Adds two values and stores the result in the left-hand-side variable, rounded to a representable value.Required.", "method_name": "+=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Calculates the additive inverse of a value.Required.", "method_name": "-", "params": [{"param_type": "Self", "param_name": ["operand"], "param_description": "The value to negate."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Subtracts one value from another and produces their difference, rounded to a representable value.Required.", "method_name": "-", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable, rounding to a representable value.Required.", "method_name": "-=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "FloatingPoint", "method_description": "Returns the quotient of dividing the first value by the second, rounded to a representable value.Required.", "method_name": "/", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "FloatingPoint", "method_description": "Divides the first value by the second and stores the quotient in the left-hand-side variable, rounding to a representable value.Required.", "method_name": "/=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "FloatingPoint", "method_description": "Returns a Boolean value indicating whether two values are equal.", "method_name": "==", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}], "class_inherit_list": ["Hashable", "SignedNumeric", "Strideable"], "Vars": [{"var_type": "Self.Exponent", "var_description": "The exponent of the floating-point value.Required.", "var_name": "exponent"}, {"var_type": "FloatingPointClassification", "var_description": "The classification of this value.Required. Default implementation provided.", "var_name": "floatingPointClass"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance\u2019s representation is in the canonical form.Required.", "var_name": "isCanonical"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this instance is finite.Required.", "var_name": "isFinite"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance is infinite.Required.", "var_name": "isInfinite"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance is NaN (\u201cnot a number\u201d).Required.", "var_name": "isNaN"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this instance is normal.Required.", "var_name": "isNormal"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance is a signaling NaN.Required.", "var_name": "isSignalingNaN"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance is subnormal.Required.", "var_name": "isSubnormal"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the instance is equal to zero.Required.", "var_name": "isZero"}, {"var_type": "Self", "var_description": "The greatest representable value that compares less than this value.Required. Default implementation provided.", "var_name": "nextDown"}, {"var_type": "Self", "var_description": "The least representable value that compares greater than this value.Required.", "var_name": "nextUp"}, {"var_type": "FloatingPointSign", "var_description": "The sign of the floating-point value.Required.", "var_name": "sign"}, {"var_type": "Self", "var_description": "The significand of the floating-point value.Required.", "var_name": "significand"}, {"var_type": "Self", "var_description": "The unit in the last place of this value.Required.", "var_name": "ulp"}, {"var_type": "Self", "var_description": "The greatest finite number representable by this type.Required.", "var_name": "greatestFiniteMagnitude"}, {"var_type": "Self", "var_description": "Positive infinity.Required.", "var_name": "infinity"}, {"var_type": "Self", "var_description": "The least positive number.Required.", "var_name": "leastNonzeroMagnitude"}, {"var_type": "Self", "var_description": "The least positive normal number.Required.", "var_name": "leastNormalMagnitude"}, {"var_type": "Self", "var_description": "A quiet NaN (\u201cnot a number\u201d).Required.", "var_name": "nan"}, {"var_type": "Self", "var_description": "The mathematical constant pi.Required.", "var_name": "pi"}, {"var_type": "Int", "var_description": "The radix, or base of exponentiation, for a floating-point type.Required. Default implementation provided.", "var_name": "radix"}, {"var_type": "Self", "var_description": "A signaling NaN (\u201cnot a number\u201d).Required.", "var_name": "signalingNaN"}, {"var_type": "Self", "var_description": "The unit in the last place of 1.0.Required. Default implementation provided.", "var_name": "ulpOfOne"}], "subclass_list": ["BinaryFloatingPoint"], "class_name": "FloatingPoint"}
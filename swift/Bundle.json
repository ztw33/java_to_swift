{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["[Any]"], "return_name": [""], "return_description": ["An array containing the top-level objects in the nib file. The array does not contain references to the File\u2019s Owner or any proxy objects; it contains only those objects that were instantiated when the nib file was unarchived. You should retain either the returned array or the objects it contains manually to prevent the nib file objects from being released prematurely. "]}, "method_name": "loadNibNamed", "class_name": "Bundle", "method_description": "Unarchives the contents of a nib file located in the receiver's bundle.", "params": [{"param_type": "String", "param_name": ["name"], "param_description": ""}, {"param_type": "Any", "param_name": ["owner"], "param_description": ""}, {"param_type": "Any]", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the nib file was loaded successfully; otherwise, false."]}, "method_name": "loadNibNamed", "class_name": "Bundle", "method_description": "Loads a nib from the bundle with the specified file name and owner.", "params": [{"param_type": "NSNib.Name", "param_name": ["nibName"], "param_description": ""}, {"param_type": "Any", "param_name": ["owner"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSArray>", "param_name": ["topLevelObjects"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The file URL for the resource file or nil if the file could not be located. This method also returns nil if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."]}, "method_name": "url", "class_name": "Bundle", "method_description": "Returns the file URL for the resource file identified by the specified name and extension and residing in a given bundle directory. ", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["withExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The file URL for the resource file or nil if the file could not be located."]}, "method_name": "url", "class_name": "Bundle", "method_description": "Returns the file URL for the resource identified by the specified name and file extension.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["withExtension", "ext"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array of file URLs for the resource files or nil if no files could be located at subpath with extension. Returns an empty array if no matching resource files are found."]}, "method_name": "urls", "class_name": "Bundle", "method_description": "Returns an array of file URLs for all resources identified by the specified file extension and located in the specified bundle subdirectory.", "params": [{"param_type": "String", "param_name": ["forResourcesWithExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The file URL for the resource file or nil if the file could not be located."]}, "method_name": "url", "class_name": "Bundle", "method_description": "Returns the file URL for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["withExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}, {"param_type": "String", "param_name": ["localization", "localizationName"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array containing the file URLs for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "]}, "method_name": "urls", "class_name": "Bundle", "method_description": "Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.", "params": [{"param_type": "String", "param_name": ["forResourcesWithExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}, {"param_type": "String", "param_name": ["localization", "localizationName"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The file URL for the resource file or nil if the file could not be located."]}, "method_name": "url", "class_name": "Bundle", "method_description": "Creates and returns a file URL for the resource with the specified name and extension in the specified bundle.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["withExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}, {"param_type": "URL", "param_name": ["in", "bundleURL"], "param_description": ""}]}, {"return_value": {"return_type": ["[URL]"], "return_name": [""], "return_description": ["An array of file URLs for the resource files matching the criteria or an empty array if no files could be located."]}, "method_name": "urls", "class_name": "Bundle", "method_description": "Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, within the specified bundle.", "params": [{"param_type": "String", "param_name": ["forResourcesWithExtension", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["subdirectory", "subpath"], "param_description": ""}, {"param_type": "URL", "param_name": ["in", "bundleURL"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The full pathname for the resource file, or nil if the file could not be located."]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the full pathname for the resource identified by the specified name and file extension.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["ofType", "ext"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The full pathname for the resource file, or nil if the file could not be located."]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the full pathname for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["ofType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "subpath"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The full pathname for the resource file or nil if the file could not be located."]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the full pathname for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["ofType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "subpath"], "param_description": ""}, {"param_type": "String", "param_name": ["forLocalization", "localizationName"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "]}, "method_name": "paths", "class_name": "Bundle", "method_description": "Returns an array containing the pathnames for all bundle resources having the specified filename extension and residing in the resource subdirectory.", "params": [{"param_type": "String", "param_name": ["forResourcesOfType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "subpath"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array containing the full pathnames for all bundle resources matching the specified criteria. This method returns an empty array if no matching resource files are found. "]}, "method_name": "paths", "class_name": "Bundle", "method_description": "Returns an array containing the file for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.", "params": [{"param_type": "String", "param_name": ["forResourcesOfType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "subpath"], "param_description": ""}, {"param_type": "String", "param_name": ["forLocalization", "localizationName"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The full pathname for the resource file or nil if the file could not be located. This method also returns nil if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the full pathname for the resource file identified by the specified name and extension and residing in a given bundle directory. ", "params": [{"param_type": "String", "param_name": ["forResource", "name"], "param_description": ""}, {"param_type": "String", "param_name": ["ofType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "bundlePath"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array containing the full pathnames for all bundle resources with the specified extension. This method returns an empty array if no matching resource files are found. It also returns an empty array if the bundle specified by the bundlePath parameter does not exist or is not a readable directory."]}, "method_name": "paths", "class_name": "Bundle", "method_description": "Returns an array containing the pathnames for all bundle resources having the specified extension and residing in the bundle directory at the specified path.", "params": [{"param_type": "String", "param_name": ["forResourcesOfType", "ext"], "param_description": ""}, {"param_type": "String", "param_name": ["inDirectory", "bundlePath"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["An NSURL for the resource file or nil if the file was not found. "]}, "method_name": "urlForImageResource", "class_name": "Bundle", "method_description": "Returns the location of the specified image resource as an NSURL.", "params": [{"param_type": "NSImage.Name", "param_name": ["name"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The absolute pathname of the resource file or nil if the file is not found. "]}, "method_name": "pathForImageResource", "class_name": "Bundle", "method_description": "Returns the location of the specified image resource file. ", "params": [{"param_type": "NSImage.Name", "param_name": ["name"], "param_description": ""}]}, {"return_value": {"return_type": ["NSImage"], "return_name": [""], "return_description": ["The NSImage object associated with the specified name, or nil if no file is found."]}, "method_name": "image", "class_name": "Bundle", "method_description": "Returns an NSImage instance associated with the specified name, which can be backed by multiple files representing different resolution versions of the image.", "params": [{"param_type": "NSImage.Name", "param_name": ["forResource", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The absolute pathname of the resource file or nil if the file was not found. "]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the location of the specified sound resource file. ", "params": [{"param_type": "NSSound.Name", "param_name": ["forSoundResource", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A localized version of the string designated by key in table tableName. This method returns the following when key is nil or not found in table:"]}, "method_name": "localizedString", "class_name": "Bundle", "method_description": "Returns a localized version of the string designated by the specified key and residing in the specified table.", "params": [{"param_type": "String", "param_name": ["forKey", "key"], "param_description": ""}, {"param_type": "String", "param_name": ["value"], "param_description": ""}, {"param_type": "String", "param_name": ["table", "tableName"], "param_description": ""}]}, {"return_value": {"return_type": ["NSAttributedString"], "return_name": [""], "return_description": ["The help string or nil if the application does not have a Help.plist file or the file does not contain an entry for the specified key. "]}, "method_name": "contextHelp", "class_name": "Bundle", "method_description": "Returns the context-sensitive help for the specified key from the bundle's help file. ", "params": [{"param_type": "NSHelpManager.ContextHelpKey", "param_name": ["forKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["URL"], "return_name": [""], "return_description": ["The file URL of the executable executableName in the receiver\u2019s bundle."]}, "method_name": "url", "class_name": "Bundle", "method_description": "Returns the file URL of the executable with the specified name in the receiver\u2019s bundle.", "params": [{"param_type": "String", "param_name": ["forAuxiliaryExecutable", "executableName"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["The full pathname of the executable executableName in the receiver\u2019s bundle."]}, "method_name": "path", "class_name": "Bundle", "method_description": "Returns the full pathname of the executable with the specified name in the receiver\u2019s bundle.", "params": [{"param_type": "String", "param_name": ["forAuxiliaryExecutable", "executableName"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["The value associated with key in the receiver's property list (Info.plist). The localized value of a key is returned when one is available."]}, "method_name": "object", "class_name": "Bundle", "method_description": "Returns the value associated with the specified key in the receiver's information property list.", "params": [{"param_type": "String", "param_name": ["forInfoDictionaryKey", "key"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of NSString objects containing the preferred localizations. These strings are ordered in the array according to the user's language preferences and are taken from the strings in the localizationsArray parameter. "]}, "method_name": "preferredLocalizations", "class_name": "Bundle", "method_description": "Returns one or more localizations from the specified list that a bundle object would use to locate resources for the current user.", "params": [{"param_type": "[String]", "param_name": ["from", "localizationsArray"], "param_description": ""}]}, {"return_value": {"return_type": ["[String]"], "return_name": [""], "return_description": ["An array of locale identifiers, ordered according to user preference. "]}, "method_name": "preferredLocalizations", "class_name": "Bundle", "method_description": "Returns locale identifiers for which a bundle would provide localized content, given a specified list of candidates for a user's language preferences.", "params": [{"param_type": "[String]", "param_name": ["from", "localizationsArray"], "param_description": ""}, {"param_type": "[String]", "param_name": ["forPreferences", "preferencesArray"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setPreservationPriority", "class_name": "Bundle", "method_description": "A hint to the system of the relative order for purging tagged sets of resources in the bundle.", "params": [{"param_type": "Double", "param_name": ["priority"], "param_description": ""}, {"param_type": "Set<String>", "param_name": ["forTags", "tags"], "param_description": ""}]}, {"return_value": {"return_type": ["Double"], "return_name": [""], "return_description": ["The preservation priority for the specified tag. Possible values are between 0.0 and 1.0"]}, "method_name": "preservationPriority", "class_name": "Bundle", "method_description": "Returns the current preservation priority for the specified tag.", "params": [{"param_type": "String", "param_name": ["forTag", "tag"], "param_description": ""}]}, {"return_value": {"return_type": ["AnyClass"], "return_name": [""], "return_description": ["The Class object for className. Returns nil if className is not one of the classes associated with the receiver or if there is an error loading the executable code containing the class implementation. "]}, "method_name": "classNamed", "class_name": "Bundle", "method_description": "Returns the Class object for the specified name.", "params": [{"param_type": "String", "param_name": ["className"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the bundle\u2019s executable code could be loaded successfully or is already loaded; otherwise, false if the code could not be loaded."]}, "method_name": "preflight", "class_name": "Bundle", "method_description": "Returns a Boolean value indicating whether the bundle\u2019s executable code could be loaded successfully. ", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the method successfully loads the bundle\u2019s code or if the code has already been loaded, otherwise false. "]}, "method_name": "load", "class_name": "Bundle", "method_description": "Dynamically loads the bundle\u2019s executable code into a running program, if the code has not already been loaded.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the bundle\u2019s executable code was loaded successfully or was already loaded; otherwise, false if the code could not be loaded."]}, "method_name": "loadAndReturnError", "class_name": "Bundle", "method_description": "Loads the bundle\u2019s executable code and returns any errors.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the bundle was successfully unloaded or was not already loaded; otherwise, false if the bundle could not be unloaded."]}, "method_name": "unload", "class_name": "Bundle", "method_description": "Unloads the code associated with the receiver. ", "params": []}], "Vars": [{"var_type": "Bundle", "var_description": "Returns the bundle object that contains the current executable.", "var_name": "main"}, {"var_type": "[Bundle]", "var_description": "Returns an array of all of the application\u2019s bundles that represent frameworks.", "var_name": "allFrameworks"}, {"var_type": "[Bundle]", "var_description": "Returns an array of all the application\u2019s non-framework bundles.", "var_name": "allBundles"}, {"var_type": "URL", "var_description": "The file URL of the bundle\u2019s subdirectory containing resource files.", "var_name": "resourceURL"}, {"var_type": "URL", "var_description": "The file URL of the receiver's executable file.", "var_name": "executableURL"}, {"var_type": "URL", "var_description": "The file URL of the bundle\u2019s subdirectory containing private frameworks.", "var_name": "privateFrameworksURL"}, {"var_type": "URL", "var_description": "The file URL of the receiver's subdirectory containing shared frameworks.", "var_name": "sharedFrameworksURL"}, {"var_type": "URL", "var_description": "The file URL of the receiver's subdirectory containing plug-ins.", "var_name": "builtInPlugInsURL"}, {"var_type": "URL", "var_description": "The file URL of the bundle\u2019s subdirectory containing shared support files.", "var_name": "sharedSupportURL"}, {"var_type": "URL", "var_description": "The file URL for the bundle\u2019s App Store receipt.", "var_name": "appStoreReceiptURL"}, {"var_type": "String", "var_description": "The full pathname of the bundle\u2019s subdirectory containing resources.", "var_name": "resourcePath"}, {"var_type": "String", "var_description": "The full pathname of the receiver's executable file.", "var_name": "executablePath"}, {"var_type": "String", "var_description": "The full pathname of the bundle\u2019s subdirectory containing private frameworks.", "var_name": "privateFrameworksPath"}, {"var_type": "String", "var_description": "The full pathname of the bundle\u2019s subdirectory containing shared frameworks.", "var_name": "sharedFrameworksPath"}, {"var_type": "String", "var_description": "The full pathname of the receiver's subdirectory containing plug-ins.", "var_name": "builtInPlugInsPath"}, {"var_type": "String", "var_description": "The full pathname of the bundle\u2019s subdirectory containing shared support files.", "var_name": "sharedSupportPath"}, {"var_type": "URL", "var_description": "The full URL of the receiver\u2019s bundle directory.", "var_name": "bundleURL"}, {"var_type": "String", "var_description": "The full pathname of the receiver\u2019s bundle directory.", "var_name": "bundlePath"}, {"var_type": "String", "var_description": "The receiver\u2019s bundle identifier.", "var_name": "bundleIdentifier"}, {"var_type": "[String", "var_description": "A dictionary, constructed from the bundle\u2019s Info.plist file, that contains information about the receiver.", "var_name": "infoDictionary"}, {"var_type": "[String]", "var_description": "A list of all the localizations contained in the bundle.", "var_name": "localizations"}, {"var_type": "[String]", "var_description": "An ordered list of preferred localizations contained in the bundle.", "var_name": "preferredLocalizations"}, {"var_type": "String", "var_description": "The localization for the development language.", "var_name": "developmentLocalization"}, {"var_type": "[String", "var_description": "A dictionary with the keys from the bundle\u2019s localized property list.", "var_name": "localizedInfoDictionary"}, {"var_type": "AnyClass", "var_description": "The bundle\u2019s principal class.", "var_name": "principalClass"}, {"var_type": "NSNotification.Name", "var_description": "A notification that lets observers know when classes are dynamically loaded.", "var_name": "didLoadNotification"}, {"var_type": "String", "var_description": "A constant used as a key for the userInfo dictionary of a didLoadNotification notification that corresponds to an array of names of each class that was loaded.", "var_name": "NSLoadedClasses"}, {"var_type": "[NSNumber]", "var_description": "An array of numbers indicating the architecture types supported by the bundle\u2019s executable.", "var_name": "executableArchitectures"}, {"var_type": "Bool", "var_description": "The load status of a bundle.", "var_name": "isLoaded"}, {"var_type": "Int", "var_description": "The 32-bit Intel architecture.", "var_name": "NSBundleExecutableArchitectureI386"}, {"var_type": "Int", "var_description": "The 32-bit PowerPC architecture.", "var_name": "NSBundleExecutableArchitecturePPC"}, {"var_type": "Int", "var_description": "The 64-bit Intel architecture.", "var_name": "NSBundleExecutableArchitectureX8664"}, {"var_type": "Int", "var_description": "The 64-bit PowerPC architecture.", "var_name": "NSBundleExecutableArchitecturePPC64"}, {"var_type": "Int", "var_description": "Marks beginning of the range of error codes reserved for errors related to executable files.", "var_name": "NSExecutableErrorMinimum"}, {"var_type": "Int", "var_description": "Executable is of a type that is not loadable in the current process.", "var_name": "NSExecutableNotLoadableError"}, {"var_type": "Int", "var_description": "Executable does not provide an architecture compatible with the current process.", "var_name": "NSExecutableArchitectureMismatchError"}, {"var_type": "Int", "var_description": "Executable has Objective C runtime information incompatible with the current process.", "var_name": "NSExecutableRuntimeMismatchError"}, {"var_type": "Int", "var_description": "Executable cannot be loaded for some other reason, such as a problem with a library it depends on.", "var_name": "NSExecutableLoadError"}, {"var_type": "Int", "var_description": "Executable fails due to linking issues.", "var_name": "NSExecutableLinkError"}, {"var_type": "Int", "var_description": "Marks end of the range of error codes reserved for errors related to executable files.", "var_name": "NSExecutableErrorMaximum"}], "subclass_list": [], "class_description": "Apple uses bundles to represent apps, frameworks, plug-ins, and many other specific types of content. Bundles organize their contained resources into well-defined subdirectories, and bundle structures vary depending on the platform and the type of the bundle. By using a bundle object, you can access a bundle's resources without knowing the structure of the bundle. The bundle object provides a single interface for locating items, taking into account the bundle structure, user preferences, available localizations, and other relevant factors. \nAny executable can use a bundle object to locate resources, either inside an app\u2019s bundle or in a known bundle located elsewhere. You don't use a bundle object to locate files in a container directory or in other parts of the file system. \nThe general pattern for using a bundle object is as follows:\nCreate a bundle object for the intended bundle directory.\nUse the methods of the bundle object to locate or load the needed resource.\nUse other system APIs to interact with the resource.\nSome types of frequently used resources can be located and opened without a bundle. For example, when loading images, you store images in asset catalogs and load them using the init(named:) methods of UIImage or NSImage. Similarly, for string resources, you use NSLocalizedString to load individual strings instead of loading the entire .strings file yourself.\nNote\nUnlike some other Foundation classes with corresponding Core Foundation names (such as NSString and CFString), Bundle objects cannot be cast to CFBundle references. If you need functionality provided by CFBundle, you can still create a CFBundle and use the CFBundle API. See Toll-Free Bridging for more information.\nBefore you can locate a resource, you must first specify which bundle contains it. The Bundle class has many constructors, but the one you use most often is main. The main bundle represents the bundle directory that contains the currently executing code. So for an app, the main bundle object gives you access to the resources that shipped with your app.\nIf your app interacts directly with plug-ins, frameworks, or other bundled content, you can use other methods of this class to create appropriate bundle objects. You can always create bundle objects from a known URL or path, but other methods make it easier to access bundles your app is already using. For example, if you link to a framework, you can use the init(for:) method to locate the framework bundle based on a class defined in that framework.\nYou use Bundle objects to obtain the location of specific resources inside the bundle. When looking for resources, you provide the name of the resource and its type at a minimum. For resources in a specific subdirectory, you can also specify that directory. After locating the resource, the bundle routines return a path string or URL that you can use to open the file. \nLocating a single resource in a bundle\n\nBundle objects follow a specific search pattern when looking for resources on disk. Global resources\u2014that is, resources not in a language-specific .lproj directory\u2014are returned first, followed by region- and language-specific resources. This search pattern means that the bundle looks for resources in the following order:\nGlobal (nonlocalized) resources\nRegion-specific localized resources (based on the user\u2019s region preferences)\nLanguage-specific localized resources (based on the user\u2019s language preferences)\nDevelopment language resources (as specified by the CFBundleDevelopmentRegion key in the bundle\u2019s Info.plist file)\nBecause global resources take precedence over language-specific resources, you should never include both a global and localized version of a given resource in your app. When a global version of a resource exists, language-specific versions are never returned. The reason for this precedence is performance. If localized resources were searched first, the bundle object might waste time searching for a nonexistent localized resource before returning the global resource.\nImportant\nBundle objects always consider case when searching for resource files, even on file systems that support case-insensitive filenames. Always make sure that you specify filenames with case sensitivity in mind.\nWhen locating resource files, the bundle object automatically considers many standard filename modifiers when determining which file to return. Resources may be tagged for a specific device (~iphone, ~ipad) or for a specific screen resolution (@2x, @3x). Do not include these modifiers when specifying the name of the resource you want. The bundle object selects the file that is most appropriate for the underlying device. For more information, see App Icons on iPhone, iPad and Apple Watch.\nBundle structures vary depending on the target platform and the type of bundle you are building. The Bundle class hides this underlying structure in most (but not all) cases. Many of the methods you use to load resources from a bundle automatically locate the appropriate starting directory and look for resources in known places. You can also use the methods and properties of this class to get the location of known bundle directories and to retrieve resources specifically from those directories.\nFor information about the bundle structure of iOS and macOS apps, see Bundle Programming Guide. For information about the structure of framework bundles, see Framework Programming Guide. For information about the structure of macOS plug-ins, see Code Loading Programming Topics.\n", "class_name": "Bundle"}
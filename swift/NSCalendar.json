{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date matches the given components, otherwise false."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns whether a given date matches all of the given date components.", "params": [{"param_type": "Date", "param_name": ["date"], "param_description": ""}, {"param_type": "DateComponents", "param_name": ["matchesComponents", "components"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["An NSInteger value for the requested component."]}, "method_name": "component", "class_name": "NSCalendar", "method_description": "Returns the specified date component from a given date.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["unit"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["DateComponents"], "return_name": [""], "return_description": ["An NSDateComponents object containing date decomposed into the components specified by unitFlags. Returns nil if date falls outside of the defined range of the receiver or if the computation cannot be performed."]}, "method_name": "components", "class_name": "NSCalendar", "method_description": "Returns the date components representing a given date.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["unitFlags"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["DateComponents"], "return_name": [""], "return_description": ["An NSDateComponents object whose components are specified by unitFlags and calculated from the difference between the resultDate and startDate using the options specified by options. Returns nil if either date falls outside the defined range of the receiver or if the computation cannot be performed."]}, "method_name": "components", "class_name": "NSCalendar", "method_description": "Returns the difference between two supplied dates as date components.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["unitFlags"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "startingDate"], "param_description": ""}, {"param_type": "Date", "param_name": ["to", "resultDate"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options", "opts"], "param_description": ""}]}, {"return_value": {"return_type": ["DateComponents"], "return_name": [""], "return_description": ["An NSDateComponents object whose components are specified by unitFlags and calculated from the difference between the startingDateComp and resultDateComp using the options specified by options. Returns nil if either date falls outside the defined range of the receiver or if the computation cannot be performed."]}, "method_name": "components", "class_name": "NSCalendar", "method_description": "Returns the difference between start and end dates given as date components.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["unitFlags"], "param_description": ""}, {"param_type": "DateComponents", "param_name": ["from", "startingDateComp"], "param_description": ""}, {"param_type": "DateComponents", "param_name": ["to", "resultDateComp"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["DateComponents"], "return_name": [""], "return_description": ["An NSDateComponents object containing all the components from the given date, calculated using the given time zone."]}, "method_name": "components", "class_name": "NSCalendar", "method_description": "Returns all the date components of a date, as if in a given time zone (instead of the receiving calendar\u2019s time zone).", "params": [{"param_type": "TimeZone", "param_name": ["in", "timezone"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getEra", "class_name": "NSCalendar", "method_description": "Returns by reference the era, year, week of year, and weekday component values for a given date.", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_name": ["eraValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["year", "yearValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["month", "monthValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["day", "dayValuePointer"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getEra", "class_name": "NSCalendar", "method_description": "Returns by reference the era, year, week of year, and weekday component values for a given date.", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_name": ["eraValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["yearForWeekOfYear", "yearValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["weekOfYear", "weekValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["weekday", "weekdayValuePointer"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "getHour", "class_name": "NSCalendar", "method_description": "Returns by reference the hour, minute, second, and nanosecond component values for a given date.", "params": [{"param_type": "UnsafeMutablePointer<Int>", "param_name": ["hourValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["minute", "minuteValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["second", "secondValuePointer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["nanosecond", "nanosecondValuePointer"], "param_description": ""}, {"param_type": "Date", "param_name": ["from", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The maximum range limits of the values that the unit specified by unit can take on in the receiver."]}, "method_name": "maximumRange", "class_name": "NSCalendar", "method_description": "Returns the maximum range limits of the values that a given unit can take on.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["of", "unit"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The minimum range limits of the values that the unit specified by unit can take on in the receiver."]}, "method_name": "minimumRange", "class_name": "NSCalendar", "method_description": "Returns the minimum range limits of the values that a given unit can take on.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["of", "unit"], "param_description": ""}]}, {"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["The ordinal number of smaller within larger at the time specified by date. Returns NSNotFound if larger is not logically bigger than smaller in the calendar, or the given combination of units does not make sense (or is a computation which is undefined)."]}, "method_name": "ordinality", "class_name": "NSCalendar", "method_description": "Returns, for a given absolute time, the ordinal number of a smaller calendar unit (such as a day) within a specified larger calendar unit (such as a week).", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["of", "smaller"], "param_description": ""}, {"param_type": "NSCalendar.Unit", "param_name": ["in", "larger"], "param_description": ""}, {"param_type": "Date", "param_name": ["for", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["NSRange"], "return_name": [""], "return_description": ["The range of absolute time values smaller can take on in larger at the time specified by date. Returns {NSNotFound, NSNotFound} if larger is not logically bigger than smaller in the calendar, or the given combination of units does not make sense (or is a computation which is undefined)."]}, "method_name": "range", "class_name": "NSCalendar", "method_description": "Returns the range of absolute time values that a smaller calendar unit (such as a day) can take on in a larger calendar unit (such as a month) that includes a specified absolute time.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["of", "smaller"], "param_description": ""}, {"param_type": "NSCalendar.Unit", "param_name": ["in", "larger"], "param_description": ""}, {"param_type": "Date", "param_name": ["for", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the starting time and duration of a unit could be calculated, otherwise false."]}, "method_name": "range", "class_name": "NSCalendar", "method_description": "Returns by reference the starting time and duration of a given calendar unit that contains a given date.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["of", "unit"], "param_description": ""}, {"param_type": "AutoreleasingUnsafeMutablePointer<NSDate>", "param_name": ["start", "datep"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<TimeInterval>", "param_name": ["interval", "tip"], "param_description": ""}, {"param_type": "Date", "param_name": ["for", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date falls within a weekend period, otherwise false."]}, "method_name": "range", "class_name": "NSCalendar", "method_description": "Returns whether a given date falls within a weekend period, and if so, returns by reference the start date and time interval of the weekend range.", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<NSDate>", "param_name": ["ofWeekendStart", "datep"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<TimeInterval>", "param_name": ["interval", "tip"], "param_description": ""}, {"param_type": "Date", "param_name": ["containing", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["An NSDate instance representing the first moment date of the given date."]}, "method_name": "startOfDay", "class_name": "NSCalendar", "method_description": "Returns the first moment of a given date as a date instance.", "params": [{"param_type": "Date", "param_name": ["for", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "enumerateDates", "class_name": "NSCalendar", "method_description": "Computes the dates that match (or most closely match) a given set of components, and calls the block once for each of them, until the enumeration is stopped.", "params": [{"param_type": "Date", "param_name": ["startingAfter", "start"], "param_description": ""}, {"param_type": "DateComponents", "param_name": ["matching", "comps"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options", "opts"], "param_description": ""}, {"param_type": "(Date", "param_name": ["using", "block"], "param_description": ""}, {"param_type": "Bool", "param_name": ["Bool"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<ObjCBool>", "param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object."]}, "method_name": "nextDate", "class_name": "NSCalendar", "method_description": "Returns the next date after a given date matching the given components.", "params": [{"param_type": "Date", "param_name": ["after", "date"], "param_description": ""}, {"param_type": "DateComponents", "param_name": ["matching", "comps"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object."]}, "method_name": "nextDate", "class_name": "NSCalendar", "method_description": "Returns the next date after a given date that matches the given hour, minute, and second, component values.", "params": [{"param_type": "Date", "param_name": ["after", "date"], "param_description": ""}, {"param_type": "Int", "param_name": ["matchingHour", "hourValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["minute", "minuteValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["second", "secondValue"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object."]}, "method_name": "nextDate", "class_name": "NSCalendar", "method_description": "Returns the next date after a given date matching the given calendar unit value.", "params": [{"param_type": "Date", "param_name": ["after", "date"], "param_description": ""}, {"param_type": "NSCalendar.Unit", "param_name": ["matching", "unit"], "param_description": ""}, {"param_type": "Int", "param_name": ["value"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object representing the absolute time calculated from comps. Returns nil if the receiver cannot convert the components given in comps into an NSDate object."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a date representing the absolute time calculated from given components.", "params": [{"param_type": "DateComponents", "param_name": ["from", "comps"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object representing the absolute time calculated by adding to date the calendrical components specified by comps using the options specified by opts. Returns nil if date falls outside the defined range of the receiver or if the computation cannot be performed."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a date representing the absolute time calculated by adding given components to a given date.", "params": [{"param_type": "DateComponents", "param_name": ["byAdding", "comps"], "param_description": ""}, {"param_type": "Date", "param_name": ["to", "date"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options", "opts"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate object representing the absolute time calculated by adding to date the value of the given calendrical unit using the options specified by options. Returns nil if date falls outside the defined range of the receiver or if the computation cannot be performed."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a date representing the absolute time calculated by adding the value of a given component to a given date.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["byAdding", "unit"], "param_description": ""}, {"param_type": "Int", "param_name": ["value"], "param_description": ""}, {"param_type": "Date", "param_name": ["to", "date"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate instance representing the date calculated by setting the given hour, minute, and second, to a given time. If no such time exists for the specified components, the next available date is returned, which may be on a different calendar day."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Creates a new date calculated with the given time.", "params": [{"param_type": "Int", "param_name": ["bySettingHour", "h"], "param_description": ""}, {"param_type": "Int", "param_name": ["minute", "m"], "param_description": ""}, {"param_type": "Int", "param_name": ["second", "s"], "param_description": ""}, {"param_type": "Date", "param_name": ["of", "date"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options", "opts"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate instance representing the date calculated by setting a specific component of a given date to a given value. If the unit already has that value, this may result in a date which is the same as the given date. If no such time exists for the specified components, the next available date is returned, which may be on a different calendar day."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a new date representing the date calculated by setting a specific component of a given date to a given value, while trying to keep lower components the same.", "params": [{"param_type": "NSCalendar.Unit", "param_name": ["bySettingUnit", "unit"], "param_description": ""}, {"param_type": "Int", "param_name": ["value", "v"], "param_description": ""}, {"param_type": "Date", "param_name": ["of", "date"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options", "opts"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate instance created with the given components, or nil if the components do not correspond to a valid date."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a date created with the given components.", "params": [{"param_type": "Int", "param_name": ["era", "eraValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["year", "yearValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["month", "monthValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["day", "dayValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["hour", "hourValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["minute", "minuteValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["second", "secondValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["nanosecond", "nanosecondValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["A new NSDate instance created with the given components based on a week-of-year calculation, or nil if the components do not correspond to a valid date."]}, "method_name": "date", "class_name": "NSCalendar", "method_description": "Returns a new date created with the given components base on a week-of-year value.", "params": [{"param_type": "Int", "param_name": ["era", "eraValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["yearForWeekOfYear", "yearValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["weekOfYear", "weekValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["weekday", "weekdayValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["hour", "hourValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["minute", "minuteValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["second", "secondValue"], "param_description": ""}, {"param_type": "Int", "param_name": ["nanosecond", "nanosecondValue"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["false if the calendar and locale do not have the concept of a weekend, otherwise true."]}, "method_name": "nextWeekendStart", "class_name": "NSCalendar", "method_description": "Returns by reference the starting date and time interval range of the next weekend period after a given date.", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<NSDate>", "param_name": ["datep"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<TimeInterval>", "param_name": ["interval", "tip"], "param_description": ""}, {"param_type": "NSCalendar.Options", "param_name": ["options"], "param_description": ""}, {"param_type": "Date", "param_name": ["after", "date"], "param_description": ""}]}, {"return_value": {"return_type": ["ComparisonResult"], "return_name": [""], "return_description": ["NSOrderedSame if the dates are the same down to the given granularity, otherwise NSOrderedAscending or NSOrderedDescending."]}, "method_name": "compare", "class_name": "NSCalendar", "method_description": "Indicates the ordering of two given dates based on their components down to a given unit granularity.", "params": [{"param_type": "Date", "param_name": ["date1"], "param_description": ""}, {"param_type": "Date", "param_name": ["to", "date2"], "param_description": ""}, {"param_type": "NSCalendar.Unit", "param_name": ["toUnitGranularity", "unit"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if both dates have equal date component for all units greater than or equal to the given unit, otherwise false."]}, "method_name": "isDate", "class_name": "NSCalendar", "method_description": "Indicates whether two dates are equal to a given unit of granularity.", "params": [{"param_type": "Date", "param_name": ["date1"], "param_description": ""}, {"param_type": "Date", "param_name": ["equalTo", "date2"], "param_description": ""}, {"param_type": "NSCalendar.Unit", "param_name": ["toUnitGranularity", "unit"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if both dates are within the same day, otherwise false."]}, "method_name": "isDate", "class_name": "NSCalendar", "method_description": "Indicates whether two dates are in the same day.", "params": [{"param_type": "Date", "param_name": ["date1"], "param_description": ""}, {"param_type": "Date", "param_name": ["inSameDayAs", "date2"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date is in \u201ctoday,\u201d otherwise false."]}, "method_name": "isDateInToday", "class_name": "NSCalendar", "method_description": "Indicates whether the given date is in \u201ctoday.\u201d", "params": [{"param_type": "Date", "param_name": ["date"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date is in \u201ctomorrow,\u201d otherwise false."]}, "method_name": "isDateInTomorrow", "class_name": "NSCalendar", "method_description": "Indicates whether the given date is in \u201ctomorrow.\u201d", "params": [{"param_type": "Date", "param_name": ["date"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date is within a weekend period, otherwise false."]}, "method_name": "isDateInWeekend", "class_name": "NSCalendar", "method_description": "Indicates whether a given date falls within a weekend period, as defined by the calendar and the calendar's locale.", "params": [{"param_type": "Date", "param_name": ["date"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the given date is in \u201cyesterday,\u201d otherwise false."]}, "method_name": "isDateInYesterday", "class_name": "NSCalendar", "method_description": "Indicates whether the given date is in \u201cyesterday.\u201d", "params": [{"param_type": "Date", "param_name": ["date"], "param_description": ""}]}], "Vars": [{"var_type": "Calendar", "var_description": "The user\u2019s current calendar.", "var_name": "current"}, {"var_type": "Calendar", "var_description": "A calendar that tracks changes to user\u2019s preferred calendar.", "var_name": "autoupdatingCurrent"}, {"var_type": "NSCalendar.Identifier", "var_description": "An identifier for the calendar.", "var_name": "calendarIdentifier"}, {"var_type": "Int", "var_description": "The index of the first weekday of the receiver.", "var_name": "firstWeekday"}, {"var_type": "Locale", "var_description": "The locale of the receiver.", "var_name": "locale"}, {"var_type": "TimeZone", "var_description": "The time zone for the calendar.", "var_name": "timeZone"}, {"var_type": "Int", "var_description": "The minimum number of days in the first week of the receiver.", "var_name": "minimumDaysInFirstWeek"}, {"var_type": "Int", "var_description": "Specifies that the components specified for an NSDateComponents object should be incremented and wrap around to zero/one on overflow, but should not cause higher units to be incremented.DeprecatedUse wrapComponents instead.", "var_name": "NSWrapCalendarComponents"}, {"var_type": "String", "var_description": "The symbol used to represent \u201cAM\u201d for this calendar.", "var_name": "amSymbol"}, {"var_type": "String", "var_description": "The symbol used to represent \u201cPM\u201d for this calendar.", "var_name": "pmSymbol"}, {"var_type": "[String]", "var_description": "A list of weekdays in this calendar.", "var_name": "weekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of shorter-named weekdays in this calendar.", "var_name": "shortWeekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of very-shortly-named weekdays in this calendar.", "var_name": "veryShortWeekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of standalone weekday symbols for this calendar.", "var_name": "standaloneWeekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of short standalone weekday symbols for this calendar.", "var_name": "shortStandaloneWeekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of very short standalone weekday symbols for this calendar.", "var_name": "veryShortStandaloneWeekdaySymbols"}, {"var_type": "[String]", "var_description": "A list of month symbols for this calendar.", "var_name": "monthSymbols"}, {"var_type": "[String]", "var_description": "A list of short month symbols for this calendar.", "var_name": "shortMonthSymbols"}, {"var_type": "[String]", "var_description": "A list of very short month symbols for this calendar.", "var_name": "veryShortMonthSymbols"}, {"var_type": "[String]", "var_description": "A list of standalone month symbols for this calendar.", "var_name": "standaloneMonthSymbols"}, {"var_type": "[String]", "var_description": "A list of short standalone month symbols for this calendar.", "var_name": "shortStandaloneMonthSymbols"}, {"var_type": "[String]", "var_description": "A list of very short month symbols for this calendar.", "var_name": "veryShortStandaloneMonthSymbols"}, {"var_type": "[String]", "var_description": "A list of quarter symbols for this calendar.", "var_name": "quarterSymbols"}, {"var_type": "[String]", "var_description": "A list of short quarter symbols for this calendar.", "var_name": "shortQuarterSymbols"}, {"var_type": "[String]", "var_description": "A list of standalone quarter symbols for this calendar.", "var_name": "standaloneQuarterSymbols"}, {"var_type": "[String]", "var_description": "A list of short standalone quarter symbols for this calendar.", "var_name": "shortStandaloneQuarterSymbols"}, {"var_type": "[String]", "var_description": "A list of era symbols for this calendar.", "var_name": "eraSymbols"}, {"var_type": "[String]", "var_description": "A list of long era symbols for this calendar.", "var_name": "longEraSymbols"}, {"var_type": "NSNotification.Name", "var_description": "A notification that is posted whenever the calendar day of the system changes, as determined by the system calendar, locale, and time zone.", "var_name": "NSCalendarDayChanged"}], "subclass_list": [], "class_description": "NSCalendar objects encapsulate information about systems of reckoning time in which the beginning, length, and divisions of a year are defined. They provide information about the calendar and support for calendrical computations such as determining the range of a given calendrical unit and adding units to a given absolute time.\nNSCalendar is toll-free bridged with its Core Foundation counterpart, CFCalendar. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the Calendar structure, which bridges to the NSCalendar class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\nMost locales use the most widely used civil calendar, called the Gregorian calendar (gregorian), but there remain exceptions to this trend. For example:\nIn Saudi Arabia, some locales use primarily the Islamic Umm al-Qura calendar (islamicUmmAlQura).\nIn Ethiopia, some locales use primarily the Ethiopian calendar (ethiopicAmeteMihret or ethiopicAmeteAlem).\nIn Iran and Afghanistan, some locales use primarily the Persian calendar (persian).\nIn Thailand, some locales use primarily the Buddhist calendar (buddhist).\nOther locales use another calendar alongside the Gregorian calendar. For example:\nIndia also uses the Indian national calendar (indian).\nIsrael also uses the Hebrew calendar (hebrew).\nChina and other regions also use the Chinese calendar (chinese), primarily to calculate astronomical date and Chinese traditional holidays.\nJapan also uses the Japanese calendar (japanese), primarily to add year names.\nIndependent of any particular locale, certain calendars are used primarily to calculate dates for religious observances. Among these are the Buddhist (buddhist), Coptic (coptic), Hebrew (hebrew), and Islamic (islamic) calendars.\nThe Gregorian calendar was first introduced in 1582, as a replacement for the Julian Calendar. According to the Julian calendar, a leap day is added to February for any year with a number divisible by 4, which results in an annual disparity of 11 minutes, or 1 day every 128 years. The Gregorian calendar revised the rules for leap day calculation, by skipping the leap day for any year with a number divisible by 100, unless that year number is also divisible by 400, resulting in an annual disparity of only 26 seconds, or 1 day every 3323 years.\nTo transition from the Julian calendar to the Gregorian calendar, 10 days were dropped from the Gregorian calendar (October 5\u201314).\nAfter the Gregorian calendar was introduced, many countries continued to use the Julian calendar, with Turkey being the last country to adopt the Gregorian calendar, in 1926. As a result of the staggered adoption, the transition period for countries at the time of adoption have different start dates and a different number of skipped days to account for the additional disparity from leap day calculations.\nNSCalendar models the behavior of a proleptic Gregorian calendar (as defined by ISO 8601:2004), which extends the Gregorian calendar backward in time from the date of its introduction. This behavior should be taken into account when working with dates created before the transition period of the affected locales.\nTo do calendar arithmetic, you use NSDate objects in conjunction with a calendar. For example, to convert between a decomposed date in one calendar and another calendar, you must first convert the decomposed elements into a date using the first calendar, then decompose it using the second. NSDate provides the absolute scale and epoch (reference point) for dates and times, which can then be rendered into a particular calendar, for calendrical computations or user display.\nTwo NSCalendar methods that return a date object, date(from:), date(byAdding:to:options:), take as a parameter an NSDateComponents object that describes the calendrical components required for the computation. You can provide as many components as you need (or choose to). When there is incomplete information to compute an absolute time, default values similar to 0 and 1 are usually chosen by a calendar, but this is a calendar-specific choice. If you provide inconsistent information, calendar-specific disambiguation is performed (which may involve ignoring one or more of the parameters). Related methods (components(_:from:) and components(_:from:to:options:)) take a bit mask parameter that specifies which components to calculate when returning an NSDateComponents object. The bit mask is composed of NSCalendar.Unit constants (see Constants).\nIn a calendar, day, week, weekday, month, and year numbers are generally 1-based, but there may be calendar-specific exceptions. Ordinal numbers, where they occur, are 1-based. Some calendars represented by this API may have to map their basic unit concepts into year/month/week/day/\u2026 nomenclature. For example, a calendar composed of 4 quarters in a year instead of 12 months uses the month unit to represent quarters. The particular values of the unit are defined by each calendar, and are not necessarily consistent with values for that unit in another calendar.\n", "class_name": "NSCalendar"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["CachedURLResponse"], "return_name": [""], "return_description": ["The cached URL response for request, or nil if no response has been cached."]}, "method_name": "cachedResponse", "class_name": "URLCache", "method_description": "Returns the cached URL response in the cache for the specified URL request.", "params": [{"param_type": "URLRequest", "param_name": ["for", "request"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "storeCachedResponse", "class_name": "URLCache", "method_description": "Stores a cached URL response for a specified request.", "params": [{"param_type": "CachedURLResponse", "param_name": ["cachedResponse"], "param_description": ""}, {"param_type": "URLRequest", "param_name": ["for", "request"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "getCachedResponse", "class_name": "URLCache", "method_description": "Gets the cached URL response for a data task, passing it to the provided completion handler.", "params": [{"param_type": "URLSessionDataTask", "param_name": ["for", "dataTask"], "param_description": ""}, {"param_type": "@escaping (CachedURLResponse", "param_name": ["completionHandler"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "storeCachedResponse", "class_name": "URLCache", "method_description": "Stores a cached URL response for a specified data task.", "params": [{"param_type": "CachedURLResponse", "param_name": ["cachedResponse"], "param_description": ""}, {"param_type": "URLSessionDataTask", "param_name": ["for", "dataTask"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeCachedResponse", "class_name": "URLCache", "method_description": "Removes the cached URL response for a specified URL request.", "params": [{"param_type": "URLRequest", "param_name": ["for", "request"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeCachedResponse", "class_name": "URLCache", "method_description": "Removes the cached URL response for a specified data task.", "params": [{"param_type": "URLSessionDataTask", "param_name": ["for", "dataTask"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeCachedResponses", "class_name": "URLCache", "method_description": "Clears the given cache of any cached responses since the provided date.", "params": [{"param_type": "Date", "param_name": ["since", "date"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeAllCachedResponses", "class_name": "URLCache", "method_description": "Clears the receiver\u2019s cache, removing all stored cached URL responses.", "params": []}], "Vars": [{"var_type": "URLCache", "var_description": "The shared URL cache instance.", "var_name": "shared"}, {"var_type": "Int", "var_description": "The current size of the on-disk cache, in bytes.", "var_name": "currentDiskUsage"}, {"var_type": "Int", "var_description": "The capacity of the on-disk cache, in bytes.", "var_name": "diskCapacity"}, {"var_type": "Int", "var_description": "The current size of the in-memory cache, in bytes.", "var_name": "currentMemoryUsage"}, {"var_type": "Int", "var_description": "The capacity of the in-memory cache, in bytes.", "var_name": "memoryCapacity"}], "subclass_list": [], "class_description": "The URLCache class implements the caching of responses to URL load requests by mapping NSURLRequest objects to CachedURLResponse objects. It provides a composite in-memory and on-disk cache, and lets you manipulate the sizes of both the in-memory and on-disk portions. You can also control the path where cache data is stored persistently.\nNote\nIn iOS, the on-disk cache may be purged when the system runs low on disk space, but only when your app is not running.\nIn iOS 8 and later, and macOS 10.10 and later, URLCache is thread safe.\nAlthough URLCache instance methods can safely be called from multiple execution contexts at the same time, be aware that methods like  cachedResponse(for:) and storeCachedResponse(_:for:) have an unavoidable race condition when attempting to read or write responses for the same request.\nSubclasses of URLCache must implement overridden methods in such a thread safe manner.\nThe URLCache class is meant to be used as-is, but you can subclass it if you have specific needs. For example, you might want to screen which responses are cached, or reimplement the storage mechanism for security or other reasons.\nWhen overriding methods of this class, be aware that methods that take a task parameter are preferred by the system to those that do not. Therefore, you should override the task-based methods when subclassing, as follows:\nStoring responses in the cache \u2014 Override the task-based storeCachedResponse(_:for:), instead of or in addition to the request-based storeCachedResponse(_:for:).\nGetting responses from the cache \u2014 Override getCachedResponse(for:completionHandler:), instead of or in addition to cachedResponse(for:).\nRemoving cached responses \u2014 Override the task-based removeCachedResponse(for:), instead of or in addition to the request-based removeCachedResponse(for:).\n", "class_name": "URLCache"}
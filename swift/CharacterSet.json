{"package_name": "foundation", "interface_list": ["CustomDebugStringConvertible", "CustomStringConvertible", "Equatable", "Hashable", "ReferenceConvertible", "SetAlgebra"], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "invert", "class_name": "CharacterSet", "method_description": "Invert the contents of the CharacterSet.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formIntersection", "class_name": "CharacterSet", "method_description": "Sets the value to an intersection of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formSymmetricDifference", "class_name": "CharacterSet", "method_description": "Sets the value to an exclusive or of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "formUnion", "class_name": "CharacterSet", "method_description": "Sets the value to a union of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "hasMember", "class_name": "CharacterSet", "method_description": "Returns true if the CharacterSet has a member in the specified plane.", "params": [{"param_type": "UInt8", "param_name": ["inPlane", "plane"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "CharacterSet", "method_description": "Insert the values from the specified string into the CharacterSet.", "params": [{"param_type": "String", "param_name": ["charactersIn", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CharacterSet"], "return_name": [""], "return_description": []}, "method_name": "intersection", "class_name": "CharacterSet", "method_description": "Returns an intersection of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "invert", "class_name": "CharacterSet", "method_description": "Invert the contents of the CharacterSet.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set has no elements in common with other; otherwise, false."]}, "method_name": "isDisjoint", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether the set has no members in common with the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["with", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a strict subset of other; otherwise, false."]}, "method_name": "isStrictSubset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether this set is a strict subset of the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a strict superset of other; otherwise, false."]}, "method_name": "isStrictSuperset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether this set is a strict superset of the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a subset of other; otherwise, false."]}, "method_name": "isSubset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether the set is a subset of another set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isSuperset", "class_name": "CharacterSet", "method_description": "Returns true if self is a superset of other.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "remove", "class_name": "CharacterSet", "method_description": "Remove the values from the specified string from the CharacterSet.", "params": [{"param_type": "String", "param_name": ["charactersIn", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CharacterSet"], "return_name": [""], "return_description": []}, "method_name": "subtracting", "class_name": "CharacterSet", "method_description": "Returns a CharacterSet created by removing elements in other from self.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["CharacterSet"], "return_name": [""], "return_description": []}, "method_name": "symmetricDifference", "class_name": "CharacterSet", "method_description": "Returns an exclusive or of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["CharacterSet"], "return_name": [""], "return_description": []}, "method_name": "union", "class_name": "CharacterSet", "method_description": "Returns a union of the CharacterSet with another CharacterSet.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "CharacterSet", "method_description": "Insert the values from the specified string into the CharacterSet.", "params": [{"param_type": "String", "param_name": ["charactersIn", "string"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "remove", "class_name": "CharacterSet", "method_description": "Remove the values from the specified string from the CharacterSet.", "params": [{"param_type": "String", "param_name": ["charactersIn", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["CharacterSet"], "return_name": [""], "return_description": []}, "method_name": "subtracting", "class_name": "CharacterSet", "method_description": "Returns a CharacterSet created by removing elements in other from self.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "hasMember", "class_name": "CharacterSet", "method_description": "Returns true if the CharacterSet has a member in the specified plane.", "params": [{"param_type": "UInt8", "param_name": ["inPlane", "plane"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set has no elements in common with other; otherwise, false."]}, "method_name": "isDisjoint", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether the set has no members in common with the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["with", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a strict subset of other; otherwise, false."]}, "method_name": "isStrictSubset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether this set is a strict subset of the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a strict superset of other; otherwise, false."]}, "method_name": "isStrictSuperset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether this set is a strict superset of the given set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the set is a subset of other; otherwise, false."]}, "method_name": "isSubset", "class_name": "CharacterSet", "method_description": "Returns a Boolean value that indicates whether the set is a subset of another set.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "isSuperset", "class_name": "CharacterSet", "method_description": "Returns true if self is a superset of other.", "params": [{"param_type": "CharacterSet", "param_name": ["of", "other"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "!=", "class_name": "CharacterSet", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "params": [{"param_type": "CharacterSet", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CharacterSet", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "==", "class_name": "CharacterSet", "method_description": "Returns true if the two CharacterSets are equal.", "params": [{"param_type": "CharacterSet", "param_name": ["lhs"], "param_description": ""}, {"param_type": "CharacterSet", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": []}, "method_name": "contains", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Unicode.Scalar", "param_name": ["member"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "encode", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Encoder", "param_name": ["to", "encoder"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool", "Unicode.Scalar"], "return_name": [["inserted"], ["memberAfterInsert"]], "return_description": []}, "method_name": "insert", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Unicode.Scalar", "param_name": ["character"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "ClosedRange<Unicode.Scalar>", "param_name": ["charactersIn", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insert", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Range<Unicode.Scalar>", "param_name": ["charactersIn", "range"], "param_description": ""}]}, {"return_value": {"return_type": ["Unicode.Scalar"], "return_name": [""], "return_description": []}, "method_name": "remove", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Unicode.Scalar", "param_name": ["character"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "remove", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "ClosedRange<Unicode.Scalar>", "param_name": ["charactersIn", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "remove", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Range<Unicode.Scalar>", "param_name": ["charactersIn", "range"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "subtract", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "subtract", "class_name": "CharacterSet", "method_description": "Removes the elements of the given set from this set.", "params": [{"param_type": "CharacterSet", "param_name": ["other"], "param_description": ""}]}, {"return_value": {"return_type": ["Unicode.Scalar"], "return_name": [""], "return_description": []}, "method_name": "update", "class_name": "CharacterSet", "method_description": "", "params": [{"param_type": "Unicode.Scalar", "param_name": ["with", "character"], "param_description": ""}]}], "Vars": [{"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Categories L*, M*, and N*.", "var_name": "alphanumerics"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category Lt.", "var_name": "capitalizedLetters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category Cc and Cf.", "var_name": "controlCharacters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in the category of Decimal Numbers.", "var_name": "decimalDigits"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing individual Unicode characters that can also be represented as composed character sequences (such as for letters with accents), by the definition of \u201cstandard decomposition\u201d in version 3.2 of the Unicode character encoding standard.", "var_name": "decomposables"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.", "var_name": "illegalCharacters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category L* & M*.", "var_name": "letters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category Ll.", "var_name": "lowercaseLetters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the newline characters (U+000A ~ U+000D, U+0085, U+2028, and U+2029).", "var_name": "newlines"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category M*.", "var_name": "nonBaseCharacters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category P*.", "var_name": "punctuationCharacters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category S*.", "var_name": "symbols"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category Lu and Lt.", "var_name": "uppercaseLetters"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing the characters in Unicode General Category Zs and CHARACTER TABULATION (U+0009).", "var_name": "whitespaces"}, {"var_type": "CharacterSet", "var_description": "Returns a character set containing characters in Unicode General Category Z*, U+000A ~ U+000D, and U+0085.", "var_name": "whitespacesAndNewlines"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a fragment URL component.", "var_name": "urlFragmentAllowed"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a host URL subcomponent.", "var_name": "urlHostAllowed"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a password URL subcomponent.", "var_name": "urlPasswordAllowed"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a path URL component.", "var_name": "urlPathAllowed"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a query URL component.", "var_name": "urlQueryAllowed"}, {"var_type": "CharacterSet", "var_description": "Returns the character set for characters allowed in a user URL subcomponent.", "var_name": "urlUserAllowed"}, {"var_type": "Data", "var_description": "Returns a representation of the CharacterSet in binary format.", "var_name": "bitmapRepresentation"}, {"var_type": "CharacterSet", "var_description": "Returns an inverted copy of the receiver.", "var_name": "inverted"}, {"var_type": "Bool", "var_description": "A Boolean value that indicates whether the set has no elements.", "var_name": "isEmpty"}, {"var_type": "String", "var_description": "A textual description of the character set.", "var_name": "description"}, {"var_type": "String", "var_description": "A textual description of the character set suitable for debugging.", "var_name": "debugDescription"}, {"var_type": "Int", "var_description": "The computed hash value for the date interval.", "var_name": "hashValue"}], "subclass_list": [], "class_description": "A CharacterSet represents a set of Unicode-compliant characters. Foundation types use CharacterSet to group characters together for searching operations, so that they can find any of a particular set of characters during a search.\nThis type provides \u201ccopy-on-write\u201d behavior, and is also bridged to the Objective-C NSCharacterSet class.\n", "class_name": "CharacterSet"}
{"subclass_list": [], "Methods": [{"params": [{"param_name": ["value"], "param_description": "", "param_type": "Int"}], "method_name": "contains", "method_description": "Indicates whether the index set contains a specific index.", "return_value": {"return_description": ["true when the index set contains index, false otherwise."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["indexSet"], "param_description": "", "param_type": "IndexSet"}], "method_name": "contains", "method_description": "Indicates whether the receiving index set contains a superset of the indexes in another index set.", "return_value": {"return_description": ["true when the receiving index set contains a superset of the indexes in indexSet, false otherwise."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}], "method_name": "contains", "method_description": "Indicates whether the index set contains the indexes represented by an index range.", "return_value": {"return_description": ["true when the index set contains the indexes in indexRange, false otherwise."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}], "method_name": "intersects", "method_description": "Indicates whether the index set contains any of the indexes in a range.", "return_value": {"return_description": ["true when the index set contains one or more of the indexes in indexRange, false otherwise."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}], "method_name": "countOfIndexes", "method_description": "Returns the number of indexes in the index set that are members of a given range.", "return_value": {"return_description": ["Number of indexes in the index set that are members of indexRange."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index of the first object that passes the predicate Block test.", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects that pass the Block test.", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index of the first object that passes the predicate Block test using the specified enumeration options.", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects that pass the Block test using the specified enumeration options.", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "index", "method_description": "Returns the index of the first object in the specified range that passes the predicate Block test.", "return_value": {"return_description": ["The index of the first object that passes the predicate test."], "return_name": [""], "return_type": ["Bool -> Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["passingTest", "predicate"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "indexes", "method_description": "Returns an NSIndexSet containing the receiving index set\u2019s objects in the specified range that pass the Block test.", "return_value": {"return_description": ["An NSIndexSet containing the indexes of the receiving index set that passed the predicate Block test."], "return_name": [""], "return_type": ["Bool -> IndexSet"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(NSRange"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateRanges", "method_description": "Enumerates over the ranges in the range of objects using the block ", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["block"], "param_description": "", "param_type": "(NSRange"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateRanges", "method_description": "Executes a given block using each object in the index set, in the specified ranges.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(NSRange"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerateRanges", "method_description": "Executes a given block using each object in the index set, in the specified ranges.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["to", "indexSet"], "param_description": "", "param_type": "IndexSet"}], "method_name": "isEqual", "method_description": "Indicates whether the indexes in the receiving index set are the same indexes contained in another index set.", "return_value": {"return_description": ["true when the indexes in the receiving index set are the same indexes indexSet contains, false otherwise."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["value"], "param_description": "", "param_type": "Int"}], "method_name": "indexLessThanIndex", "method_description": "Returns either the closest index in the index set that is less than a specific index or the not-found indicator.", "return_value": {"return_description": ["Closest index in the index set less than index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["to", "value"], "param_description": "", "param_type": "Int"}], "method_name": "indexLessThanOrEqual", "method_description": "Returns either the closest index in the index set that is less than or equal to a specific index or the not-found indicator.", "return_value": {"return_description": ["Closest index in the index set less than or equal to index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["to", "value"], "param_description": "", "param_type": "Int"}], "method_name": "indexGreaterThanOrEqual", "method_description": "Returns either the closest index in the index set that is greater than or equal to a specific index or the not-found indicator.", "return_value": {"return_description": ["Closest index in the index set greater than or equal to index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["value"], "param_description": "", "param_type": "Int"}], "method_name": "indexGreaterThanIndex", "method_description": "Returns either the closest index in the index set that is greater than a specific index or the not-found indicator.", "return_value": {"return_description": ["Closest index in the index set greater than index; NSNotFound when the index set contains no qualifying index."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["indexBuffer"], "param_description": "", "param_type": "UnsafeMutablePointer<Int>"}, {"param_name": ["maxCount", "bufferSize"], "param_description": "", "param_type": "Int"}, {"param_name": ["inIndexRange", "range"], "param_description": "", "param_type": "NSRangePointer"}], "method_name": "getIndexes", "method_description": "The index set fills an index buffer with the indexes contained both in the index set and in an index range, returning the number of indexes copied.", "return_value": {"return_description": ["Number of indexes placed in indexBuffer."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["block"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerate", "method_description": "Executes a given Block using each object in the index set.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerate", "method_description": "Executes a given Block over the index set\u2019s indexes, using the specified enumeration options.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["in", "range"], "param_description": "", "param_type": "NSRange"}, {"param_name": ["options", "opts"], "param_description": "", "param_type": "NSEnumerationOptions"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(Int"}, {"param_name": ["UnsafeMutablePointer<ObjCBool>"], "param_description": "", "param_type": "UnsafeMutablePointer<ObjCBool>"}], "method_name": "enumerate", "method_description": "Executes a given Block using the indexes in the specified range, using the specified enumeration options. ", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "NSIndexSet"}, {"params": [], "method_name": "makeIterator", "method_description": "Returns an iterator over the elements of this sequence.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSIndexSetIterator"]}, "class_name": "NSIndexSet"}, {"params": [{"param_name": ["at", "rangeIndex"], "param_description": "", "param_type": "Int"}], "method_name": "range", "method_description": "", "return_value": {"return_description": [], "return_name": [""], "return_type": ["NSRange"]}, "class_name": "NSIndexSet"}, {"params": [], "method_name": "rangeCount", "method_description": "", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexSet"}], "Vars": [{"var_name": "count", "var_description": "The number of indexes in the index set.", "var_type": "Int"}, {"var_name": "firstIndex", "var_description": "The first index in the index set.", "var_type": "Int"}, {"var_name": "lastIndex", "var_description": "The last index in the index set.", "var_type": "Int"}], "class_name": "NSIndexSet", "class_inherit_list": ["NSObject"], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding", "Sequence"], "class_description": "The NSIndexSet class represents an immutable collection of unique unsigned integers, known as indexes because of the way they are used. This collection is referred to as an index set. Indexes must be in the range 0 .. NSNotFound - 1.\nYou use index sets in your code to store indexes into some other data structure. For example, given an NSArray object, you could use an index set to identify a subset of objects in that array.\nYou should not use index sets to store an arbitrary collection of integer values because index sets store indexes as sorted ranges. This makes them more efficient than storing a collection of individual integers. It also means that each index value can only appear once in the index set.\nThe designated initializers of the NSIndexSet class are: init, init(indexesIn:), and init(indexSet:).\nYou must not subclass the NSIndexSet class.\nThe mutable subclass of NSIndexSet is NSMutableIndexSet.\nImportant\nThe Swift overlay to the Foundation framework provides the IndexSet structure, which bridges to the NSIndexSet class and its mutable subclass, NSMutableIndexSet. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "package_name": "foundation"}
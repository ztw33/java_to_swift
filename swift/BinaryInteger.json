{"class_description": "The BinaryInteger protocol is the basis for all the integer types provided by the standard library. All of the standard library\u2019s integer types, such as Int and UInt32, conform to BinaryInteger.\nYou can create new instances of a type that conforms to the BinaryInteger protocol from a floating-point number or another binary integer of any type. The BinaryInteger protocol provides initializers for four different kinds of conversion.\nYou use the default init(_:) initializer to create a new instance when you\u2019re sure that the value passed is representable in the new type. For example, an instance of Int16 can represent the value 500, so the first conversion in the code sample below succeeds. That same value is too large to represent as an Int8 instance, so the second conversion fails, triggering a runtime error.\nWhen you create a binary integer from a floating-point value using the default initializer, the value is rounded toward zero before the range is checked. In the following example, the value 127.75 is rounded to 127, which is representable by the Int8 type.  128.25 is rounded to 128, which is not representable as an Int8 instance, triggering a runtime error.\nUse the init?(exactly:) initializer to create a new instance after checking whether the passed value is representable. Instead of trapping on out-of-range values, using the failable exact initializer results in nil.\nWhen converting floating-point values, the init?(exact:) initializer checks both that the passed value has no fractional part and that the value is representable in the resulting type.\nUse the init(clamping:) initializer to create a new instance of a binary integer type where out-of-range values are clamped to the representable range of the type. For a type T, the resulting value is in the range T.min...T.max.\nUse the init(truncatingIfNeeded:) initializer to create a new instance with the same bit pattern as the passed value, extending or truncating the value\u2019s representation as necessary. Note that the value may not be preserved, particularly when converting between signed to unsigned integer types or when the destination type has a smaller bit width than the source type. The following example shows how extending and truncating work for nonnegative integers:\nAny padding is performed by sign-extending the passed value. When nonnegative integers are extended, the result is padded with zeroes. When negative integers are extended, the result is padded with ones. This example shows several extending conversions of a negative value\u2014note that negative values are sign-extended even when converting to an unsigned type.\nYou can use relational operators, such as the less-than and equal-to operators (< and ==), to compare instances of different binary integer types. The following example compares instances of the Int, UInt, and UInt8 types:\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": ["quotient", "remainder"], "return_description": ["A tuple containing the quotient and remainder of this value divided by rhs. The remainder has the same sign as rhs."], "return_type": ["Self", "Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the quotient and remainder of this value divided by the given value.Required. Default implementation provided.", "method_name": "quotientAndRemainder", "params": [{"param_type": "Self", "param_name": ["dividingBy", "rhs"], "param_description": "The value to divide this value by."}]}, {"return_value": {"return_name": [""], "return_description": ["The sign of this number, expressed as an integer of the same type."], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns -1 if this value is negative and 1 if it\u2019s positive; otherwise, 0.Required. Default implementation provided.", "method_name": "signum", "params": []}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the two given values are not equal.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "", "method_name": "!=", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": ""}, {"param_type": "Self", "param_name": ["rhs"], "param_description": ""}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the remainder of dividing the first value by the second.Required.", "method_name": "%", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by. rhs must not be zero."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Divides the first value by the second and stores the remainder in the left-hand-side variable.Required.", "method_name": "%=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by. rhs must not be zero."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the result of performing a bitwise AND operation on the two given values.Required. Default implementation provided.", "method_name": "&", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Stores the result of performing a bitwise AND operation on the two given values in the left-hand-side variable.Required.", "method_name": "&=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Multiplies two values and produces their product.Required.", "method_name": "*", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Multiplies two values and stores the result in the left-hand-side variable.Required.", "method_name": "*=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to multiply."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to multiply."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Adds two values and produces their sum.Required.", "method_name": "+", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Adds two values and stores the result in the left-hand-side variable.Required.", "method_name": "+=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The first value to add."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The second value to add."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Subtracts one value from another and produces their difference.Required.", "method_name": "-", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Subtracts the second value from the first and stores the difference in the left-hand-side variable.Required.", "method_name": "-=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "A numeric value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to subtract from lhs."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the quotient of dividing the first value by the second.Required.", "method_name": "/", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by. rhs must not be zero."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Divides the first value by the second and stores the quotient in the left-hand-side variable.Required.", "method_name": "/=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The value to divide."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "The value to divide lhs by. rhs must not be zero."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the left.Required. Default implementations provided.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The value to shift."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "The number of bits to shift lhs to the left."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the left in the left-hand-side variable.Required. Default implementation provided.", "method_name": "", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The value to shift."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "The number of bits to shift lhs to the left."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is less than or equal to that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the two given values are equal.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than that of the second argument.", "method_name": ">", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": ">=", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "A value to compare."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another value to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "BinaryInteger", "method_description": "Returns a Boolean value indicating whether the value of the first argument is greater than or equal to that of the second argument.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer to compare."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "Another integer to compare."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the result of shifting a value\u2019s binary representation the specified number of digits to the right.Required. Default implementations provided.", "method_name": "", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "The value to shift."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "The number of bits to shift lhs to the right."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Stores the result of shifting a value\u2019s binary representation the specified number of digits to the right in the left-hand-side variable.Required. Default implementation provided.", "method_name": "", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "The value to shift."}, {"param_type": "BinaryInteger", "param_name": ["rhs"], "param_description": "The number of bits to shift lhs to the right."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the result of performing a bitwise XOR operation on the two given values.Required. Default implementation provided.", "method_name": "^", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Stores the result of performing a bitwise XOR operation on the two given values in the left-hand-side variable.Required.", "method_name": "^=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the result of performing a bitwise OR operation on the two given values.Required. Default implementation provided.", "method_name": "|", "params": [{"param_type": "Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "BinaryInteger", "method_description": "Stores the result of performing a bitwise OR operation on the two given values in the left-hand-side variable.Required.", "method_name": "|=", "params": [{"param_type": "inout Self", "param_name": ["lhs"], "param_description": "An integer value."}, {"param_type": "Self", "param_name": ["rhs"], "param_description": "Another integer value."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Self"]}, "class_name": "BinaryInteger", "method_description": "Returns the inverse of the bits set in the argument.Required. Default implementation provided.", "method_name": "~", "params": [{"param_type": "Self", "param_name": ["x"], "param_description": ""}]}], "class_inherit_list": ["CustomStringConvertible", "Hashable", "Numeric", "Strideable"], "Vars": [{"var_type": "Int", "var_description": "The number of bits in the current binary representation of this value.Required.", "var_name": "bitWidth"}, {"var_type": "Int", "var_description": "The number of trailing zeros in this value\u2019s binary representation.Required.", "var_name": "trailingZeroBitCount"}, {"var_type": "Self.Words", "var_description": "A collection containing the words of this value\u2019s binary representation, in order from the least significant to most significant.Required.", "var_name": "words"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether this type is a signed integer type.Required. Default implementations provided.", "var_name": "isSigned"}], "subclass_list": ["FixedWidthInteger", "SignedInteger", "UnsignedInteger"], "class_name": "BinaryInteger"}
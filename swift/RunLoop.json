{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Date"], "return_name": [""], "return_description": ["The date at which the next timer is scheduled to fire, or nil if there are no input sources for this mode."]}, "method_name": "limitDate", "class_name": "RunLoop", "method_description": "Performs one pass through the run loop in the specified mode and returns the date at which the next timer is scheduled to fire.", "params": [{"param_type": "RunLoop.Mode", "param_name": ["forMode", "mode"], "param_description": ""}]}, {"return_value": {"return_type": ["CFRunLoop"], "return_name": [""], "return_description": ["The receiver's underlying CFRunLoop object."]}, "method_name": "getCFRunLoop", "class_name": "RunLoop", "method_description": "Returns the receiver's underlying CFRunLoop object.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "add", "class_name": "RunLoop", "method_description": "Registers a given timer with a given input mode.", "params": [{"param_type": "Timer", "param_name": ["timer"], "param_description": ""}, {"param_type": "RunLoop.Mode", "param_name": ["forMode", "mode"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "add", "class_name": "RunLoop", "method_description": "Adds a port as an input source to the specified mode of the run loop.", "params": [{"param_type": "Port", "param_name": ["aPort"], "param_description": ""}, {"param_type": "RunLoop.Mode", "param_name": ["forMode", "mode"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "remove", "class_name": "RunLoop", "method_description": "Removes a port from the specified input mode of the run loop.", "params": [{"param_type": "Port", "param_name": ["aPort"], "param_description": ""}, {"param_type": "RunLoop.Mode", "param_name": ["forMode", "mode"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "run", "class_name": "RunLoop", "method_description": "Puts the receiver into a permanent loop, during which time it processes data from all attached input sources.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the run loop ran and processed an input source or if the specified timeout value was reached; otherwise, false if the run loop could not be started."]}, "method_name": "run", "class_name": "RunLoop", "method_description": "Runs the loop once, blocking for input in the specified mode until a given date.", "params": [{"param_type": "RunLoop.Mode", "param_name": ["mode"], "param_description": ""}, {"param_type": "Date", "param_name": ["before", "limitDate"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "run", "class_name": "RunLoop", "method_description": "Runs the loop until the specified date, during which time it processes data from all attached input sources.", "params": [{"param_type": "Date", "param_name": ["until", "limitDate"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "acceptInput", "class_name": "RunLoop", "method_description": "Runs the loop once or until the specified date, accepting input only for the specified mode.", "params": [{"param_type": "RunLoop.Mode", "param_name": ["forMode", "mode"], "param_description": ""}, {"param_type": "Date", "param_name": ["before", "limitDate"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "perform", "class_name": "RunLoop", "method_description": "Schedules the sending of a message on the receiver.", "params": [{"param_type": "Selector", "param_name": ["aSelector"], "param_description": ""}, {"param_type": "Any", "param_name": ["target"], "param_description": ""}, {"param_type": "Any", "param_name": ["argument", "arg"], "param_description": ""}, {"param_type": "Int", "param_name": ["order"], "param_description": ""}, {"param_type": "[RunLoop.Mode]", "param_name": ["modes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "cancelPerform", "class_name": "RunLoop", "method_description": "Cancels the sending of a previously scheduled message.", "params": [{"param_type": "Selector", "param_name": ["aSelector"], "param_description": ""}, {"param_type": "Any", "param_name": ["target"], "param_description": ""}, {"param_type": "Any", "param_name": ["argument", "arg"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "cancelPerformSelectors", "class_name": "RunLoop", "method_description": "Cancels all outstanding ordered performs scheduled with a given target.", "params": [{"param_type": "Any", "param_name": ["withTarget", "target"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "perform", "class_name": "RunLoop", "method_description": "", "params": [{"param_type": "@escaping (", "param_name": ["block"], "param_description": ""}]}, {"return_value": {"return_type": ["Void"], "return_name": [""], "return_description": []}, "method_name": "perform", "class_name": "RunLoop", "method_description": "", "params": [{"param_type": "[RunLoop.Mode]", "param_name": ["inModes", "modes"], "param_description": ""}, {"param_type": "@escaping (", "param_name": ["block"], "param_description": ""}]}], "Vars": [{"var_type": "RunLoop", "var_description": "Returns the run loop for the current thread.", "var_name": "current"}, {"var_type": "RunLoop.Mode", "var_description": "The receiver's current input mode.", "var_name": "currentMode"}, {"var_type": "RunLoop", "var_description": "Returns the run loop of the main thread.", "var_name": "main"}, {"var_type": "RunLoop.Mode", "var_description": "The mode to deal with input sources other than NSConnection objects.", "var_name": "`default`"}, {"var_type": "RunLoop.Mode", "var_description": "Objects added to a run loop using this value as the mode are monitored by all run loop modes that have been declared as a member of the set of \u201ccommon\" modes; see the description of CFRunLoopAddCommonMode(_:_:) for details.", "var_name": "common"}], "subclass_list": [], "class_description": "A RunLoop object processes input for sources such as mouse and keyboard events from the window system, Port objects, and NSConnection objects. A RunLoop object also processes Timer events.\nYour application neither creates or explicitly manages RunLoop objects. Each Thread object\u2014including the application\u2019s main thread\u2014has an RunLoop object automatically created for it as needed. If you need to access the current thread\u2019s run loop, you do so with the class method current.\nNote that from the perspective of RunLoop, Timer objects are not \"input\"\u2014they are a special type, and one of the things that means is that they do not cause the run loop to return when they fire.\nWarning\nThe RunLoop class is generally not considered to be thread-safe and its methods should only be called within the context of the current thread. You should never try to call the methods of an RunLoop object running in a different thread, as doing so might cause unexpected results. \n", "class_name": "RunLoop"}
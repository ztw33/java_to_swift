{"subclass_list": [], "Methods": [{"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}, {"param_name": ["matchesComponents", "components"], "param_description": "", "param_type": "DateComponents"}], "method_name": "date", "method_description": "Determines if the date has all of the specified date components.", "return_value": {"return_description": ["true if the date matches all of the components, otherwise false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["component"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["from", "date"], "param_description": "", "param_type": "Date"}], "method_name": "component", "method_description": "Returns the value for one component of a date.", "return_value": {"return_description": ["The value for the component."], "return_name": [""], "return_type": ["Int"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["components"], "param_description": "", "param_type": "Set<Calendar.Component>"}, {"param_name": ["from", "date"], "param_description": "", "param_type": "Date"}], "method_name": "dateComponents", "method_description": "Returns all the date components of a date, using the calendar time zone.", "return_value": {"return_description": ["The date components of the specified date."], "return_name": [""], "return_type": ["DateComponents"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["components"], "param_description": "", "param_type": "Set<Calendar.Component>"}, {"param_name": ["from", "start"], "param_description": "", "param_type": "Date"}, {"param_name": ["to", "end"], "param_description": "", "param_type": "Date"}], "method_name": "dateComponents", "method_description": "Returns the difference between two dates.", "return_value": {"return_description": ["The result of calculating the difference from start to end."], "return_name": [""], "return_type": ["DateComponents"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["components"], "param_description": "", "param_type": "Set<Calendar.Component>"}, {"param_name": ["from", "start"], "param_description": "", "param_type": "DateComponents"}, {"param_name": ["to", "end"], "param_description": "", "param_type": "DateComponents"}], "method_name": "dateComponents", "method_description": "Returns the difference between two dates specified as DateComponents.", "return_value": {"return_description": ["The result of calculating the difference from start to end."], "return_name": [""], "return_type": ["DateComponents"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["in", "timeZone"], "param_description": "", "param_type": "TimeZone"}, {"param_name": ["from", "date"], "param_description": "", "param_type": "Date"}], "method_name": "dateComponents", "method_description": "Returns all the date components of a date, as if in a given time zone (instead of the Calendar time zone).", "return_value": {"return_description": ["All components, calculated using the Calendar and TimeZone."], "return_name": [""], "return_type": ["DateComponents"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "component"], "param_description": "", "param_type": "Calendar.Component"}], "method_name": "maximumRange", "method_description": "The maximum range limits of the values that a given component can take on.", "return_value": {"return_description": ["The range, or nil if it could not be calculated."], "return_name": [""], "return_type": ["Range<Int>"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "component"], "param_description": "", "param_type": "Calendar.Component"}], "method_name": "minimumRange", "method_description": "Returns the minimum range limits of the values that a given component can take on.", "return_value": {"return_description": ["The range, or nil if it could not be calculated."], "return_name": [""], "return_type": ["Range<Int>"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "smaller"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["in", "larger"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["for", "date"], "param_description": "", "param_type": "Date"}], "method_name": "ordinality", "method_description": "Returns, for a given absolute time, the ordinal number of a smaller calendar component (such as a day) within a specified larger calendar component (such as a week).", "return_value": {"return_description": ["The ordinal number of smaller within larger at the time specified by date. Returns nil if larger is not logically bigger than smaller in the calendar, or the given combination of components does not make sense (or is a computation which is undefined)."], "return_name": [""], "return_type": ["Int"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "smaller"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["in", "larger"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["for", "date"], "param_description": "", "param_type": "Date"}], "method_name": "range", "method_description": "Returns the range of absolute time values that a smaller calendar component (such as a day) can take on in a larger calendar component (such as a month) that includes a specified absolute time.", "return_value": {"return_description": ["The range of absolute time values smaller can take on in larger at the time specified by date. Returns nil if larger is not logically bigger than smaller in the calendar, or the given combination of components does not make sense (or is a computation which is undefined)."], "return_name": [""], "return_type": ["Range<Int>"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["for", "date"], "param_description": "", "param_type": "Date"}], "method_name": "startOfDay", "method_description": "Returns the first moment of a given Date, as a Date.", "return_value": {"return_description": ["The first moment of the given date."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["startingAfter", "start"], "param_description": "", "param_type": "Date"}, {"param_name": ["matching", "components"], "param_description": "", "param_type": "DateComponents"}, {"param_name": ["matchingPolicy"], "param_description": "", "param_type": "Calendar.MatchingPolicy"}, {"param_name": ["repeatedTimePolicy"], "param_description": "", "param_type": "Calendar.RepeatedTimePolicy"}, {"param_name": ["direction"], "param_description": "", "param_type": "Calendar.SearchDirection"}, {"param_name": ["using", "block"], "param_description": "", "param_type": "(Date"}, {"param_name": ["Bool"], "param_description": "", "param_type": "Bool"}, {"param_name": ["inout", "Bool"], "param_description": "", "param_type": "inout Bool"}], "method_name": "enumerateDates", "method_description": "Computes the dates which match (or most closely match) a given set of components, and calls the closure once for each of them, until the enumeration is stopped.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Void"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["after", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["matching", "components"], "param_description": "", "param_type": "DateComponents"}, {"param_name": ["matchingPolicy"], "param_description": "", "param_type": "Calendar.MatchingPolicy"}, {"param_name": ["repeatedTimePolicy"], "param_description": "", "param_type": "Calendar.RepeatedTimePolicy"}, {"param_name": ["direction"], "param_description": "", "param_type": "Calendar.SearchDirection"}], "method_name": "nextDate", "method_description": "Computes the next date which matches (or most closely matches) a given set of components.", "return_value": {"return_description": ["A Date representing the result of the search, or nil if a result could not be found."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["from", "components"], "param_description": "", "param_type": "DateComponents"}], "method_name": "date", "method_description": "Returns a date created from the specified components.", "return_value": {"return_description": ["A new Date, or nil if a date could not be found which matches the components."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["byAdding", "components"], "param_description": "", "param_type": "DateComponents"}, {"param_name": ["to", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["wrappingComponents"], "param_description": "", "param_type": "Bool"}], "method_name": "date", "method_description": "Returns a new Date representing the date calculated by adding components to a given date.", "return_value": {"return_description": ["A new date, or nil if a date could not be calculated with the given input."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["byAdding", "component"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["value"], "param_description": "", "param_type": "Int"}, {"param_name": ["to", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["wrappingComponents"], "param_description": "", "param_type": "Bool"}], "method_name": "date", "method_description": "Returns a new Date representing the date calculated by adding an amount of a specific component to a given date.", "return_value": {"return_description": ["A new date, or nil if a date could not be calculated with the given input."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["bySetting", "component"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["value"], "param_description": "", "param_type": "Int"}, {"param_name": ["of", "date"], "param_description": "", "param_type": "Date"}], "method_name": "date", "method_description": "Returns a new Date representing the date calculated by setting a specific component to a given time, and trying to keep lower components the same.  If the component already has that value, this may result in a date which is the same as the given date.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["bySettingHour", "hour"], "param_description": "", "param_type": "Int"}, {"param_name": ["minute"], "param_description": "", "param_type": "Int"}, {"param_name": ["second"], "param_description": "", "param_type": "Int"}, {"param_name": ["of", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["matchingPolicy"], "param_description": "", "param_type": "Calendar.MatchingPolicy"}, {"param_name": ["repeatedTimePolicy"], "param_description": "", "param_type": "Calendar.RepeatedTimePolicy"}, {"param_name": ["direction"], "param_description": "", "param_type": "Calendar.SearchDirection"}], "method_name": "date", "method_description": "Returns a new Date representing the date calculated by setting hour, minute, and second to a given time on a specified Date.", "return_value": {"return_description": ["A Date representing the result of the search, or nil if a result could not be found."], "return_name": [""], "return_type": ["Date"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "component"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["for", "date"], "param_description": "", "param_type": "Date"}], "method_name": "dateInterval", "method_description": "Returns the starting time and duration of a given calendar component that contains a given date.", "return_value": {"return_description": ["A new DateInterval if the starting time and duration of a component could be calculated; otherwise, nil."], "return_name": [""], "return_type": ["DateInterval"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["of", "component"], "param_description": "", "param_type": "Calendar.Component"}, {"param_name": ["start"], "param_description": "", "param_type": "inout Date"}, {"param_name": ["interval"], "param_description": "", "param_type": "inout TimeInterval"}, {"param_name": ["for", "date"], "param_description": "", "param_type": "Date"}], "method_name": "dateInterval", "method_description": "Returns, via two inout parameters, the starting time and duration of a given calendar component that contains a given date.", "return_value": {"return_description": ["true if the starting time and duration of a component could be calculated; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["containing", "date"], "param_description": "", "param_type": "Date"}], "method_name": "dateIntervalOfWeekend", "method_description": "Returns a DateInterval of the weekend contained by the given date, or nil if the date is not in a weekend.", "return_value": {"return_description": ["A DateInterval, or nil if the date is not in a weekend."], "return_name": [""], "return_type": ["DateInterval"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["containing", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["start"], "param_description": "", "param_type": "inout Date"}, {"param_name": ["interval"], "param_description": "", "param_type": "inout TimeInterval"}], "method_name": "dateIntervalOfWeekend", "method_description": "Find the range of the weekend around the given date, returned via two by-reference parameters.", "return_value": {"return_description": ["true if a date range could be found, and false if the date is not in a weekend."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["startingAfter", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["direction"], "param_description": "", "param_type": "Calendar.SearchDirection"}], "method_name": "nextWeekend", "method_description": "Returns a DateInterval of the next weekend, which starts strictly after the given date.", "return_value": {"return_description": ["A DateInterval, or nil if weekends do not exist in the specific calendar or locale."], "return_name": [""], "return_type": ["DateInterval"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["startingAfter", "date"], "param_description": "", "param_type": "Date"}, {"param_name": ["start"], "param_description": "", "param_type": "inout Date"}, {"param_name": ["interval"], "param_description": "", "param_type": "inout TimeInterval"}, {"param_name": ["direction"], "param_description": "", "param_type": "Calendar.SearchDirection"}], "method_name": "nextWeekend", "method_description": "Returns the range of the next weekend via two inout parameters. The weekend starts strictly after the given date.", "return_value": {"return_description": ["A DateInterval, or nil if the weekend could not be found."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date1"], "param_description": "", "param_type": "Date"}, {"param_name": ["to", "date2"], "param_description": "", "param_type": "Date"}, {"param_name": ["toGranularity", "component"], "param_description": "", "param_type": "Calendar.Component"}], "method_name": "compare", "method_description": "Compares two dates down to the specified component.", "return_value": {"return_description": [".orderedSame if the two dates are equal in the given component and all larger components; otherwise, either .orderedAscending or .orderedDescending."], "return_name": [""], "return_type": ["ComparisonResult"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date1"], "param_description": "", "param_type": "Date"}, {"param_name": ["equalTo", "date2"], "param_description": "", "param_type": "Date"}, {"param_name": ["toGranularity", "component"], "param_description": "", "param_type": "Calendar.Component"}], "method_name": "isDate", "method_description": "Returns a Boolean value indicating whether two dates are equal down to the specified component.", "return_value": {"return_description": ["true if the two dates are equal in the given component and all larger components; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date1"], "param_description": "", "param_type": "Date"}, {"param_name": ["inSameDayAs", "date2"], "param_description": "", "param_type": "Date"}], "method_name": "isDate", "method_description": "Returns a Boolean value indicating whether a date is within the same day as another date.", "return_value": {"return_description": ["true if date1 and date2 are in the same day, as defined by the calendar and calendar\u2019s locale; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "isDateInToday", "method_description": "Returns a Boolean value indicating whether the given date is within today.", "return_value": {"return_description": ["true if the given date is within today, as defined by the calendar and calendar\u2019s locale; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "isDateInTomorrow", "method_description": "Returns a Boolean value indicating whether the given date is within tomorrow.", "return_value": {"return_description": ["true if the given date is within tomorrow, as defined by the calendar and calendar\u2019s locale; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "isDateInYesterday", "method_description": "Returns a Boolean value indicating whether the given date is within yesterday.", "return_value": {"return_description": ["true if the given date is within yesterday, as defined by the calendar and calendar\u2019s locale; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["date"], "param_description": "", "param_type": "Date"}], "method_name": "isDateInWeekend", "method_description": "Returns a Boolean value indicating whether the given date is within a weekend period.", "return_value": {"return_description": ["true if the given date is within a weekend, as defined by the calendar and calendar\u2019s locale; otherwise, false."], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Calendar"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Calendar"}], "method_name": "==", "method_description": "Returns a Boolean indicating whether two calendars are the same.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["lhs"], "param_description": "", "param_type": "Calendar"}, {"param_name": ["rhs"], "param_description": "", "param_type": "Calendar"}], "method_name": "!=", "method_description": "Returns a Boolean value indicating whether two values are not equal.", "return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "class_name": "Calendar"}, {"params": [{"param_name": ["to", "encoder"], "param_description": "", "param_type": "Encoder"}], "method_name": "encode", "method_description": "Encodes this calendar into the given encoder.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "Calendar"}], "Vars": [{"var_name": "autoupdatingCurrent", "var_description": "A calendar that tracks changes to user\u2019s preferred calendar.", "var_type": "Calendar"}, {"var_name": "current", "var_description": "The user\u2019s current calendar.", "var_type": "Calendar"}, {"var_name": "identifier", "var_description": "The identifier of the calendar.", "var_type": "Calendar.Identifier"}, {"var_name": "locale", "var_description": "The locale of the calendar.", "var_type": "Locale"}, {"var_name": "firstWeekday", "var_description": "The first weekday of the calendar.", "var_type": "Int"}, {"var_name": "minimumDaysInFirstWeek", "var_description": "The number of minimum days in the first week.", "var_type": "Int"}, {"var_name": "timeZone", "var_description": "The time zone of the calendar.", "var_type": "TimeZone"}, {"var_name": "amSymbol", "var_description": "The symbol used to represent \u201cAM\u201d, localized to the Calendar\u2019s locale.", "var_type": "String"}, {"var_name": "pmSymbol", "var_description": "The symbol used to represent \u201cPM\u201d, localized to the Calendar\u2019s locale.", "var_type": "String"}, {"var_name": "weekdaySymbols", "var_description": "A list of weekdays in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortWeekdaySymbols", "var_description": "A list of shorter-named weekdays in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "veryShortWeekdaySymbols", "var_description": "A list of very-shortly-named weekdays in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "standaloneWeekdaySymbols", "var_description": "A list of standalone weekday names in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortStandaloneWeekdaySymbols", "var_description": "A list of shorter-named standalone weekdays in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "veryShortStandaloneWeekdaySymbols", "var_description": "A list of very-shortly-named weekdays in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "monthSymbols", "var_description": "A list of months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortMonthSymbols", "var_description": "A list of shorter-named months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "veryShortMonthSymbols", "var_description": "A list of very-shortly-named months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "standaloneMonthSymbols", "var_description": "A list of standalone months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortStandaloneMonthSymbols", "var_description": "A list of shorter-named standalone months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "veryShortStandaloneMonthSymbols", "var_description": "A list of very-shortly-named standalone months in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "quarterSymbols", "var_description": "A list of quarter names in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortQuarterSymbols", "var_description": "A list of shorter-named quarters in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "standaloneQuarterSymbols", "var_description": "A list of standalone quarter names in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "shortStandaloneQuarterSymbols", "var_description": "A list of shorter-named standalone quarters in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "eraSymbols", "var_description": "A list of eras in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "longEraSymbols", "var_description": "A list of longer-named eras in this calendar, localized to the Calendar\u2019s locale.", "var_type": "[String]"}, {"var_name": "description", "var_description": "A textual description of the calendar.", "var_type": "String"}, {"var_name": "debugDescription", "var_description": "A textual description of the locale suitable for debugging.", "var_type": "String"}, {"var_name": "customMirror", "var_description": "A mirror that reflects the calendar.", "var_type": "Mirror"}, {"var_name": "hashValue", "var_description": "The computed hash value for the calendar.", "var_type": "Int"}], "class_name": "Calendar", "class_inherit_list": [], "interface_list": ["CustomDebugStringConvertible", "CustomReflectable", "CustomStringConvertible", "Equatable", "Hashable", "ReferenceConvertible"], "class_description": "Calendar encapsulates information about systems of reckoning time in which the beginning, length, and divisions of a year are defined. It provides information about the calendar and support for calendrical computations such as determining the range of a given calendrical unit and adding units to a given absolute time.\n", "package_name": "foundation"}
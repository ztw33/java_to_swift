{"package_name": "foundation", "interface_list": ["Equatable", "Hashable", "RawRepresentable"], "class_inherit_list": [], "Methods": [], "Vars": [{"var_type": "NSNotification.Name", "var_description": "A notification posted when the audio engine configuration changes.", "var_name": "AVAudioEngineConfigurationChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an audio interruption occurs.", "var_name": "interruptionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the media server is terminated.", "var_name": "mediaServicesWereLostNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the media server restarts.", "var_name": "mediaServicesWereResetNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the system\u2019s audio route changes.", "var_name": "routeChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the primary audio from other applications starts and stops.", "var_name": "silenceSecondaryAudioHintNotification"}, {"var_type": "NSNotification.Name", "var_description": "The component tags changed.", "var_name": "AVAudioUnitComponentTagsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Notification posted when the status of the signed-in iCloud account may have changed.", "var_name": "CKAccountChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted went the set of active complications changes.", "var_name": "CLKComplicationServerActiveComplicationsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted notifications when changes occur in another CNContactStore.\n", "var_name": "CNContactStoreDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when changes are made to the Calendar database. ", "var_name": "EKEventStoreChanged"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers whenever the user changes his or her preferred units.", "var_name": "HKUserPreferencesDidChange"}, {"var_type": "String", "var_description": "The characteristic supports notifications using the event connection established by the controller. The event connection provides unidirectional communication from the accessory to the controller.", "var_name": "HMCharacteristicPropertySupportsEventNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the system detects that the amount of available disk space is getting low. The notification is posted to the default notification center.", "var_name": "NSBundleResourceRequestLowDiskSpace"}, {"var_type": "NSNotification.Name", "var_description": "A notification that is posted whenever the calendar day of the system changes, as determined by the system calendar, locale, and time zone.", "var_name": "NSCalendarDayChanged"}, {"var_type": "NSNotification.Name", "var_description": "Not implemented.", "var_name": "NSDidBecomeSingleThreaded"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the extension\u2019s host app moves from the inactive to the active state.", "var_name": "NSExtensionHostDidBecomeActive"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the extension\u2019s host app begins running in the background.", "var_name": "NSExtensionHostDidEnterBackground"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the extension\u2019s host app begins running in the foreground.", "var_name": "NSExtensionHostWillEnterForeground"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the extension\u2019s host app moves from the active to the inactive state.", "var_name": "NSExtensionHostWillResignActive"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when an NSFileHandle object establishes a socket connection between two processes, creates an NSFileHandle object for one end of the connection, and makes this object available to observers by putting it in the userInfo dictionary.", "var_name": "NSFileHandleConnectionAccepted"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when the file handle determines that data is currently available for reading in a file or at a communications channel.", "var_name": "NSFileHandleDataAvailable"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when the file handle reads all data in the file or, if a communications channel, until the other process signals the end of data.", "var_name": "NSFileHandleReadToEndOfFileCompletion"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the acceptance policy of the cookie storage has changed.", "var_name": "NSHTTPCookieManagerAcceptPolicyChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the cookies stored in the cookie storage have changed.", "var_name": "NSHTTPCookieManagerCookiesChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification that the context completed a save.", "var_name": "NSManagedObjectContextDidSave"}, {"var_type": "NSNotification.Name", "var_description": "A notification of changes made to managed objects associated with this context.", "var_name": "NSManagedObjectContextObjectsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification that the context is about to save.", "var_name": "NSManagedObjectContextWillSave"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the receiver has finished with the initial result-gathering phase of the query.", "var_name": "NSMetadataQueryDidFinishGathering"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the receiver begins with the initial result-gathering phase of the query.", "var_name": "NSMetadataQueryDidStartGathering"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the receiver\u2019s results have changed during the live-update phase of the query.", "var_name": "NSMetadataQueryDidUpdate"}, {"var_type": "NSNotification.Name", "var_description": "Posted as the receiver is collecting results during the initial result-gathering phase of the query.", "var_name": "NSMetadataQueryGatheringProgress"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever persistent stores are added to or removed from a persistent store coordinator, or when store UUIDs change.", "var_name": "NSPersistentStoreCoordinatorStoresDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted before the list of open persistent stores changes.", "var_name": "NSPersistentStoreCoordinatorStoresWillChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a persistent store is removed from a persistent store coordinator.", "var_name": "NSPersistentStoreCoordinatorWillRemoveStore"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the power state (Low Power Mode is enabled or disabled) of an iOS device changes. ", "var_name": "NSProcessInfoPowerStateDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted whenever the system clock is changed. ", "var_name": "NSSystemClockDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the time zone changes.", "var_name": "NSSystemTimeZoneDidChange"}, {"var_type": "NSNotification.Name", "var_description": "An NSThread object posts this notification when it receives the exit() message, before the thread exits. Observer methods invoked to receive this notification execute in the exiting thread, before it exits.", "var_name": "NSThreadWillExit"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the set of stored credentials changes.", "var_name": "NSURLCredentialStorageChanged"}, {"var_type": "NSNotification.Name", "var_description": "Sent after the iCloud (\u201cubiquity\u201d) identity has changed.", "var_name": "NSUbiquityIdentityDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSUndoManager object opens or closes an undo group (except when it opens a top-level group) and when checking the redo stack in canRedo. ", "var_name": "NSUndoManagerCheckpoint"}, {"var_type": "NSNotification.Name", "var_description": "Posted after an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method.", "var_name": "NSUndoManagerDidCloseUndoGroup"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSUndoManager object opens an undo group, which occurs in the implementation of the beginUndoGrouping() method. ", "var_name": "NSUndoManagerDidOpenUndoGroup"}, {"var_type": "NSNotification.Name", "var_description": "Posted just after an NSUndoManager object performs a redo operation (redo()).", "var_name": "NSUndoManagerDidRedoChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted just after an NSUndoManager object performs an undo operation.", "var_name": "NSUndoManagerDidUndoChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted before an NSUndoManager object closes an undo group, which occurs in the implementation of the endUndoGrouping() method.", "var_name": "NSUndoManagerWillCloseUndoGroup"}, {"var_type": "NSNotification.Name", "var_description": "Posted just before an NSUndoManager object performs a redo operation (redo()).", "var_name": "NSUndoManagerWillRedoChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted just before an NSUndoManager object performs an undo operation.", "var_name": "NSUndoManagerWillUndoChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the first thread is detached from the current thread. The NSThread class posts this notification at most once\u2014the first time a thread is detached using detachNewThreadSelector(_:toTarget:with:) or the start() method. Subsequent invocations of those methods do not post this notification. Observers of this notification have their notification method invoked in the main thread, not the new thread. The observer notification methods always execute before the new thread begins executing.", "var_name": "NSWillBecomeMultiThreaded"}, {"var_type": "PKPassLibraryNotificationName", "var_description": "Posted after the pass library has been changed.", "var_name": "PKPassLibraryDidChange"}, {"var_type": "PKPassLibraryNotificationName", "var_description": "Posted when an Apple Pay card is added to or removed from a device that is paired with the current iOS device (for example, Apple Watch). ", "var_name": "PKPassLibraryRemotePaymentPassesDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system has finished reading an announcement.", "var_name": "announcementDidFinishNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when an assistive technology focuses on an element. ", "var_name": "elementFocusedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the item has played successfully to its end time.", "var_name": "WKAudioFilePlayerItemDidPlayToEndTime"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the item failed to play to its end time.", "var_name": "WKAudioFilePlayerItemFailedToPlayToEndTime"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the item\u2019s current time has changed discontinuously. ", "var_name": "WKAudioFilePlayerItemTimeJumped"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the displayed property in the record list is changed.", "var_name": "ABPeoplePickerDisplayedPropertyDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the selection in the group list is changed.", "var_name": "ABPeoplePickerGroupSelectionDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the selection in the name list is changed.", "var_name": "ABPeoplePickerNameSelectionDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the selection in a multivalue property is changed.", "var_name": "ABPeoplePickerValueSelectionDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the accounts managed by this account store changed in the database. There is no userInfo dictionary associated with this notification.", "var_name": "ACAccountStoreDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetChapterMetadataGroupsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetContainsFragmentsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetDurationDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetMediaSelectionGroupsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetTrackSegmentsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetTrackTimeRangeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetTrackTrackAssociationsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVAssetWasDefragmented"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a new device becomes available.", "var_name": "AVCaptureDeviceWasConnected"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an existing device becomes unavailable.", "var_name": "AVCaptureDeviceWasDisconnected"}, {"var_type": "NSNotification.Name", "var_description": "Posted if the value of the capture input port\u2019sformatDescription property changes.", "var_name": "AVCaptureInputPortFormatDescriptionDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a capture session starts.", "var_name": "AVCaptureSessionDidStartRunning"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a capture session stops.", "var_name": "AVCaptureSessionDidStopRunning"}, {"var_type": "NSNotification.Name", "var_description": "Posted if an error occurred during a capture session.", "var_name": "AVCaptureSessionRuntimeError"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieContainsMovieFragmentsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieDurationDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieTrackSegmentsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieTrackTimeRangeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieTrackTotalSampleDataLengthDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVFragmentedMovieWasDefragmented"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when the item has played to its end time.", "var_name": "AVPlayerItemDidPlayToEndTime"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when the item failed to play to its end time.", "var_name": "AVPlayerItemFailedToPlayToEndTime"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when  posted when a new access log entry has been added.", "var_name": "AVPlayerItemNewAccessLogEntry"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when posted when a new error log entry has been added.", "var_name": "AVPlayerItemNewErrorLogEntry"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when posted when some media didn't arrive in time to continue playback.", "var_name": "AVPlayerItemPlaybackStalled"}, {"var_type": "NSNotification.Name", "var_description": "A notification that's posted when the item\u2019s current time has changed discontinuously.", "var_name": "AVPlayerItemTimeJumped"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a buffer display layer failed to decode.", "var_name": "AVSampleBufferDisplayLayerFailedToDecode"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWBSSIDDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWCountryCodeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWLinkDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWLinkQualityDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWModeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWPowerDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWSSIDDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CWScanCacheDidUpdate"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after a new controller is connected to the device.", "var_name": "GCControllerDidConnect"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after a controller is disconnected from the device.", "var_name": "GCControllerDidDisconnect"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user double-clicks a filter in the filter browser. ", "var_name": "IKFilterBrowserFilterDoubleClick"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user clicks a filter name in the filter browser. ", "var_name": "IKFilterBrowserFilterSelected"}, {"var_type": "NSNotification.Name", "var_description": "Posted before showing a filter preview, allowing an application to set the parameters of a filter.", "var_name": "IKFilterBrowserWillPreviewFilter"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "IOBluetoothHostControllerPoweredOff"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "IOBluetoothHostControllerPoweredOn"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "IOBluetoothL2CAPChannelPublished"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "IOBluetoothL2CAPChannelTerminated"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that the title or subtitle information of an annotation object changed.DeprecatedUse KVO notifications instead.", "var_name": "MKAnnotationCalloutInfoDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the filter configuration stored in the Network Extension preferences changes.", "var_name": "NEFilterConfigurationDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the VPN configuration stored in the Network Extension preferences changes.", "var_name": "NEVPNConfigurationChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the status of the VPN connection changes.", "var_name": "NEVPNStatusDidChange"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted whenever an accessibility element needs to make an announcement to the user. This notification requires a userInfo dictionary with the key announcement and a localized string containing the announcement. To help an assistive app determine the importance of the announcement, add the appropriate priority to the userInfo dictionary.", "var_name": "announcementRequested"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the app has been activated. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "applicationActivated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the app has been deactivated.  Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "applicationDeactivated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the app is hidden. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "applicationHidden"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the app is shown. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "applicationShown"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element is created. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "created"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a drawer appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "drawerCreated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element gains focus. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "focusedUIElementChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the key window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "focusedWindowChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a help tag appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "helpTagCreated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the UI changes in a way that requires the attention of an accessibility client. This notification should be accompanied by a userInfo dictionary with the key uiElements and an array containing the UI elements that have been added or changed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "layoutChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the main window changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "mainWindowChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element moves. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "moved"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element\u2019s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "resized"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a row collapses. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "rowCollapsed"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a row is added or deleted. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "rowCountChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a row expands. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "rowExpanded"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after one or more cells in a cell-based table are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedCellsChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after one or more child elements are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedChildrenChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the selected items in a layout area move. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedChildrenMoved"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after one or more columns are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedColumnsChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after one or more rows are selected or deselected. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedRowsChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after text is selected or deselected.  Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "selectedTextChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a sheet appears.  Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "sheetCreated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element\u2019s title changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "titleChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element is destroyed. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "uiElementDestroyed"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after the units in a layout area change. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "unitsChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after an accessibility element\u2019s value changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "valueChanged"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a new window appears. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "windowCreated"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a window is restored to full size from the Dock.  Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "windowDeminiaturized"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a window is put in the Dock. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "windowMiniaturized"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a window moves.  Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "windowMoved"}, {"var_type": "NSAccessibility.Notification", "var_description": "This notification is posted after a window\u2019s size changes. Post this notification using the post(element:notification:) function instead of an NSNotificationCenter instance.", "var_name": "windowResized"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the current progress of a running animation reaches one of its progress marks.", "var_name": "progressMarkNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the threshold for antialiasing changes.", "var_name": "antialiasThresholdChangedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by NSAppleEventManager before it first dispatches an Apple event. Your application can use this notification to avoid registering any Apple event handlers until the first time at which they may be needed.", "var_name": "NSAppleEventManagerWillProcessFirstEvent"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after the app becomes active.", "var_name": "didBecomeActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app\u2019s occlusion state changes.", "var_name": "didChangeOcclusionStateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the configuration of the displays attached to the computer is changed.", "var_name": "didChangeScreenParametersNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the end of the finishLaunching() method to indicate that the app has completed launching and is ready to run.", "var_name": "didFinishLaunchingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app is finished restoring windows.", "var_name": "didFinishRestoringWindowsNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the end of the hide(_:) method to indicate that the app is now hidden.", "var_name": "didHideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after the app gives up its active status to another app.", "var_name": "didResignActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the end of the unhideWithoutActivation() method to indicate that the app is now visible.", "var_name": "didUnhideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the end of the updateWindows() method to indicate that the app has finished updating its windows.", "var_name": "didUpdateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately before the app becomes active.", "var_name": "willBecomeActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the start of the finishLaunching() method to indicate that the app has completed its initialization process and is about to finish launching.", "var_name": "willFinishLaunchingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the start of the hide(_:) method to indicate that the app is about to be hidden.", "var_name": "willHideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately before the app gives up its active status to another app.", "var_name": "willResignActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the terminate(_:) method to indicate that the app will terminate.", "var_name": "willTerminateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the start of the unhideWithoutActivation() method to indicate that the app is about to become visible.", "var_name": "willUnhideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the start of the updateWindows() method to indicate that the app is about to update its windows.", "var_name": "willUpdateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies the delegate when the width of a browser column has changed.", "var_name": "columnConfigurationDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by init(for:) when a class description cannot be found for a class.", "var_name": "NSClassDescriptionNeededForClass"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the color of the NSColorPanel is set, as when NSColorPanel is invoked.", "var_name": "colorDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the pop-up list selection of the NSComboBox changes. ", "var_name": "selectionDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the pop-up list selection of the NSComboBox is changing. ", "var_name": "selectionIsChangingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the pop-up list of the NSComboBox is about to be dismissed.", "var_name": "willDismissNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the pop-up list of the NSComboBox is going to be displayed. ", "var_name": "willPopUpNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the application enters context-sensitive help mode. This typically happens when the user holds down the Help key.", "var_name": "contextHelpModeDidActivateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the application exits context-sensitive help mode. This happens when the user clicks the mouse button while the cursor is anywhere on the screen after displaying a context-sensitive help topic.", "var_name": "contextHelpModeDidDeactivateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent when a control with editable cells begins an edit session. ", "var_name": "textDidBeginEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent when the text in the receiving control changes. ", "var_name": "textDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent when a control with editable cells ends an editing session. ", "var_name": "textDidEndEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent after the user changes control tint preference.", "var_name": "currentControlTintDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the drawer is closed. ", "var_name": "didCloseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the drawer is opened. ", "var_name": "didOpenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the drawer is about to close. ", "var_name": "willCloseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the drawer is about to open.", "var_name": "willOpenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a font collection is changed.", "var_name": "didChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the currently-set font changes.", "var_name": "fontSetChangedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the NSImageRep class registry changes.", "var_name": "registryDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after a menu item is added to the menu.", "var_name": "didAddItemNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when menu tracking begins.", "var_name": "didBeginTrackingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after a menu item in the menu changes appearance.", "var_name": "didChangeItemNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when menu tracking ends, even if no action is sent.", "var_name": "didEndTrackingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after a menu item is removed from the menu.", "var_name": "didRemoveItemNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted just after the application dispatches a menu item\u2019s action method to the menu item\u2019s target.", "var_name": "didSendActionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted just before the application dispatches a menu item\u2019s action method to the menu item\u2019s target.", "var_name": "willSendActionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a column is moved by user action in an NSOutlineView object.", "var_name": "columnDidMoveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a column is resized in an NSOutlineView object.", "var_name": "columnDidResizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an item is collapsed in an NSOutlineView object.", "var_name": "itemDidCollapseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an item is expanded in an NSOutlineView object.", "var_name": "itemDidExpandNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before an item is collapsed (after the user clicks the arrow but before the item is collapsed).", "var_name": "itemWillCollapseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before an item is expanded (after the user clicks the arrow but before the item is collapsed).", "var_name": "itemWillExpandNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the outline view's selection changes.", "var_name": "selectionDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted as the outline view\u2019s selection changes (while the mouse button is still down).", "var_name": "selectionIsChangingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after records are imported from the ubiquitous content store.", "var_name": "NSPersistentStoreDidImportUbiquitousContentChanges"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted just before a pop-up menu is attached to its window frame.", "var_name": "willPopUpNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an NSPopUpButton object receives a mouse-down event\u2014that is, when the user is about to select an item from the menu.", "var_name": "willPopUpNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent after the popover has finished animating offscreen.", "var_name": "didCloseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent after the popover has finished animating onscreen.", "var_name": "didShowNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent before the popover is closed.", "var_name": "willCloseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent before the popover is shown.", "var_name": "willShowNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies the main application that the preference pane is not willing to be deselected.", "var_name": "NSPreferencePaneCancelUnselect"}, {"var_type": "NSNotification.Name", "var_description": "Notifies the main application that the preference pane is willing to be deselected.", "var_name": "NSPreferencePaneDoUnselect"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "NSPreferencePaneSwitchToPane"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "NSPreferencePaneUpdateHelpMenu"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "NSPreferencePrefPaneIsAvailable"}, {"var_type": "NSNotification.Name", "var_description": "Posted if the preferred scroller style changes.", "var_name": "preferredScrollerStyleDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted to the default notification center whenever the view's rows change.", "var_name": "rowsDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the color space of the screen has changed.", "var_name": "colorSpaceDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the end of a magnify gesture.", "var_name": "didEndLiveMagnifyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted on the main thread at the end of live scroll tracking.", "var_name": "didEndLiveScrollNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted on the main thread after changing the clipview bounds origin due to a user-initiated event.", "var_name": "didLiveScrollNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted at the beginning of a magnify gesture.", "var_name": "willStartLiveMagnifyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted on the main thread at the beginning of user-initiated live scroll tracking (gesture scroll or scroller tracking, for example, thumb dragging).", "var_name": "willStartLiveScrollNotification"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeAutomaticCapitalizationNotification"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeAutomaticDashSubstitutionNotification"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeAutomaticPeriodSubstitutionNotification"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeAutomaticQuoteSubstitutionNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when the spell checker did change text using automatic spell checking correction. The are posted to the application\u2019s default notification center.", "var_name": "didChangeAutomaticSpellingCorrectionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the spell checker changed text using automatic text replacement.  This notification is posted to the app\u2019s default notification center. ", "var_name": "didChangeAutomaticTextReplacementNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after an NSSplitView changes the sizes of some or all of its subviews. ", "var_name": "didResizeSubviewsNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before an NSSplitView changes the sizes of some or all of its subviews.", "var_name": "willResizeSubviewsNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent when the system colors have changed, such as through a system control panel interface.", "var_name": "systemColorsDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a column is moved by user action in an NSTableView object.", "var_name": "columnDidMoveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a column is resized in an NSTableView object.", "var_name": "columnDidResizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after an NSTableView object's selection changes.", "var_name": "selectionDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted as an NSTableView object's selection changes (while the mouse button is still down).", "var_name": "selectionIsChangingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user selects an alternate string.", "var_name": "selectedAlternativeStringNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an NSText object begins any operation that changes characters or formatting attributes.", "var_name": "didBeginEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after an NSText object performs any operation that changes characters or formatting attributes.", "var_name": "didChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when focus leaves an NSText object, whether or not any operation has changed characters or formatting attributes.", "var_name": "didEndEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the selected text input source changes.", "var_name": "keyboardSelectionDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after a text storage finishes processing edits in processEditing().", "var_name": "didProcessEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before a text storage finishes processing edits in processEditing().", "var_name": "willProcessEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the selected range of characters changes.", "var_name": "didChangeSelectionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when there is a change in the typing attributes within a text view.", "var_name": "didChangeTypingAttributesNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a new text view is established as the text view that sends notifications.", "var_name": "willChangeNotifyingTextViewNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after an item is removed from a toolbar.", "var_name": "didRemoveItemNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before a new item is added to the toolbar.", "var_name": "willAddItemNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the NSView\u2019s bounds rectangle changes to a new value independently of the frame rectangle, but only when the view\u2019s postsBoundsChangedNotifications property is true.  ", "var_name": "boundsDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSView object recalculates its tracking areas.", "var_name": "didUpdateTrackingAreasNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the view\u2019s frame rectangle changes to a new value, but only when the view\u2019s postsFrameChangedNotifications property is true.", "var_name": "frameDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSView object that has attached surfaces (that is, NSOpenGLContext objects) moves to a different screen, or other cases where the NSOpenGLContext object needs to be updated. ", "var_name": "globalFrameDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object becomes the key window.", "var_name": "didBecomeKeyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object becomes the main window.", "var_name": "didBecomeMainNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window backing properties change.", "var_name": "didChangeBackingPropertiesNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window\u2019s occlusion state changes.", "var_name": "didChangeOcclusionStateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a portion of an NSWindow object\u2019s frame moves onto or off of a screen.", "var_name": "didChangeScreenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the display profile for the screen containing the window changes.", "var_name": "didChangeScreenProfileNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is deminimized.", "var_name": "didDeminiaturizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the user resizes a window.", "var_name": "didEndLiveResizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object closes an attached sheet.", "var_name": "didEndSheetNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window entered full screen mode.", "var_name": "didEnterFullScreenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window will enter version browser mode.", "var_name": "didEnterVersionBrowserNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window did exit full screen mode.", "var_name": "didExitFullScreenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window did exit version browser mode.", "var_name": "didExitVersionBrowserNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a portion of a nonretained NSWindow object is exposed, whether by being ordered in front of other windows or by other windows being removed from in front of it.", "var_name": "didExposeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is minimized.", "var_name": "didMiniaturizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is moved.", "var_name": "didMoveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object resigns its status as key window.", "var_name": "didResignKeyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object resigns its status as main window.", "var_name": "didResignMainNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object\u2019s size changes.", "var_name": "didResizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object receives an update() message.", "var_name": "didUpdateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is about to open a sheet.", "var_name": "willBeginSheetNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is about to close.", "var_name": "willCloseNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window will enter full screen mode.", "var_name": "willEnterFullScreenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window will enter version browser mode.", "var_name": "willEnterVersionBrowserNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window will exit full screen mode.", "var_name": "willExitFullScreenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the window will exit version browser mode.", "var_name": "willExitVersionBrowserNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is about to be minimized.", "var_name": "willMiniaturizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever an NSWindow object is about to move.", "var_name": "willMoveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before the user resizes a window.", "var_name": "willStartLiveResizeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when any of the accessibility display options change.", "var_name": "accessibilityDisplayOptionsDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a Spaces change has occurred.", "var_name": "activeSpaceDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder is about to activate an app.", "var_name": "didActivateApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder file labels or colors change.", "var_name": "didChangeFileLabelsNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder deactivated an app.", "var_name": "didDeactivateApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder hid an app.", "var_name": "didHideApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a new app has started up.", "var_name": "didLaunchApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a new device has been mounted.", "var_name": "didMountNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a file operation has been performed in the receiving app.", "var_name": "didPerformFileOperationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a volume changes its name and/or mount path.  These typically change simultaneously, in which case only one notification is posted.", "var_name": "didRenameVolumeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an app finishes executing.", "var_name": "didTerminateApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder unhid an app.", "var_name": "didUnhideApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder did unmount a device.", "var_name": "didUnmountNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the machine wakes from sleep.", "var_name": "didWakeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the machine\u2019s screen goes to sleep.", "var_name": "screensDidSleepNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the machine\u2019s screens wake.", "var_name": "screensDidWakeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted after a user session is switched in.", "var_name": "sessionDidBecomeActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before a user session is switched out.", "var_name": "sessionDidResignActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder is about to launch an app.", "var_name": "willLaunchApplicationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user has requested a logout or that the machine be powered off.", "var_name": "willPowerOffNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted before the machine goes to sleep.", "var_name": "willSleepNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the Finder is about to unmount a device.", "var_name": "willUnmountNotification"}, {"var_type": "NSNotification.Name", "var_description": "A notification that the beginFindString(_:with:) or findString(_:with:) method begins finding.", "var_name": "PDFDocumentDidBeginFind"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a find operation begins working on a new page of a document.", "var_name": "PDFDocumentDidBeginPageFind"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a write operation begins working on a page in a document.", "var_name": "PDFDocumentDidBeginPageWrite"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a write operation begins working on a document.", "var_name": "PDFDocumentDidBeginWrite"}, {"var_type": "NSNotification.Name", "var_description": "A notification that the beginFindString(_:with:) or findString(_:with:) method returns.", "var_name": "PDFDocumentDidEndFind"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a find operation finishes working on a page in a document.", "var_name": "PDFDocumentDidEndPageFind"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a write operation finishes working on a page in a document.", "var_name": "PDFDocumentDidEndPageWrite"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a write operation finishes working on a document.", "var_name": "PDFDocumentDidEndWrite"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a string match is found in a document.", "var_name": "PDFDocumentDidFindMatch"}, {"var_type": "NSNotification.Name", "var_description": "A notification that a document unlocks after a unlock(withPassword:) message.", "var_name": "PDFDocumentDidUnlock"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "PDFThumbnailViewDocumentEdited"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the user clicks on an annotation. ", "var_name": "PDFViewAnnotationHit"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted before the user clicks an annotation.", "var_name": "PDFViewAnnotationWillHit"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the page history changes.", "var_name": "PDFViewChangedHistory"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the user attempts to copy to the pasteboard without the appropriate permissions. ", "var_name": "PDFViewCopyPermission"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the display box has changed.", "var_name": "PDFViewDisplayBoxChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the display mode has changed.", "var_name": "PDFViewDisplayModeChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when a new document is associated with the view.", "var_name": "PDFViewDocumentChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when a new page becomes the current page.", "var_name": "PDFViewPageChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the user attempts to print without the appropriate permissions. ", "var_name": "PDFViewPrintPermission"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the scale factor changes. ", "var_name": "PDFViewScaleChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the current selection has changed.", "var_name": "PDFViewSelectionChanged"}, {"var_type": "NSNotification.Name", "var_description": "A notification posted when the visible pages have changed.", "var_name": "PDFViewVisiblePagesChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user chooses a composition.", "var_name": "QCCompositionPickerPanelDidSelectComposition"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user selects a composition in the picker view.", "var_name": "QCCompositionPickerViewDidSelectComposition"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever the list of compositions in the composition repository is updated.", "var_name": "QCCompositionRepositoryDidUpdate"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the view starts rendering.", "var_name": "QCViewDidStartRendering"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the view stops rendering.", "var_name": "QCViewDidStopRendering"}, {"var_type": "NSNotification.Name", "var_description": "Posted when all history items have been removed from the web history.", "var_name": "WebHistoryAllItemsRemoved"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a WebHistoryItem object when the value of the history item\u2019s title, alternate title, URL strings, or last visited interval changes.", "var_name": "WebHistoryItemChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted when history items have been added to a web history.", "var_name": "WebHistoryItemsAdded"}, {"var_type": "NSNotification.Name", "var_description": "Posted when items have been removed from the web history.", "var_name": "WebHistoryItemsRemoved"}, {"var_type": "NSNotification.Name", "var_description": "Posted when web history items have been loaded from a URL.", "var_name": "WebHistoryLoaded"}, {"var_type": "NSNotification.Name", "var_description": "Posted when web history items have been saved to a URL.", "var_name": "WebHistorySaved"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the web preference settings are changed. ", "var_name": "WebPreferencesChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a web view begins any operation that changes its contents in response to user editing.", "var_name": "WebViewDidBeginEditing"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a web view performs any operation that changes its contents in response to user editing.", "var_name": "WebViewDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a web view changes its typing selection.", "var_name": "WebViewDidChangeSelection"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a web view changes its typing style.", "var_name": "WebViewDidChangeTypingStyle"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a web view ends any operation that changes its contents in response to user editing.", "var_name": "WebViewDidEndEditing"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a WebView object when the estimated progress value of a load changes.", "var_name": "WebViewProgressEstimateChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a WebView object when the load has finished.", "var_name": "WebViewProgressFinished"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a WebView object when a load begins, including a load that is initiated in a subframe.", "var_name": "WebViewProgressStarted"}, {"var_type": "NSNotification.Name", "var_description": "Posted when this process has changed the Address Book database.", "var_name": "abDatabaseChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a process other than the current one has changed the Address Book database.", "var_name": "abDatabaseChangedExternally"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "quartzFilterManagerDidAddFilter"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "quartzFilterManagerDidModifyFilter"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "quartzFilterManagerDidRemoveFilter"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "quartzFilterManagerDidSelectFilter"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an accessory becomes connected and available for your application to use.", "var_name": "EAAccessoryDidConnect"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an accessory is disconnected and no longer available for your application to use.", "var_name": "EAAccessoryDidDisconnect"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the duration of a movie has been determined. There is no userInfo dictionary.", "var_name": "MPMovieDurationAvailable"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the available media types in a movie are determined. There is no userInfo dictionary.", "var_name": "MPMovieMediaTypesAvailable"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the natural frame size of a movie is first determined or subsequently changes. There is no userInfo dictionary.", "var_name": "MPMovieNaturalSizeAvailable"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player has entered full-screen mode. There is no userInfo dictionary.", "var_name": "MPMoviePlayerDidEnterFullscreen"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player has exited full-screen mode. There is no userInfo dictionary.  ", "var_name": "MPMoviePlayerDidExitFullscreen"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player has started or ended playing a movie via AirPlay. There is no userInfo dictionary.", "var_name": "MPMoviePlayerIsAirPlayVideoActiveDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player\u2019s network buffering state has changed. There is no userInfo dictionary.", "var_name": "MPMoviePlayerLoadStateDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the currently playing movie has changed. There is no userInfo dictionary.", "var_name": "MPMoviePlayerNowPlayingMovieDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie has finished playing. The userInfo dictionary of this notification contains the MPMoviePlayerPlaybackDidFinishReasonUserInfoKey key, which indicates the reason that playback finished. This notification is also sent when playback fails because of an error.", "var_name": "MPMoviePlayerPlaybackDidFinish"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player\u2019s playback state has changed. There is no userInfo dictionary.", "var_name": "MPMoviePlayerPlaybackStateDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the ready for display state changes.", "var_name": "MPMoviePlayerReadyForDisplayDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the scaling mode of a movie player has changed. There is no userInfo dictionary.", "var_name": "MPMoviePlayerScalingModeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a request to capture a thumbnail from a movie has finished whether the request succeeded or failed. Upon successful capture of a thumbnail, the userInfo dictionary contains values for the following keys:", "var_name": "MPMoviePlayerThumbnailImageRequestDidFinish"}, {"var_type": "NSNotification.Name", "var_description": "Posted when new timed metadata arrives.", "var_name": "MPMoviePlayerTimedMetadataUpdated"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player is about to enter full-screen mode. The userInfo dictionary contains keys whose values describe the transition animation used to enter full-screen mode. See Fullscreen Notification Keys.", "var_name": "MPMoviePlayerWillEnterFullscreen"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a movie player is about to exit full-screen mode. The userInfo dictionary contains keys whose values describe the transition animation used to exit full-screen mode. See Fullscreen Notification Keys.", "var_name": "MPMoviePlayerWillExitFullscreen"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the source type of a movie was previously unknown and is newly available. There is no userInfo dictionary.", "var_name": "MPMovieSourceTypeAvailable"}, {"var_type": "NSNotification.Name", "var_description": "A notification name for indicating a change in the capabilities associated with the music library on the device.", "var_name": "SKCloudServiceCapabilitiesDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification name for indicating a change in the storefront identifier associated with the device.", "var_name": "SKStorefrontIdentifierDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification to post when your app\u2019s Top Shelf content has changed.", "var_name": "TVTopShelfItemsDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the enabled status of AssistiveTouch changes in system preferences. ", "var_name": "assistiveTouchStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Bold Text setting has changed. ", "var_name": "boldTextStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the setting for closed captioning has changed.", "var_name": "closedCaptioningStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Darken Colors setting has changed.", "var_name": "darkerSystemColorsStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Grayscale setting has changed.", "var_name": "grayscaleStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when a Guided Access session starts or ends.  ", "var_name": "guidedAccessStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when there is a change to the currently paired hearing devices.", "var_name": "hearingDevicePairedEarDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the setting for inverted colors has changed.  ", "var_name": "invertColorsStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when system audio changes from stereo to mono.", "var_name": "monoAudioStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Reduce Motion setting has changed.", "var_name": "reduceMotionStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Reduce Transparency system setting has changed.", "var_name": "reduceTransparencyStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system's shake to undo feature is enabled or disabled.", "var_name": "shakeToUndoDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Speak Screen setting has changed.", "var_name": "speakScreenStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Speak Selection setting has changed.", "var_name": "speakSelectionStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by UIKit when the system\u2019s Switch Control setting has changed.", "var_name": "switchControlStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app becomes active. ", "var_name": "didBecomeActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app enters the background.", "var_name": "didEnterBackgroundNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after the app finishes launching.", "var_name": "didFinishLaunchingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app receives a warning from the operating system about low memory availability.", "var_name": "didReceiveMemoryWarningNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when there is a significant change in time, for example, change to a new day (midnight), carrier time update, and change to or from daylight savings time.", "var_name": "significantTimeChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user presses the Home and Lock buttons to take a screenshot. ", "var_name": "userDidTakeScreenshotNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted shortly before an app leaves the background state on its way to becoming the active app.", "var_name": "willEnterForegroundNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app is no longer active and loses focus.", "var_name": "willResignActiveNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app is about to terminate.", "var_name": "willTerminateNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the user changes the preferred content size setting. ", "var_name": "didChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the state of the proximity sensor changes.", "var_name": "proximityStateDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when the brightness of a screen changes. ", "var_name": "brightnessDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when a new screen is connected to the device. ", "var_name": "didConnectNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when a screen is disconnected from the device. ", "var_name": "didDisconnectNotification"}, {"var_type": "NSNotification.Name", "var_description": "This notification is posted when the current mode of a screen changes. ", "var_name": "modeDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the selected row in the posting table view changes.", "var_name": "selectionDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that an editing session began in a text field. The affected text field is stored in the object parameter of the notification. The userInfo dictionary is not used.", "var_name": "textDidBeginEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that the text in a text field changed. The affected text field is stored in the object parameter of the notification. ", "var_name": "textDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that the editing session ended for a text field. The affected text field is stored in the object parameter of the notification. The userInfo dictionary is not used.", "var_name": "textDidEndEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the current input mode changes.", "var_name": "currentInputModeDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that an editing session began in a text view. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.", "var_name": "textDidBeginEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that the text in a text view changed. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.", "var_name": "textDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Notifies observers that the editing session ended for a text view. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.", "var_name": "textDidEndEditingNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a split view controller is expanded or collapsed.", "var_name": "showDetailTargetDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an UIWindow object becomes hidden.", "var_name": "didBecomeHiddenNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a UIWindow object becomes the key window.", "var_name": "didBecomeKeyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when an UIWindow object becomes visible.", "var_name": "didBecomeVisibleNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted whenever a UIWindow object resigns its status as main window.", "var_name": "didResignKeyNotification"}, {"var_type": "NSNotification.Name", "var_description": "Sent when the contents of the assets library have changed from under the app that is using the data.", "var_name": "ALAssetsLibraryChanged"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the instance of AVCaptureDevice has detected a substantial change to the video subject area.", "var_name": "AVCaptureDeviceSubjectAreaDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted if an interruption to a capture session finishes.", "var_name": "AVCaptureSessionInterruptionEnded"}, {"var_type": "NSNotification.Name", "var_description": "Posted if a capture session is interrupted.", "var_name": "AVCaptureSessionWasInterrupted"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CTRadioAccessTechnologyDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the value returned by the canSendText() class method has changed.", "var_name": "MFMessageComposeViewControllerTextMessageAvailabilityDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Indicates the media library has changed.", "var_name": "MPMediaLibraryDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Indicates that the prepared to play status of the media player has changed.", "var_name": "MPMediaPlaybackIsPreparedToPlayDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the currently playing media item has changed.", "var_name": "MPMusicPlayerControllerNowPlayingItemDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the playback state has been changed programmatically or by user action.", "var_name": "MPMusicPlayerControllerPlaybackStateDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the audio playback volume for the music player has changed.", "var_name": "MPMusicPlayerControllerVolumeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Indicates the active wireless route changed.", "var_name": "MPVolumeViewWirelessRouteActiveDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Indicates the available wireless routes changed.", "var_name": "MPVolumeViewWirelessRoutesAvailableDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted when all assets of the issue have been downloaded.", "var_name": "NKIssueDownloadCompleted"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app\u2019s status for downloading content in the background changes.", "var_name": "backgroundRefreshStatusDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the frame of the status bar changes.", "var_name": "didChangeStatusBarFrameNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the orientation of the app\u2019s user interface changes.", "var_name": "didChangeStatusBarOrientationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app is about to change the frame of the status bar.", "var_name": "willChangeStatusBarFrameNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the app is about to change the orientation of its interface.", "var_name": "willChangeStatusBarOrientationNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the battery level changes.", "var_name": "batteryLevelDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when battery state changes.", "var_name": "batteryStateDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the orientation of the device changes.", "var_name": "orientationDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the document object when there is a change in the state of the document.", "var_name": "stateChangedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after a change in the keyboard\u2019s frame.", "var_name": "keyboardDidChangeFrameNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after the dismissal of the keyboard.", "var_name": "keyboardDidHideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately after the display of the keyboard.", "var_name": "keyboardDidShowNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately prior to a change in the keyboard\u2019s frame.", "var_name": "keyboardWillChangeFrameNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately prior to the dismissal of the keyboard.", "var_name": "keyboardWillHideNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted immediately prior to the display of the keyboard.", "var_name": "keyboardWillShowNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the menu controller just after it hides the menu.", "var_name": "didHideMenuNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the menu controller just after it shows the menu.", "var_name": "didShowMenuNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the frame of a visible menu changes.", "var_name": "menuFrameDidChangeNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the menu controller just before it hides the menu.", "var_name": "willHideMenuNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by the menu controller just before it shows the menu.", "var_name": "willShowMenuNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a pasteboard object when its contents change.", "var_name": "changedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted by a pasteboard object just before an app removes it.", "var_name": "removedNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the protected files become available for your code to access.", "var_name": "protectedDataDidBecomeAvailableNotification"}, {"var_type": "NSNotification.Name", "var_description": "Posted shortly before protected files are locked down and become inaccessible.", "var_name": "protectedDataWillBecomeUnavailableNotification"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "didChangeAutomaticTextCompletionNotification"}, {"var_type": "NSNotification.Name", "var_description": "Indicates the music player's queue changed.", "var_name": "MPMusicPlayerControllerQueueDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVDisplayManagerModeSwitchEnd"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVDisplayManagerModeSwitchSettingsChanged"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVDisplayManagerModeSwitchStart"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVPlayerAvailableHDRModesDidChange"}, {"var_type": "NSNotification.Name", "var_description": "The values of multipleRoutesDetected changed.", "var_name": "AVRouteDetectorMultipleRoutesDetectedDidChange"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "AVSampleBufferAudioRendererWasFlushedAutomatically"}, {"var_type": "NSNotification.Name", "var_description": "", "var_name": "CTServiceRadioAccessTechnologyDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted after the isAuthenticated property of the shared local player object changes. The object property for this notification is a GKLocalPlayer object. Passing nil provides standard Notification Center behavior which is to receive the notification for any object.", "var_name": "GKPlayerAuthenticationDidChangeNotificationName"}, {"var_type": "NSNotification.Name", "var_description": "Posted when a player object\u2019s data changes.", "var_name": "GKPlayerDidChangeNotificationName"}, {"var_type": "NSNotification.Name", "var_description": "A notification that is posted when the DNS proxy configuration changes.", "var_name": "NEDNSProxyConfigurationDidChange"}, {"var_type": "NSNotification.Name", "var_description": "A notification name for indicating a change in the storefront country code associated with the device.", "var_name": "SKStorefrontCountryCodeDidChange"}, {"var_type": "NSNotification.Name", "var_description": "Posted by WatchKit when reduced motion is enabled or disabled. This notification does not include a parameter.", "var_name": "WKAccessibilityReduceMotionStatusDidChange"}, {"var_type": "Notification.Name", "var_description": "", "var_name": "playgroundPageExecutionModeDidChange"}], "subclass_list": [], "class_description": "In Objective-C, NSNotification names are type aliased to the NSString class. In Swift, Notification names use the nested NSNotification.Name type.\n", "class_name": "NSNotification.Name"}
{"package_name": "foundation", "Vars": [{"var_type": "CharacterSet", "var_name": "alphanumerics", "var_description": "A character set containing the characters in Unicode General Categories L*, M*, and N*."}, {"var_type": "CharacterSet", "var_name": "capitalizedLetters", "var_description": "A character set containing the characters in Unicode General Category Lt."}, {"var_type": "CharacterSet", "var_name": "controlCharacters", "var_description": "A character set containing the characters in Unicode General Category Cc and Cf."}, {"var_type": "CharacterSet", "var_name": "decimalDigits", "var_description": "A character set containing the characters in the category of Decimal Numbers."}, {"var_type": "CharacterSet", "var_name": "decomposables", "var_description": "A character set containing individual Unicode characters that can also be represented as composed character sequences (such as for letters with accents), by the definition of \u201cstandard decomposition\u201d in version 3.2 of the Unicode character encoding standard."}, {"var_type": "CharacterSet", "var_name": "illegalCharacters", "var_description": "A character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard."}, {"var_type": "CharacterSet", "var_name": "letters", "var_description": "A character set containing the characters in Unicode General Category L* & M*."}, {"var_type": "CharacterSet", "var_name": "lowercaseLetters", "var_description": "A character set containing the characters in Unicode General Category Ll."}, {"var_type": "CharacterSet", "var_name": "newlines", "var_description": "A character set containing the newline characters (U+000A ~ U+000D, U+0085, U+2028, and U+2029)."}, {"var_type": "CharacterSet", "var_name": "nonBaseCharacters", "var_description": "A character set containing the characters in Unicode General Category M*."}, {"var_type": "CharacterSet", "var_name": "punctuationCharacters", "var_description": "A character set containing the characters in Unicode General Category P*."}, {"var_type": "CharacterSet", "var_name": "symbols", "var_description": "A character set containing the characters in Unicode General Category S*."}, {"var_type": "CharacterSet", "var_name": "uppercaseLetters", "var_description": "A character set containing the characters in Unicode General Category Lu and Lt."}, {"var_type": "CharacterSet", "var_name": "whitespacesAndNewlines", "var_description": "A character set containing characters in Unicode General Category Z*, U+000A ~ U+000D, and U+0085."}, {"var_type": "CharacterSet", "var_name": "whitespaces", "var_description": "A character set containing the characters in Unicode General Category Zs and CHARACTER TABULATION (U+0009)."}, {"var_type": "CharacterSet", "var_name": "urlFragmentAllowed", "var_description": "Returns the character set for characters allowed in a fragment URL component."}, {"var_type": "CharacterSet", "var_name": "urlHostAllowed", "var_description": "Returns the character set for characters allowed in a host URL subcomponent."}, {"var_type": "CharacterSet", "var_name": "urlPasswordAllowed", "var_description": "Returns the character set for characters allowed in a password URL subcomponent."}, {"var_type": "CharacterSet", "var_name": "urlPathAllowed", "var_description": "Returns the character set for characters allowed in a path URL component."}, {"var_type": "CharacterSet", "var_name": "urlQueryAllowed", "var_description": "Returns the character set for characters allowed in a query URL component."}, {"var_type": "CharacterSet", "var_name": "urlUserAllowed", "var_description": "Returns the character set for characters allowed in a user URL subcomponent."}, {"var_type": "Int", "var_name": "NSOpenStepUnicodeReservedBase", "var_description": "Specifies lower bound for a Unicode character range reserved for Apple\u2019s corporate use (the range is 0xF400\u20130xF8FF)."}, {"var_type": "Data", "var_name": "bitmapRepresentation", "var_description": "An NSData object encoding the receiver in binary format."}, {"var_type": "CharacterSet", "var_name": "inverted", "var_description": "A character set containing only characters that don\u2019t exist in the receiver."}], "Methods": [{"method_description": "Returns a Boolean value that indicates whether a given character is in the receiver. ", "return_value": {"return_name": [""], "return_description": ["true if aCharacter is in the receiving character set, otherwise false."], "return_type": ["Bool"]}, "params": [{"param_description": "", "param_type": "unichar", "param_name": ["aCharacter"]}], "class_name": "NSCharacterSet", "method_name": "characterIsMember"}, {"method_description": "Returns a Boolean value that indicates whether the receiver has at least one member in a given character plane.", "return_value": {"return_name": [""], "return_description": ["true if the receiver has at least one member in thePlane, otherwise false."], "return_type": ["Bool"]}, "params": [{"param_description": "", "param_type": "UInt8", "param_name": ["thePlane"]}], "class_name": "NSCharacterSet", "method_name": "hasMemberInPlane"}, {"method_description": "Returns a Boolean value that indicates whether the receiver is a superset of another given character set.", "return_value": {"return_name": [""], "return_description": ["true if the receiver is a superset of theOtherSet, otherwise false."], "return_type": ["Bool"]}, "params": [{"param_description": "", "param_type": "CharacterSet", "param_name": ["of", "theOtherSet"]}], "class_name": "NSCharacterSet", "method_name": "isSuperset"}, {"method_description": "Returns a Boolean value that indicates whether a given long character is a member of the receiver.", "return_value": {"return_name": [""], "return_description": ["true if theLongChar is in the receiver, otherwise false."], "return_type": ["Bool"]}, "params": [{"param_description": "", "param_type": "UTF32Char", "param_name": ["theLongChar"]}], "class_name": "NSCharacterSet", "method_name": "longCharacterIsMember"}], "class_description": "An NSCharacterSet object represents a set of Unicode-compliant characters. NSString and NSScanner objects use NSCharacterSet objects to group characters together for searching operations, so that they can find any of a particular set of characters during a search. The cluster\u2019s two public classes, NSCharacterSet and NSMutableCharacterSet, declare the programmatic interface for static and dynamic character sets, respectively.\nThe objects you create using these classes are referred to as character set objects (and when no confusion will result, merely as character sets). Because of the nature of class clusters, character set objects aren\u2019t actual instances of the NSCharacterSet or NSMutableCharacterSet classes but of one of their private subclasses. Although a character set object\u2019s class is private, its interface is public, as declared by these abstract superclasses, NSCharacterSet and NSMutableCharacterSet. The character set classes adopt the NSCopying and NSMutableCopying protocols, making it convenient to convert a character set of one type to the other.\nThe NSCharacterSet class declares the programmatic interface for an object that manages a set of Unicode characters (see the NSString class cluster specification for information on Unicode). NSCharacterSet\u2019s principal primitive method, characterIsMember(_:), provides the basis for all other instance methods in its interface. A subclass of NSCharacterSet needs only to implement this method, plus mutableCopy(with:), for proper behavior. For optimal performance, a subclass should also override bitmapRepresentation, which otherwise works by invoking characterIsMember(_:) for every possible Unicode value.\nNSCharacterSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFCharacterSet. See Toll-Free Bridging for more information on toll-free bridging.\nImportant\nThe Swift overlay to the Foundation framework provides the CharacterSet structure, which bridges to the NSCharacterSet class and its mutable subclass, NSMutableCharacterSet. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "subclass_list": [], "class_inherit_list": ["NSObject"], "class_name": "NSCharacterSet", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSMutableCopying", "NSSecureCoding"]}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the operation is successful, otherwise false (for example, if the operation times out)."]}, "method_name": "send", "class_name": "PortMessage", "method_description": "Attempts to send the message before aDate, returning true if successful or false if the operation times out.", "params": [{"param_type": "Date", "param_name": ["before", "date"], "param_description": ""}]}], "Vars": [{"var_type": "[Any]", "var_description": "Returns the data components of the receiver.", "var_name": "components"}, {"var_type": "Port", "var_description": "For an outgoing message, returns the port on which replies to the receiver will arrive. For an incoming message, returns the port the receiver did arrive on.", "var_name": "receivePort"}, {"var_type": "Port", "var_description": "For an outgoing message, returns the port the receiver will send itself through. For an incoming message, returns the port replies to the receiver should be sent through.", "var_name": "sendPort"}, {"var_type": "UInt32", "var_description": "Returns the identifier for the receiver.", "var_name": "msgid"}], "subclass_list": [], "class_description": "Port messages are used primarily by the distributed objects system. You should implement inter-application communication using distributed objects whenever possible and use PortMessage only when necessary.\nAn PortMessage object has three major parts: the send and receive ports, which are Port objects that link the sender of the message to the receiver, and the components, which form the body of the message. The components are held as an NSArray object containing NSData and Port objects. The send(before:) message sends the components out through the send port; any replies to the message arrive on the receive port. See the Port class specification for information on handling incoming messages.\nAn PortMessage instance can be initialized with a pair of Port objects and an array of components. A port message's body can contain only Port objects or NSData objects. In the distributed objects system the byte/character arrays are usually encoded NSInvocation objects that are being forwarded from a proxy to the corresponding real object.\nAn PortMessage object also maintains a message identifier, which can be used to indicate the class of a message, such as an Objective-C method invocation, a connection request, an error, and so on. Use the msgid and msgid methods to access the identifier.\n", "class_name": "PortMessage"}
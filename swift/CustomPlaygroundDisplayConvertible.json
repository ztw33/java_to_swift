{"class_description": "Playground logging can generate, at a minimum, a structured description of any type. If you want to provide a custom description of your type to be logged in place of the default description, conform to the CustomPlaygroundDisplayConvertible protocol.\nPlayground logging generates a richer, more specialized description of core types. For example, the contents of a String are logged, as are the components of an NSColor or UIColor. The current playground logging implementation logs specialized descriptions of at least the following types:\nString and NSString\nInt, UInt, and the other standard library integer types\nFloat and Double\nBool\nDate and NSDate\nNSAttributedString\nNSNumber\nNSRange\nURL and NSURL\nCGPoint, CGSize, and CGRect\nNSColor, UIColor, CGColor, and CIColor\nNSImage, UIImage, CGImage, and CIImage\nNSBezierPath and UIBezierPath\nNSView and UIView\nPlayground logging may also be able to support specialized descriptions of other types.\nTo add CustomPlaygroundDisplayConvertible conformance to your custom type, implement the playgroundDescription property. If your implementation returns an instance of one of the types above, that type\u2019s specialized description is used. If you return any other type, a structured description is generated.\nIf your type has value semantics, the playgroundDescription should be unaffected by subsequent mutations, if possible.\nIf your type\u2019s playgroundDescription returns an instance which itself conforms to CustomPlaygroundDisplayConvertible, then that type\u2019s playgroundDescription will be used, and so on. To prevent infinite loops, playground logging implementations can place a reasonable limit on this kind of chaining.\n", "package_name": "swift", "interface_list": [], "Methods": [], "class_inherit_list": [], "Vars": [{"var_type": "Any", "var_description": "A custom playground description for this instance.Required.", "var_name": "playgroundDescription"}], "subclass_list": [], "class_name": "CustomPlaygroundDisplayConvertible"}
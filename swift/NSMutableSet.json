{"class_inherit_list": ["NSSet"], "Vars": [], "class_name": "NSMutableSet", "interface_list": ["CustomReflectable", "CVarArg", "Equatable", "ExpressibleByArrayLiteral", "Hashable", "Sequence"], "subclass_list": [], "class_description": "The NSMutableSet class declares the programmatic interface to a mutable, unordered collection of distinct objects.\nThe NSCountedSet class, which is a concrete subclass of NSMutableSet, supports mutable sets that can contain multiple instances of the same element. The NSSet class supports creating and managing immutable sets.\nNSMutableSet is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFMutableSet. See Toll-Free Bridging for more information.\nThere should be little need of subclassing. If you need to customize behavior, it is often better to consider composition instead of subclassing.\nIn a subclass, you must override both of its primitive methods:\nadd(_:)\nremove(_:)\nYou must also override the primitive methods of the NSSet class.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds a given object to the set, if it is not already a member.", "method_name": "add", "class_name": "NSMutableSet", "params": [{"param_description": "The object to add to the set.", "param_type": "Any", "param_name": ["object"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Evaluates a given predicate against the set\u2019s content and removes from the set those objects for which the predicate returns false.", "method_name": "filter", "class_name": "NSMutableSet", "params": [{"param_description": "A predicate.", "param_type": "NSPredicate", "param_name": ["using", "predicate"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes a given object from the set.", "method_name": "remove", "class_name": "NSMutableSet", "params": [{"param_description": "The object to remove from the set.", "param_type": "Any", "param_name": ["object"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Empties the set of all of its members.", "method_name": "removeAllObjects", "class_name": "NSMutableSet", "params": []}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds to the set each object contained in a given array that is not already a member.", "method_name": "addObjects", "class_name": "NSMutableSet", "params": [{"param_description": "An array of objects to add to the set.", "param_type": "[Any]", "param_name": ["from", "array"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Adds each object in another given set to the receiving set, if not present.", "method_name": "union", "class_name": "NSMutableSet", "params": [{"param_description": "The set of objects to add to the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["otherSet"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes each object in another given set from the receiving set, if present.", "method_name": "minus", "class_name": "NSMutableSet", "params": [{"param_description": "The set of objects to remove from the receiving set.", "param_type": "Set<AnyHashable>", "param_name": ["otherSet"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Removes from the receiving set each object that isn\u2019t a member of another given set.", "method_name": "intersect", "class_name": "NSMutableSet", "params": [{"param_description": "The set with which to perform the intersection.", "param_type": "Set<AnyHashable>", "param_name": ["otherSet"]}]}, {"return_value": {"return_description": [], "return_name": [], "return_type": []}, "method_description": "Empties the receiving set, then adds each object contained in another given set.", "method_name": "setSet", "class_name": "NSMutableSet", "params": [{"param_description": "The set whose members replace the receiving set's content.", "param_type": "Set<AnyHashable>", "param_name": ["otherSet"]}]}], "package_name": "swift"}
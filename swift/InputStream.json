{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Stream"], "Methods": [{"return_value": {"return_type": ["Int"], "return_name": [""], "return_description": ["A number indicating the outcome of the operation:"]}, "method_name": "read", "class_name": "InputStream", "method_description": "Reads up to a given number of bytes into a given buffer.", "params": [{"param_type": "UnsafeMutablePointer<UInt8>", "param_name": ["buffer"], "param_description": ""}, {"param_type": "Int", "param_name": ["maxLength", "len"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the buffer is available, otherwise false."]}, "method_name": "getBuffer", "class_name": "InputStream", "method_description": "Returns by reference a pointer to a read buffer and, by reference, the number of bytes available, and returns a Boolean value that indicates whether the buffer is available.", "params": [{"param_type": "UnsafeMutablePointer<UnsafeMutablePointer<UInt8>>", "param_name": ["buffer"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<Int>", "param_name": ["length", "len"], "param_description": ""}]}], "Vars": [{"var_type": "Bool", "var_description": "A Boolean value that indicates whether the receiver has bytes available to read.", "var_name": "hasBytesAvailable"}], "subclass_list": [], "class_description": "InputStream is \u201ctoll-free bridged\u201d with its Core Foundation counterpart, CFReadStream. For more information on toll-free bridging, see Toll-Free Bridging.\nNSInputStream is an abstract superclass of a class cluster consisting of concrete subclasses of NSStream that provide standard read-only access to stream data. Although NSInputStream is probably sufficient for most situations requiring access to stream data, you can create a subclass of NSInputStream if you want more specialized behavior (for example, you want to record statistics on the data in a stream).\nTo create a subclass of NSInputStream you may have to implement initializers for the type of stream data supported and suitably re-implement existing initializers. You must also provide complete implementations of the following methods:\nread(_:maxLength:)\nFrom the current read index, take up to the number of bytes specified in the second parameter from the stream and place them in the client-supplied buffer (first parameter). The buffer must be of the size specified by the second parameter. Return the actual number of bytes placed in the buffer; if there is nothing left in the stream, return 0. Reset the index into the stream for the next read operation. \ngetBuffer(_:length:)\nReturn in 0(1) a pointer to the subclass-allocated buffer (first parameter). Return by reference in the second parameter the number of bytes actually put into the buffer. The buffer\u2019s contents are valid only until the next stream operation. Return false if you cannot access data in the buffer; otherwise, return true. If this method is not appropriate for your type of stream, you may return false.\nhasBytesAvailable\nReturn true if there is more data to read in the stream, false if there is not. If you want to be semantically compatible with NSInputStream, return true if a read must be attempted to determine if bytes are available.\n", "class_name": "InputStream"}
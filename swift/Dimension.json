{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "class_inherit_list": ["Unit"], "Methods": [{"return_value": {"return_type": ["Self"], "return_name": [""], "return_description": ["An NSDimension subclass object from which all other units provided by the subclass are defined."]}, "method_name": "baseUnit", "class_name": "Dimension", "method_description": "Returns the base unit.", "params": []}], "Vars": [{"var_type": "UnitConverter", "var_description": "Returns the unit converter used to represent the unit in terms of the dimension\u2019s base unit.", "var_name": "converter"}], "subclass_list": [], "class_description": "The Foundation framework provides concrete subclasses for many of the most common types of physical units.\nApple-provided concrete NSDimension subclasses\nNSDimension subclass\nDescription\nBase unit\nUnitAcceleration\nUnit of measure for acceleration\nmeters per second squared (m/s\u00b2)\nUnitAngle\nUnit of measure for planar angle and rotation\ndegrees (\u00b0)\nUnitArea\nUnit of measure for area\nsquare meters (m\u00b2)\nUnitConcentrationMass\nUnit of measure for concentration of mass\nmilligrams per deciliter (mg/dL)\nUnitDispersion\nUnit of measure for dispersion\nparts per million (ppm)\nUnitDuration\nUnit of measure for duration\nseconds (sec)\nUnitElectricCharge\nUnit of measure for electric charge\ncoulombs (C)\nUnitElectricCurrent\nUnit of measure for electric current\namperes (A)\nUnitElectricPotentialDifference\nUnit of measure for electric potential difference\nvolts (V)\nUnitElectricResistance\nUnit of measure for electric resistance\nohms (\u03a9)\nUnitEnergy\nUnit of measure for energy\njoules (J)\nUnitFrequency\nUnit of measure for frequency\nhertz (Hz)\nUnitFuelEfficiency\nUnit of measure for fuel consumption\nliters per 100 kilometers (L/100km)\nUnitIlluminance\nUnit of measure for illuminance\nlux (lx)\nUnitLength\nUnit of measure for length\nmeters (m)\nUnitMass\nUnit of measure for mass\nkilograms (kg)\nUnitPower\nUnit of measure for power\nwatts (W)\nUnitPressure\nUnit of measure for pressure\nnewtons per square meter (N/m\u00b2)\nUnitSpeed\nUnit of measure for speed\nmeters per second (m/s)\nUnitTemperature\nUnit of measure for temperature\nkelvin (K)\nUnitVolume\nUnit of measure for volume\nliters (L)\nEach instance of an Dimension subclass has a converter, which is used to represent the unit in terms of the dimension\u2019s baseUnit(). For example, the NSLengthUnit class uses meters as its base unit. The predefined miles unit is defined by a UnitConverterLinear with a coefficient of 1609.34, which corresponds to the conversion ratio of miles to meters (1 mi = 1609.34 m); the predefined meters unit is defined by a UnitConverterLinear with a coefficient of 1.0, because it\u2019s the base unit.\nYou typically use an NSDimension subclass in conjunction with the NSMeasurement class to represent specific quantities of a particular unit.\nIn addition to the Apple-provided units, you can define custom units. Custom units can be initialized from a symbol and converter of an existing type or implemented as a class method of an existing type for additional convenience. You can also define your own NSDimension subclass to represent an entirely new unit dimension.\nThe simplest way to define a custom unit is to create a new instance of an existing NSDimension subclass using the init(symbol:converter:) method.\nFor example, the smoot is a nonstandard unit of length (1 smoot = 1.70180 m). You can create a new instance of UnitLength as follows:\nAlternatively, if a custom unit is used extensively throughout an app, consider extending the corresponding NSDimension subclass and adding a class method.\nFor example, speed can be measured in furlongs per fortnight (1 fur/ftn = 201.168 m / 1,209,600 s). If an app makes frequent use of this unit, you can extend UnitSpeed to add a furlongsPerFortnight class method for convenient access as follows:\nYou can create a new subclass of NSDimension to describe a new unit dimension.\nFor example, the Foundation framework does not define any units for radioactivity. Radioactivity is the process by which the nucleus of an atom emits radiation. The SI unit of measure for radioactivity is the becquerel (Bq), which is defined as the quantity of radioactive material in which one nucleus decays per second (1 Bq =  1 s-1). Radioactivity is also commonly described in terms of curies (Ci), a unit defined relative to the decay of one gram of the radium-226 isotope (1 Ci = 3.7 \u00d7 1010 Bq). You can implement a CustomUnitRadioactivity class that defines both units of radioactivity as follows:\nNSDimension is intended for subclassing. Although the subclasses listed in Table 1 are suitable for most purposes, you may want to define a custom unit type. For instance, you may need a custom unit type to represent a derived unit, such as magnetic flux (measured as the product of electric potential difference and time).\nTo represent dimensionless units, subclass Unit directly.\nAll subclasses must fully implement the baseUnit() method designating the base unit, relative to which any additional units are defined.\nYou should also implement a class method named for the base unit itself, which may be used interchangeably. For example, the UnitIlluminance class defines its baseUnit in terms of the lux (lx), and provides a corresponding lux class method.\nAs described in Working with Custom Units, you only need to create a custom subclass of NSDimension if a unit of the desired dimension is not yet defined. You can define a custom unit for an existing NSDimension subclass by either calling the init(symbol:converter:) method or extending the subclass and adding a corresponding class method.\n", "class_name": "Dimension"}
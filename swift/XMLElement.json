{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["XMLNode"], "Methods": [{"return_value": {"return_type": ["[XMLElement]"], "return_name": [""], "return_description": ["An array of of NSXMLElement objects or an empty array if no matching children can be found."]}, "method_name": "elements", "class_name": "XMLElement", "method_description": "Returns the child element nodes (as NSXMLElement objects) of the receiver that have a specified name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["[XMLElement]"], "return_name": [""], "return_description": ["An array of NSXMLElement objects or an empty array if no matching children could be found."]}, "method_name": "elements", "class_name": "XMLElement", "method_description": "Returns the child element nodes (as NSXMLElement objects) of the receiver that are matched with the specified local name and URI. ", "params": [{"param_type": "String", "param_name": ["forLocalName", "localName"], "param_description": ""}, {"param_type": "String", "param_name": ["uri", "URI"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addChild", "class_name": "XMLElement", "method_description": "Adds a child node at the end of the receiver\u2019s current list of children.", "params": [{"param_type": "XMLNode", "param_name": ["child"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insertChild", "class_name": "XMLElement", "method_description": "Inserts a new child node at a specified location in the receiver\u2019s list of child nodes.", "params": [{"param_type": "XMLNode", "param_name": ["child"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insertChildren", "class_name": "XMLElement", "method_description": "Inserts an array of child nodes at a specified location in the receiver\u2019s list of children.", "params": [{"param_type": "[XMLNode]", "param_name": ["children"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeChild", "class_name": "XMLElement", "method_description": "Removes the child node of the receiver identified by a given index.", "params": [{"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceChild", "class_name": "XMLElement", "method_description": "Replaces a child node at a specified location with another child node.", "params": [{"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}, {"param_type": "XMLNode", "param_name": ["with", "node"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setChildren", "class_name": "XMLElement", "method_description": "Sets all child nodes of the receiver at once, replacing any existing children.", "params": [{"param_type": "[XMLNode]", "param_name": ["children"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "normalizeAdjacentTextNodesPreservingCDATA", "class_name": "XMLElement", "method_description": "Coalesces adjacent text nodes of the receiver that you have explicitly added, optionally including CDATA sections.", "params": [{"param_type": "Bool", "param_name": ["preserve"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addAttribute", "class_name": "XMLElement", "method_description": "Adds an attribute node to the receiver.", "params": [{"param_type": "XMLNode", "param_name": ["attribute"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An XML node object representing a matching attribute or nil if no such node was found. "]}, "method_name": "attribute", "class_name": "XMLElement", "method_description": "Returns the attribute node of the receiver with the specified name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An XML node object representing a matching attribute or nil if no such node was found. "]}, "method_name": "attribute", "class_name": "XMLElement", "method_description": "Returns the attribute node of the receiver that is identified by a local name and URI.", "params": [{"param_type": "String", "param_name": ["forLocalName", "localName"], "param_description": ""}, {"param_type": "String", "param_name": ["uri", "URI"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeAttribute", "class_name": "XMLElement", "method_description": "Removes an attribute node identified by name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setAttributesWith", "class_name": "XMLElement", "method_description": "Sets the attributes of the receiver based on the key-value pairs specified in the passed dictionary.", "params": [{"param_type": "String]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setAttributesAs", "class_name": "XMLElement", "method_description": "Sets the attributes of the receiver based on the key-value pairs specified in the passed-in dictionary.DeprecatedThis method is deprecated because it does not function properly. Instead use setAttributesWith(_:).", "params": [{"param_type": "Any]", "param_name": ["attributes"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addNamespace", "class_name": "XMLElement", "method_description": "Adds a namespace node to the receiver.", "params": [{"param_type": "XMLNode", "param_name": ["aNamespace"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An XMLNode object of kind XMLNode.Kind.namespace or nil if there is no namespace node with that prefix."]}, "method_name": "namespace", "class_name": "XMLElement", "method_description": "Returns the namespace node with a specified prefix.", "params": [{"param_type": "String", "param_name": ["forPrefix", "name"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeNamespace", "class_name": "XMLElement", "method_description": "Removes a namespace node that is identified by a given prefix.", "params": [{"param_type": "String", "param_name": ["forPrefix", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLNode"], "return_name": [""], "return_description": ["An XMLNode object of kind XMLNode.Kind.namespace or nil if there is no matching namespace node."]}, "method_name": "resolveNamespace", "class_name": "XMLElement", "method_description": "Returns the namespace node with the prefix matching the given qualified name.", "params": [{"param_type": "String", "param_name": ["forName", "name"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string that is the matching prefix or nil if it finds no matching prefix."]}, "method_name": "resolvePrefix", "class_name": "XMLElement", "method_description": "Returns the prefix associated with the specified URI.", "params": [{"param_type": "String", "param_name": ["forNamespaceURI", "namespaceURI"], "param_description": ""}]}], "Vars": [{"var_type": "[XMLNode]", "var_description": "Sets all attributes of the receiver at once, replacing any existing attribute nodes.", "var_name": "attributes"}, {"var_type": "[XMLNode]", "var_description": "Sets all of the namespace nodes of the receiver at once, replacing any existing namespace nodes.", "var_name": "namespaces"}], "subclass_list": [], "class_description": "An XMLElement object may have child nodes, specifically comment nodes, processing-instruction nodes, text nodes, and other XMLElement nodes. It may also have attribute nodes and namespace nodes associated with it (however, namespace and attribute nodes are not considered children). Any attempt to add a XMLDocument node, XMLDTD node, namespace node, or attribute node as a child raises an exception. If you add a child node to an XMLElement object and that child already has a parent, XMLElement raises an exception; the child must be detached or copied first.\nYou can subclass NSXMLElement if you want element nodes with more specialized attributes or behavior, for example, paragraph and font attributes that specify how the string value of the element should appear. \nTo subclass NSXMLElement you need to override the primary initializer, init(name:uri:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary. \naddAttribute(_:)\nremoveNamespace(forPrefix:)\nremoveAttribute(forName:)\nnamespaces\nattributes\nnamespaces\nattribute(forLocalName:uri:)\ninsertChild(_:at:)\nattributes\nremoveChild(at:)\naddNamespace(_:)\nsetChildren(_:)\nNSXMLElement implements  isEqual(_:) to perform a deep comparison: two XMLDocument objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of NSXMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate. \nNote that you can safely set the root element of the XML document (using the NSXMLDocument setRootElement(_:)method) to be an instance of your subclass because this method only checks to see if the added node is of an element kind (NSXMLElementKind). These precautions do not apply, of course, if you are creating an XML tree programmatically.\n", "class_name": "XMLElement"}
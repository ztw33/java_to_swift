{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["Process"], "return_name": [""], "return_description": []}, "method_name": "launchedProcess", "class_name": "Process", "method_description": "Creates and launches a task with a specified executable and arguments.", "params": [{"param_type": "String", "param_name": ["launchPath", "path"], "param_description": ""}, {"param_type": "[String]", "param_name": ["arguments"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "interrupt", "class_name": "Process", "method_description": "Sends an interrupt signal to the receiver and all of its subtasks.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "launch", "class_name": "Process", "method_description": "Launches the task represented by the receiver.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the receiver was able to resume execution, false otherwise."]}, "method_name": "resume", "class_name": "Process", "method_description": "Resumes execution of the receiver task that had previously been suspended with a suspend() message.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the receiver was successfully suspended, false otherwise."]}, "method_name": "suspend", "class_name": "Process", "method_description": "Suspends execution of the receiver task.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "terminate", "class_name": "Process", "method_description": "Sends a terminate signal to the receiver and all of its subtasks.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "waitUntilExit", "class_name": "Process", "method_description": "Block until the receiver is finished.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "run", "class_name": "Process", "method_description": "", "params": []}, {"return_value": {"return_type": ["Void = nil throws -> Process"], "return_name": [""], "return_description": []}, "method_name": "run", "class_name": "Process", "method_description": "", "params": [{"param_type": "URL", "param_name": ["url"], "param_description": ""}, {"param_type": "[String]", "param_name": ["arguments"], "param_description": ""}, {"param_type": "((Process", "param_name": ["terminationHandler"], "param_description": ""}]}], "Vars": [{"var_type": "[String]", "var_description": "Sets the command arguments that should be used to launch the executable.", "var_name": "arguments"}, {"var_type": "String", "var_description": "Sets the current directory for the receiver.", "var_name": "currentDirectoryPath"}, {"var_type": "[String", "var_description": "Sets the environment for the receiver.", "var_name": "environment"}, {"var_type": "String", "var_description": "Sets the receiver\u2019s executable.", "var_name": "launchPath"}, {"var_type": "Int32", "var_description": "Returns the receiver\u2019s process identifier.", "var_name": "processIdentifier"}, {"var_type": "Any", "var_description": "Sets the standard error for the receiver.", "var_name": "standardError"}, {"var_type": "Any", "var_description": "Sets the standard input for the receiver.", "var_name": "standardInput"}, {"var_type": "Any", "var_description": "Sets the standard output for the receiver.", "var_name": "standardOutput"}, {"var_type": "Bool", "var_description": "Returns whether the receiver is still running.", "var_name": "isRunning"}, {"var_type": "Int32", "var_description": "Returns the exit status returned by the receiver\u2019s executable.", "var_name": "terminationStatus"}, {"var_type": "Process.TerminationReason", "var_description": "Returns the reason the task was terminated.", "var_name": "terminationReason"}, {"var_type": "[String]", "var_description": "Sets the command arguments that should be used to launch the executable.", "var_name": "arguments"}, {"var_type": "String", "var_description": "Sets the current directory for the receiver.", "var_name": "currentDirectoryPath"}, {"var_type": "[String", "var_description": "Sets the environment for the receiver.", "var_name": "environment"}, {"var_type": "String", "var_description": "Sets the receiver\u2019s executable.", "var_name": "launchPath"}, {"var_type": "Any", "var_description": "Sets the standard error for the receiver.", "var_name": "standardError"}, {"var_type": "Any", "var_description": "Sets the standard input for the receiver.", "var_name": "standardInput"}, {"var_type": "Any", "var_description": "Sets the standard output for the receiver.", "var_name": "standardOutput"}, {"var_type": "((Process)", "var_description": "Invoked when the task is completed.", "var_name": "terminationHandler"}, {"var_type": "NSNotification.Name", "var_description": "Posted when the task has stopped execution. This notification can be posted either when the task has exited normally or as a result of terminate() being sent to the NSTask object. If the NSTask object gets released, however, this notification will not get sent, as the port the message would have been sent on was released as part of the task release. The observer method can use terminationStatus to determine why the task died. See Ending an NSTask for an example.", "var_name": "didTerminateNotification"}, {"var_type": "URL", "var_description": "", "var_name": "currentDirectoryURL"}, {"var_type": "URL", "var_description": "", "var_name": "executableURL"}, {"var_type": "QualityOfService", "var_description": "", "var_name": "qualityOfService"}], "subclass_list": [], "class_description": "Using the Process class, your program can run another program as a subprocess and can monitor that program\u2019s execution. A Process object creates a separate executable entity; it differs from Thread in that it does not share memory space with the process that creates it.\nA process operates within an environment defined by the current values for several items: the current directory, standard input, standard output, standard error, and the values of any environment variables. By default, an Process object inherits its environment from the process that launches it. If there are any values that should be different for the process, for example, if the current directory should change, you must change the value before you launch it. A process's environment cannot be changed while it is running.\nAn Process object can only be run once. Subsequent attempts raise an error.\nImportant\nIn a sandboxed application, child processes created with the Process class inherit the sandbox of the parent app. You should generally write helper applications as XPC Services instead, because XPC Services allows you to specify different sandbox entitlements for helper apps. See Daemons and Services Programming Guide and XPC for more information.\n", "class_name": "Process"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSRegularExpression"], "Methods": [], "Vars": [{"var_type": "NSTextCheckingTypes", "var_description": "Returns the checking types for this data detector.", "var_name": "checkingTypes"}], "subclass_list": [], "class_description": "Currently the NSDataDetector class can match dates, addresses, links, phone numbers and transit information.\nThe results of matching content is returned as NSTextCheckingResult objects. However, the NSTextCheckingResult objects returned by NSDataDetector are different from those returned by the base class NSRegularExpression.  Results returned by NSDataDetector will be of one of the data detectors types, depending on the type of result being returned, and they will have corresponding properties.  For example, results of type date have a date, timeZone, and duration; results of type link have a url, and so forth.\nThe following shows several graduated examples of using the NSDataDetector class.\nThis code fragment creates a data detector that will find URL links and phone numbers. If an error was encountered it is returned in error.\nOnce the data detector instance is created you can determine the number of matches within a range of a string using the NSRegularExpression method numberOfMatches(in:options:range:).\nIf you are interested only in the overall range of the first match, the numberOfMatches(in:options:range:) method provides it.  However, with data detectors, this is less likely than with regular expressions, because clients usually will be interested in additional information as well.\nThe additional information available depends on the type of the result.  For results of type link, it is the URL property that is significant.  For results of type NSTextCheckingTypePhoneNumber , it is the phoneNumber property instead. \nThe matches(in:options:range:) method is similar to the firstMatch(in:options:range:), except that it returns all matches rather than only the first. The following code fragment finds all the matches for links and phone numbers in a string.\nThe NSRegularExpression block object enumerator is the most general and flexible of the matching methods.  It allows you to iterate through matches in a string, performing arbitrary actions on each as specified by the code in the block, and to stop partway through if desired.  In the following code fragment, the iteration is stopped after a certain number of matches have been found.\nNote\nYou should only use NSDataDetector on natural language text.\nIf text is expected to be in a particular format, you should instead use an Formatter or ValueTransformer subclass. For instance, if you are expecting a date field to be represented by an ISO 8601 timestamp, you should use DateFormatter to parse that into an NSDate object.\nIf the text is in a machine-readable format, such as XML or JSON, you should extract the natural language text, such as by using XMLParser or JSONSerialization, and match on that rather than attempt to match on the entire document.\n", "class_name": "NSDataDetector"}
{"subclass_list": [], "Methods": [{"params": [{"param_name": ["index"], "param_description": "", "param_type": "Int"}], "method_name": "adding", "method_description": "Returns an index path containing the nodes in the receiving index path plus another given index.", "return_value": {"return_description": ["A new index path containing the receiving index path\u2019s indexes and index."], "return_name": [""], "return_type": ["IndexPath"]}, "class_name": "NSIndexPath"}, {"params": [], "method_name": "removingLastIndex", "method_description": "Returns an index path with the nodes in the receiving index path, excluding the last one.", "return_value": {"return_description": ["A new index path with the receiving index path\u2019s indexes, excluding the last one."], "return_name": [""], "return_type": ["IndexPath"]}, "class_name": "NSIndexPath"}, {"params": [{"param_name": ["otherObject"], "param_description": "", "param_type": "IndexPath"}], "method_name": "compare", "method_description": "Indicates the depth-first traversal order of the receiving index path and another index path.", "return_value": {"return_description": ["The depth-first traversal ordering of the receiving index path and indexPath."], "return_name": [""], "return_type": ["ComparisonResult"]}, "class_name": "NSIndexPath"}, {"params": [{"param_name": ["atPosition", "position"], "param_description": "", "param_type": "Int"}], "method_name": "index", "method_description": "Provides the value at a particular node in the index path.", "return_value": {"return_description": ["The index value at node or NSNotFound if the node is outside the range of the index path."], "return_name": [""], "return_type": ["Int"]}, "class_name": "NSIndexPath"}, {"params": [{"param_name": ["indexes"], "param_description": "", "param_type": "UnsafeMutablePointer<Int>"}, {"param_name": ["range", "positionRange"], "param_description": "", "param_type": "NSRange"}], "method_name": "getIndexes", "method_description": "Copies the indexes stored in the index path from the positions specified by the position range into the specified indexes.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSIndexPath"}, {"params": [{"param_name": ["indexes"], "param_description": "", "param_type": "UnsafeMutablePointer<Int>"}], "method_name": "getIndexes", "method_description": "Copies the objects contained in the index path into indexes.DeprecatedUse getIndexes(_:range:) instead.", "return_value": {"return_description": [], "return_name": [], "return_type": []}, "class_name": "NSIndexPath"}], "Vars": [{"var_name": "section", "var_description": "An index number identifying a section in a table view or collection view.", "var_type": "Int"}, {"var_name": "row", "var_description": "An index number identifying a row in a section of a table view.", "var_type": "Int"}, {"var_name": "item", "var_description": "An index number identifying an item in a section of a collection view.", "var_type": "Int"}, {"var_name": "length", "var_description": "The number of nodes in the index path.", "var_type": "Int"}], "class_name": "NSIndexPath", "class_inherit_list": ["NSObject"], "interface_list": ["CVarArg", "Equatable", "Hashable", "NSCopying", "NSSecureCoding"], "class_description": "Each index in an index path represents the index into an array of children from one node in the tree to another, deeper, node. For example, the index path 1.4.3.2 specifies the path shown in Figure 1.\nIndex path 1.4.3.2\nNote\nThe UIKit framework adds programming interfaces to the NSIndexPath class of the Foundation framework to facilitate the identification of rows and sections in UITableView objects and the identification of items and sections in UICollectionView objects. The API consists of class factory methods and properties for accessing the various indexed values. You use the factory methods to create an index path for the corresponding table view or collection view.\nImportant\nThe Swift overlay to the Foundation framework provides the IndexPath structure, which bridges to the NSIndexPath class. For more information about value types, see Working with Cocoa Frameworks in Using Swift with Cocoa and Objective-C (Swift 4.1).\n", "package_name": "foundation"}
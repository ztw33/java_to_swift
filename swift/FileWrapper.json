{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable", "NSSecureCoding"], "class_inherit_list": ["NSObject"], "Methods": [{"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Dictionary key used to store fileWrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which is the same as the passed-in file wrapper's preferred filename unless that name is already in use as a key in the directory\u2019s dictionary of children. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure."]}, "method_name": "addFileWrapper", "class_name": "FileWrapper", "method_description": "Adds a child file wrapper to the receiver, which must be a directory file wrapper.", "params": [{"param_type": "FileWrapper", "param_name": ["child"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeFileWrapper", "class_name": "FileWrapper", "method_description": "Removes a child file wrapper from the receiver, which must be a directory file wrapper.", "params": [{"param_type": "FileWrapper", "param_name": ["child"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. See Accessing File Wrapper Identities in File System Programming Guide for more information."]}, "method_name": "addFile", "class_name": "FileWrapper", "method_description": "Creates a file wrapper from a given file-system node and adds it to the receiver, which must be a directory file wrapper.DeprecatedUse addFileWrapper(_:) instead.", "params": [{"param_type": "String", "param_name": ["withPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which is the same as the passed-in file wrapper's preferred filename unless that name is already in use as a key in the directory's dictionary of children. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure."]}, "method_name": "addRegularFile", "class_name": "FileWrapper", "method_description": "Creates a regular-file file wrapper with the given contents and adds it to the receiver, which must be a directory file wrapper.", "params": [{"param_type": "Data", "param_name": ["withContents", "data"], "param_description": ""}, {"param_type": "String", "param_name": ["preferredFilename", "fileName"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Dictionary key used to store the new file wrapper in the directory\u2019s list of file wrappers. See Accessing File Wrapper Identities in File System Programming Guide for more information."]}, "method_name": "addSymbolicLink", "class_name": "FileWrapper", "method_description": "Creates a symbolic-link file wrapper pointing to a given file-system node and adds it to the receiver, which must be a directory file wrapper.DeprecatedUse addFileWrapper(_:) instead.", "params": [{"param_type": "String", "param_name": ["withDestination", "path"], "param_description": ""}, {"param_type": "String", "param_name": ["preferredFilename", "filename"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Dictionary key used to store the file wrapper in the directory\u2019s list of file wrappers. The dictionary key is a unique filename, which may not be the same as the passed-in file wrapper's preferred filename if more than one file wrapper in the directory's dictionary of children has the same preferred filename. See Accessing File Wrapper Identities in File System Programming Guide for more information about the file-wrapper list structure. Returns nil if the file wrapper specified in child is not a child of the directory."]}, "method_name": "keyForChildFileWrapper", "class_name": "FileWrapper", "method_description": "Returns the dictionary key used by a directory to identify a given file wrapper.", "params": [{"param_type": "FileWrapper", "param_name": ["child"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["Pathname the file wrapper references (the destination of the symbolic link the file wrapper represents)."]}, "method_name": "symbolicLinkDestination", "class_name": "FileWrapper", "method_description": "Provides the pathname referenced by the file wrapper object, which must be a symbolic-link file wrapper.DeprecatedUse symbolicLinkDestinationURL instead.", "params": []}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["false when the file wrapper needs to be updated to match node, false otherwise."]}, "method_name": "needsToBeUpdated", "class_name": "FileWrapper", "method_description": "Indicates whether the file wrapper needs to be updated to match a given file-system node.DeprecatedUse matchesContents(of:) instead.", "params": [{"param_type": "String", "param_name": ["fromPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true when the contents of the file wrapper match the contents of url, false otherwise."]}, "method_name": "matchesContents", "class_name": "FileWrapper", "method_description": "Indicates whether the contents of a file wrapper matches a directory, regular file, or symbolic link on disk.", "params": [{"param_type": "URL", "param_name": ["of", "url"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true if the update is carried out, false if it isn\u2019t needed."]}, "method_name": "update", "class_name": "FileWrapper", "method_description": "Updates the file wrapper to match a given file-system node.DeprecatedUse read(from:options:) instead.", "params": [{"param_type": "String", "param_name": ["fromPath", "path"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if successful. If not successful, returns false after setting outError to an NSError object that describes the reason why the file wrapper could not be reread."]}, "method_name": "read", "class_name": "FileWrapper", "method_description": "Recursively rereads the entire contents of a file wrapper from the specified location on disk.", "params": [{"param_type": "URL", "param_name": ["from", "url"], "param_description": ""}, {"param_type": "FileWrapper.ReadingOptions", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": ["Bool"], "return_name": [""], "return_description": ["true when the write operation is successful, false otherwise."]}, "method_name": "write", "class_name": "FileWrapper", "method_description": "Writes a file wrapper\u2019s contents to a given file-system node.DeprecatedUse write(to:options:originalContentsURL:) instead.", "params": [{"param_type": "String", "param_name": ["toFile", "path"], "param_description": ""}, {"param_type": "Bool", "param_name": ["atomically", "atomicFlag"], "param_description": ""}, {"param_type": "Bool", "param_name": ["updateFilenames", "updateFilenamesFlag"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true when the write operation is successful. If not successful, returns false after setting outError to an NSError object that describes the reason why the file wrapper\u2019s contents could not be written."]}, "method_name": "write", "class_name": "FileWrapper", "method_description": "Recursively writes the entire contents of a file wrapper to a given file-system URL.", "params": [{"param_type": "URL", "param_name": ["to", "url"], "param_description": ""}, {"param_type": "FileWrapper.WritingOptions", "param_name": ["options"], "param_description": ""}, {"param_type": "URL", "param_name": ["originalContentsURL"], "param_description": ""}]}], "Vars": [{"var_type": "Bool", "var_description": "This property contains a boolean value that indicates whether the file wrapper object is a regular-file.", "var_name": "isRegularFile"}, {"var_type": "Bool", "var_description": "This property contains a boolean value indicating whether the file wrapper is a directory file wrapper.", "var_name": "isDirectory"}, {"var_type": "Bool", "var_description": "A boolean that indicates whether the file wrapper object is a symbolic-link file wrapper.", "var_name": "isSymbolicLink"}, {"var_type": "[String", "var_description": "The file wrappers contained by a directory file wrapper.", "var_name": "fileWrappers"}, {"var_type": "URL", "var_description": "The URL referenced by the file wrapper object, which must be a symbolic-link file wrapper.", "var_name": "symbolicLinkDestinationURL"}, {"var_type": "Data", "var_description": "The contents of the file wrapper as an opaque data object.", "var_name": "serializedRepresentation"}, {"var_type": "String", "var_description": "The filename of the file wrapper object", "var_name": "filename"}, {"var_type": "String", "var_description": "The preferred filename for the file wrapper object.", "var_name": "preferredFilename"}, {"var_type": "[String", "var_description": "A dictionary of file attributes.", "var_name": "fileAttributes"}, {"var_type": "Data", "var_description": "The contents of the file-system node associated with a regular-file file wrapper.", "var_name": "regularFileContents"}, {"var_type": "NSImage", "var_description": "The icon that represents the file wrapper.", "var_name": "icon"}], "subclass_list": [], "class_description": "The FileWrapper class provides access to the attributes and contents of file system nodes. A file system node is a file, directory, or symbolic link. Instances of this class are known as file wrappers.\nNote\nStarting in macOS 10.7, FileWrapper moved from Application Kit to Foundation. As a result of this the icon, and setIcon: methods have moved to a new category of FileWrapper that remains in Application Kit. \nFile wrappers represent a file system node as an object that can be displayed as an image (and possibly edited in place), saved to the file system, or transmitted to another application. \nThere are three types of file wrappers:\nRegular-file file wrapper: Represents a regular file.\nDirectory file wrapper: Represents a directory.\nSymbolic-link file wrapper: Represents a symbolic link.\nA file wrapper has these attributes:\nFilename. Name of the file system node the file wrapper represents.\nfile-system attributes. See FileManager for information on the contents of the attributes dictionary. \nRegular-file contents. Applicable only to regular-file file wrappers.\nFile wrappers. Applicable only to directory file wrappers.\nDestination node. Applicable only to symbolic-link file wrappers.\n", "class_name": "FileWrapper"}
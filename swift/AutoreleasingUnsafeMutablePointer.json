{"class_inherit_list": [], "Vars": [{"var_description": "Access the Pointee instance referenced by self.", "var_type": "Pointee", "var_name": "pointee"}, {"var_description": "A textual representation of self, suitable for debugging.", "var_type": "String", "var_name": "debugDescription"}], "class_name": "AutoreleasingUnsafeMutablePointer", "interface_list": ["CustomDebugStringConvertible", "CVarArg", "Equatable"], "subclass_list": [], "class_description": "This type has implicit conversions to allow passing any of the following to a C or ObjC API:\nnil, which gets passed as a null pointer,\nan inout argument of the referenced type, which gets passed as a pointer to a writeback temporary with autoreleasing ownership semantics,\nan UnsafeMutablePointer<Pointee>, which is passed as-is.\nPassing pointers to mutable arrays of ObjC class pointers is not directly supported. Unlike UnsafeMutablePointer<Pointee>, AutoreleasingUnsafeMutablePointer<Pointee> must reference storage that does not own a reference count to the referenced value. UnsafeMutablePointer\u2019s operations, by contrast, assume that the referenced storage owns values loaded from or stored to it.\nThis type does not carry an owner pointer unlike the other C*Pointer types because it only needs to reference the results of inout conversions, which already have writeback-scoped lifetime.\n", "Methods": [{"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "", "method_name": "==", "class_name": "AutoreleasingUnsafeMutablePointer", "params": [{"param_description": "", "param_type": "AutoreleasingUnsafeMutablePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "", "param_type": "AutoreleasingUnsafeMutablePointer<Pointee>", "param_name": ["rhs"]}]}, {"return_value": {"return_description": [], "return_name": [""], "return_type": ["Bool"]}, "method_description": "Returns a Boolean value indicating whether two values are not equal.", "method_name": "!=", "class_name": "AutoreleasingUnsafeMutablePointer", "params": [{"param_description": "A value to compare.", "param_type": "AutoreleasingUnsafeMutablePointer<Pointee>", "param_name": ["lhs"]}, {"param_description": "Another value to compare.", "param_type": "AutoreleasingUnsafeMutablePointer<Pointee>", "param_name": ["rhs"]}]}], "package_name": "swift"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["XMLNode"], "Methods": [{"return_value": {"return_type": ["AnyClass"], "return_name": [""], "return_description": ["The substituted class."]}, "method_name": "replacementClass", "class_name": "XMLDocument", "method_description": "Overridden by subclasses to substitute a custom class for an NSXML class that the parser uses to create node instances.", "params": [{"param_type": "AnyClass", "param_name": ["for", "cls"], "param_description": ""}]}, {"return_value": {"return_type": ["XMLElement"], "return_name": [""], "return_description": ["The root element of the receiver."]}, "method_name": "rootElement", "class_name": "XMLDocument", "method_description": "Returns the root element of the receiver.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setRootElement", "class_name": "XMLDocument", "method_description": "Set the root element of the receiver. ", "params": [{"param_type": "XMLElement", "param_name": ["root"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "addChild", "class_name": "XMLDocument", "method_description": "Adds a child node after the last of the receiver\u2019s existing children.", "params": [{"param_type": "XMLNode", "param_name": ["child"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insertChild", "class_name": "XMLDocument", "method_description": "Inserts a node object at specified position in the receiver\u2019s array of children.", "params": [{"param_type": "XMLNode", "param_name": ["child"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "insertChildren", "class_name": "XMLDocument", "method_description": "Inserts an array of children at a specified position in the receiver\u2019s array of children.", "params": [{"param_type": "[XMLNode]", "param_name": ["children"], "param_description": ""}, {"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "removeChild", "class_name": "XMLDocument", "method_description": "Removes the child node of the receiver located at a specified position in its array of children.", "params": [{"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "replaceChild", "class_name": "XMLDocument", "method_description": "Replaces the child node of the receiver located at a specified position in its array of children with another node.", "params": [{"param_type": "Int", "param_name": ["at", "index"], "param_description": ""}, {"param_type": "XMLNode", "param_name": ["with", "node"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setChildren", "class_name": "XMLDocument", "method_description": "Sets the child nodes of the receiver.", "params": [{"param_type": "[XMLNode]", "param_name": ["children"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["Depending on intended output, the method returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "]}, "method_name": "object", "class_name": "XMLDocument", "method_description": "Applies the XSLT pattern rules and templates (specified as a data object) to the receiver and returns a document object containing transformed XML or HTML markup.", "params": [{"param_type": "Data", "param_name": ["byApplyingXSLT", "xslt"], "param_description": ""}, {"param_type": "String]", "param_name": ["arguments"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["Depending on intended output, the method returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "]}, "method_name": "object", "class_name": "XMLDocument", "method_description": "Applies the XSLT pattern rules and templates (specified as a string) to the receiver and returns a document object containing transformed XML or HTML markup.", "params": [{"param_type": "String", "param_name": ["byApplyingXSLTString", "xslt"], "param_description": ""}, {"param_type": "String]", "param_name": ["arguments"], "param_description": ""}]}, {"return_value": {"return_type": ["Any"], "return_name": [""], "return_description": ["Depending on intended output, the returns an NSXMLDocument object or an NSData data containing transformed XML or HTML markup. If the message is supposed to create plain text or RTF, then an NSData object is returned, otherwise an XML document object. The method returns  nil if XSLT processing did not succeed. "]}, "method_name": "objectByApplyingXSLT", "class_name": "XMLDocument", "method_description": "Applies the XSLT pattern rules and templates located at a specified URL to the receiver and returns a document object containing transformed XML markup or an NSData object containing plain text, RTF text, and so on.", "params": [{"param_type": "URL", "param_name": ["at", "xsltURL"], "param_description": ""}, {"param_type": "String]", "param_name": ["arguments", "argument"], "param_description": ""}]}, {"return_value": {"return_type": ["Data"], "return_name": [""], "return_description": []}, "method_name": "xmlData", "class_name": "XMLDocument", "method_description": "Returns the XML string representation of the receiver\u2014that is, the entire document\u2014encapsulated in a data object.", "params": [{"param_type": "XMLNode.Options", "param_name": ["options"], "param_description": ""}]}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the validation operation succeeded, otherwise false."]}, "method_name": "validate", "class_name": "XMLDocument", "method_description": "Validates the document against the governing schema and returns whether the document conforms to the schema.", "params": []}], "Vars": [{"var_type": "String", "var_description": "Sets the character encoding of the receiver to encoding, ", "var_name": "characterEncoding"}, {"var_type": "XMLDocument.ContentKind", "var_description": "Sets the kind of output content for the receiver.", "var_name": "documentContentKind"}, {"var_type": "XMLDTD", "var_description": "Returns an XMLDTD object representing the internal DTD associated with the receiver.", "var_name": "dtd"}, {"var_type": "Bool", "var_description": "Sets a Boolean value that specifies whether the receiver represents a standalone XML document.", "var_name": "isStandalone"}, {"var_type": "String", "var_description": "Returns the MIME type for the receiver.", "var_name": "mimeType"}, {"var_type": "String", "var_description": "Sets the version of the receiver\u2019s XML.", "var_name": "version"}, {"var_type": "Data", "var_description": "Returns the XML string representation of the receiver\u2014that is, the entire document\u2014encapsulated in a data object. ", "var_name": "xmlData"}], "subclass_list": [], "class_description": "An XMLDocument object can have multiple child nodes but only one element, the root element. Any other node must be a XMLNode object representing a comment or a processing instruction. If you attempt to add any other kind of child node to an XMLDocument object, such as an attribute, namespace, another document object, or an element other than the root, XMLDocument raises an exception. If you add a valid child node and that object already has a parent, XMLDocument raises an exception. An XMLDocument object may also have document-global attributes, such as XML version, character encoding, referenced DTD, and MIME type. \nThe initializers of the XMLDocument class read an external source of XML, whether it be a local file or remote website, parse it, and process it into the tree representation. You can also construct an XMLDocument programmatically. There are accessor methods for getting and setting document attributes, methods for transforming documents using XSLT, a method for dynamically validating a document, and methods for printing out the content of an XMLDocument as XML, XHTML, HTML, or plain text.\nThe XMLDocument class is thread-safe as long as any given instance is used only in one thread.\nTo subclass NSXMLDocument you need to override the primary initializer, init(data:options:), and the methods listed below. In most cases, you need only invoke the superclass implementation, adding any subclass-specific code before or after the invocation, as necessary. \nrootElement()\nsetChildren(_:)\nremoveChild(at:)\ninsertChild(_:at:)\ncharacterEncoding\ncharacterEncoding\ndocumentContentKind\ndocumentContentKind\ndtd\nsetDTD:\nmimeType\nsetMIMEType:\nisStandalone\nisStandalone\nversion\nsetURI:\nversion\nBy default NSXMLDocument implements the NSObject isEqual(_:) method to perform a deep comparison: two NSXMLDocument objects are not considered equal unless they have the same name, same child nodes, same attributes, and so on. The comparison does not consider the parent node (and hence the node\u2019s location). If you want a different standard of comparison, override isEqual:. \nBecause of the architecture and data model of NSXML, when it parses and processes a source of XML it cannot know about your subclass unless you override the class method replacementClass(for:) to return your custom class in place of an NSXML class. If your custom class has no direct NSXML counterpart\u2014for example, it is a subclass of NSXMLNode that represents CDATA sections\u2014then you can walk the tree after it has been created and insert the new node where appropriate. \n", "class_name": "XMLDocument"}
{"class_description": "You can send the output of the standard library\u2019s print(_:to:) and dump(_:to:) functions to an instance of a type that conforms to the TextOutputStream protocol instead of to standard output. Swift\u2019s String type conforms to TextOutputStream already, so you can capture the output from print(_:to:) and dump(_:to:) in a string instead of logging it to standard output.\nTo make your custom type conform to the TextOutputStream protocol, implement the required write(_:) method. Functions that use a TextOutputStream target may call write(_:) multiple times per writing operation.\nAs an example, here\u2019s an implementation of an output stream that converts any input to its plain ASCII representation before sending it to standard output.\nThe ASCIILogger type\u2019s write(_:) method processes its string input by escaping each Unicode scalar, with the exception of \"\\n\" line returns. By sending the output of the print(_:to:) function to an instance of ASCIILogger, you invoke its write(_:) method.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "TextOutputStream", "method_description": "Appends the given string to the stream.Required.", "method_name": "write", "params": [{"param_type": "String", "param_name": ["string"], "param_description": ""}]}], "class_inherit_list": [], "Vars": [], "subclass_list": ["StringProtocol"], "class_name": "TextOutputStream"}
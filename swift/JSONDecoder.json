{"package_name": "foundation", "interface_list": [], "class_inherit_list": [], "Methods": [{"return_value": {"return_type": ["T"], "return_name": [""], "return_description": []}, "method_name": "decode", "class_name": "JSONDecoder", "method_description": "Returns a value of the type you specify, decoded from a JSON object.", "params": [{"param_type": "Decodable.Decodableype", "param_name": ["type"], "param_description": ""}, {"param_type": "Data", "param_name": ["from", "data"], "param_description": ""}]}], "Vars": [{"var_type": "JSONDecoder.KeyDecodingStrategy", "var_description": "A value that determines how a type's coding keys are decoded from JSON keys.", "var_name": "keyDecodingStrategy"}, {"var_type": "[CodingUserInfoKey", "var_description": "A dictionary you use to customize the decoding process by providing contextual information.", "var_name": "userInfo"}, {"var_type": "JSONDecoder.DateDecodingStrategy", "var_description": "The strategy used when decoding dates from part of a JSON object.", "var_name": "dateDecodingStrategy"}, {"var_type": "JSONDecoder.DataDecodingStrategy", "var_description": "The strategy that a decoder uses to decode raw data.", "var_name": "dataDecodingStrategy"}, {"var_type": "JSONDecoder.NonConformingFloatDecodingStrategy", "var_description": "The strategy used by a decoder when it encounters exceptional floating-point values.", "var_name": "nonConformingFloatDecodingStrategy"}], "subclass_list": [], "class_description": "The example below shows how to decode an instance of a simple GroceryProduct type from a JSON object. The type adopts Codable so that it's decodable using a JSONDecoder instance.\n\n", "class_name": "JSONDecoder"}
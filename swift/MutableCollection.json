{"class_description": "Collections that conform to MutableCollection gain the ability to change the value of their elements. This example shows how you can modify one of the names in an array of students.\nIn addition to changing the value of an individual element, you can also change the values of a slice of elements in a mutable collection. For example, you can sort part of a mutable collection by calling the mutable sort() method on a subscripted subsequence. Here\u2019s an example that sorts the first half of an array of integers:\nThe MutableCollection protocol allows changing the values of a collection\u2019s elements but not the length of the collection itself. For operations that require adding or removing elements, see the RangeReplaceableCollection protocol instead.\nTo add conformance to the MutableCollection protocol to your own custom collection, upgrade your type\u2019s subscript to support both read and write access.\nA value stored into a subscript of a MutableCollection instance must subsequently be accessible at that same position. That is, for a mutable collection instance a, index i, and value x, the two sets of assignments in the following code sample must be equivalent:\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": ["The index of the first element in the reordered collection that matches belongsInSecondPartition. If no elements in the collection match belongsInSecondPartition, the returned index is equal to the collection\u2019s endIndex."], "return_type": ["Bool rethrows -> Self.Index"]}, "class_name": "MutableCollection", "method_description": "Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don\u2019t match.Required. Default implementation provided.", "method_name": "partition", "params": [{"param_type": "(Self.Element", "param_name": ["by", "belongsInSecondPartition"], "param_description": "A predicate used to partition the collection. All elements satisfying this predicate are ordered after all elements not satisfying it."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "MutableCollection", "method_description": "Reverses the elements of the collection in place.", "method_name": "reverse", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "MutableCollection", "method_description": "Shuffles the collection in place.", "method_name": "shuffle", "params": []}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "MutableCollection", "method_description": "Shuffles the collection in place, using the given generator as a source for randomness.", "method_name": "shuffle", "params": [{"param_type": "inout RandomNumberGenerator", "param_name": ["using", "generator"], "param_description": "The random number generator to use when shuffling the collection."}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "MutableCollection", "method_description": "Sorts the collection in place.", "method_name": "sort", "params": []}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool rethrows"]}, "class_name": "MutableCollection", "method_description": "Sorts the collection in place, using the given predicate as the comparison between elements.", "method_name": "sort", "params": [{"param_type": "(Self.Element", "param_name": ["by", "areInIncreasingOrder"], "param_description": "A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false. If areInIncreasingOrder throws an error during the sort, the elements may be in a different order, but none will be lost."}, {"param_type": "Self.Element", "param_name": ["Self.Element"], "param_description": ""}]}, {"return_value": {"return_name": [], "return_description": [], "return_type": []}, "class_name": "MutableCollection", "method_description": "Exchanges the values at the specified indices of the collection.Required. Default implementation provided.", "method_name": "swapAt", "params": [{"param_type": "Self.Index", "param_name": ["i"], "param_description": "The index of the first value to swap."}, {"param_type": "Self.Index", "param_name": ["j"], "param_description": "The index of the second value to swap."}]}], "class_inherit_list": ["Collection"], "Vars": [], "subclass_list": [], "class_name": "MutableCollection"}
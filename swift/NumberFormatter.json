{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["Formatter"], "Methods": [{"return_value": {"return_type": [], "return_name": [], "return_description": []}, "method_name": "setDefaultFormatterBehavior", "class_name": "NumberFormatter", "method_description": "Sets the default formatter behavior for new instances of NSNumberFormatter .", "params": [{"param_type": "NumberFormatter.Behavior", "param_name": ["behavior"], "param_description": ""}]}, {"return_value": {"return_type": ["NumberFormatter.Behavior"], "return_name": [""], "return_description": ["An NSNumberFormatterBehavior constant that indicates default formatter behavior for new instances of NSNumberFormatter."]}, "method_name": "defaultFormatterBehavior", "class_name": "NumberFormatter", "method_description": "Returns an NSNumberFormatterBehavior constant that indicates default formatter behavior for new instances of NSNumberFormatter.", "params": []}, {"return_value": {"return_type": [], "return_name": [], "return_description": ["true if the conversion from string to cell-content object was successful, otherwise false."]}, "method_name": "getObjectValue", "class_name": "NumberFormatter", "method_description": "Returns by reference a cell-content object after creating it from a range of characters in a given string.", "params": [{"param_type": "AutoreleasingUnsafeMutablePointer<AnyObject>", "param_name": ["obj"], "param_description": ""}, {"param_type": "String", "param_name": ["for", "string"], "param_description": ""}, {"param_type": "UnsafeMutablePointer<NSRange>", "param_name": ["range", "rangep"], "param_description": ""}]}, {"return_value": {"return_type": ["NSNumber"], "return_name": [""], "return_description": ["An NSNumber object created by parsing string using the receiver\u2019s format, or nil if no single number could be parsed."]}, "method_name": "number", "class_name": "NumberFormatter", "method_description": "Returns an NSNumber object created by parsing a given string.", "params": [{"param_type": "String", "param_name": ["from", "string"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["A string containing the formatted value of number using the receiver\u2019s current settings."]}, "method_name": "string", "class_name": "NumberFormatter", "method_description": "Returns a string containing the formatted value of the provided number object.", "params": [{"param_type": "NSNumber", "param_name": ["from", "number"], "param_description": ""}]}, {"return_value": {"return_type": ["String"], "return_name": [""], "return_description": ["An appropriately formatted NSString."]}, "method_name": "localizedString", "class_name": "NumberFormatter", "method_description": "Returns a localized number string with the specified style.", "params": [{"param_type": "NSNumber", "param_name": ["from", "num"], "param_description": ""}, {"param_type": "NumberFormatter.Style", "param_name": ["number", "nstyle"], "param_description": ""}]}], "Vars": [{"var_type": "NumberFormatter.Behavior", "var_description": "The formatter behavior of the receiver.", "var_name": "formatterBehavior"}, {"var_type": "NumberFormatter.Style", "var_description": "The number style used by the receiver.", "var_name": "numberStyle"}, {"var_type": "Bool", "var_description": "Determines whether the receiver creates instances of NSDecimalNumber when it converts strings to number objects.", "var_name": "generatesDecimalNumbers"}, {"var_type": "Bool", "var_description": "Determines whether the dollar sign character ($), decimal separator character (.), and thousand separator character (,) are converted to appropriately localized characters as specified by the user\u2019s localization preference.", "var_name": "localizesFormat"}, {"var_type": "Locale!", "var_description": "The locale of the receiver.", "var_name": "locale"}, {"var_type": "NSDecimalNumberHandler", "var_description": "The rounding behavior used by the receiver.", "var_name": "roundingBehavior"}, {"var_type": "NSNumber!", "var_description": "The rounding increment used by the receiver.", "var_name": "roundingIncrement"}, {"var_type": "NumberFormatter.RoundingMode", "var_description": "The rounding mode used by the receiver.", "var_name": "roundingMode"}, {"var_type": "Int", "var_description": "The minimum number of digits before the decimal separator.", "var_name": "minimumIntegerDigits"}, {"var_type": "Int", "var_description": "The maximum number of digits before the decimal separator.", "var_name": "maximumIntegerDigits"}, {"var_type": "Int", "var_description": "The minimum number of digits after the decimal separator.", "var_name": "minimumFractionDigits"}, {"var_type": "Int", "var_description": "The maximum number of digits after the decimal separator.", "var_name": "maximumFractionDigits"}, {"var_type": "Bool", "var_description": "A Boolean value indicating whether the formatter uses minimum and maximum significant digits when formatting numbers.", "var_name": "usesSignificantDigits"}, {"var_type": "Int", "var_description": "The minimum number of significant digits for the number formatter.", "var_name": "minimumSignificantDigits"}, {"var_type": "Int", "var_description": "The maximum number of significant digits for the number formatter.", "var_name": "maximumSignificantDigits"}, {"var_type": "String", "var_description": "The receiver\u2019s format.", "var_name": "format"}, {"var_type": "Formatter.Context", "var_description": "The capitalization formatting context used when formatting a number.", "var_name": "formattingContext"}, {"var_type": "Int", "var_description": "The format width used by the receiver.", "var_name": "formatWidth"}, {"var_type": "String!", "var_description": "The format the receiver uses to display negative values.", "var_name": "negativeFormat"}, {"var_type": "String!", "var_description": "The format the receiver uses to display positive values.", "var_name": "positiveFormat"}, {"var_type": "NSNumber", "var_description": "The multiplier of the receiver.", "var_name": "multiplier"}, {"var_type": "String!", "var_description": "The string used to represent a percent symbol.", "var_name": "percentSymbol"}, {"var_type": "String!", "var_description": "The string used to represent a per-mill (per-thousand) symbol.", "var_name": "perMillSymbol"}, {"var_type": "String!", "var_description": "The string used to represent a minus sign.", "var_name": "minusSign"}, {"var_type": "String!", "var_description": "The string used to represent a plus sign.", "var_name": "plusSign"}, {"var_type": "String!", "var_description": "The string used to represent an exponent symbol.", "var_name": "exponentSymbol"}, {"var_type": "String", "var_description": "The string used to represent a zero value.", "var_name": "zeroSymbol"}, {"var_type": "String", "var_description": "The string used to represent a nil value.", "var_name": "nilSymbol"}, {"var_type": "String!", "var_description": "The string used to represent a NaN (\u201cnot a number\u201d) value.", "var_name": "notANumberSymbol"}, {"var_type": "String", "var_description": "The string used to represent a negative infinity symbol.", "var_name": "negativeInfinitySymbol"}, {"var_type": "String", "var_description": "The string used to represent a positive infinity symbol. ", "var_name": "positiveInfinitySymbol"}, {"var_type": "String!", "var_description": "The string used by the receiver as a local currency symbol.", "var_name": "currencySymbol"}, {"var_type": "String!", "var_description": "The receiver\u2019s currency code.", "var_name": "currencyCode"}, {"var_type": "String!", "var_description": "The international currency symbol used by the receiver.", "var_name": "internationalCurrencySymbol"}, {"var_type": "String!", "var_description": "The currency grouping separator for the receiver.", "var_name": "currencyGroupingSeparator"}, {"var_type": "String!", "var_description": "The string the receiver uses as the prefix for positive values.", "var_name": "positivePrefix"}, {"var_type": "String!", "var_description": "The string the receiver uses as the suffix for positive values.", "var_name": "positiveSuffix"}, {"var_type": "String!", "var_description": "The string the receiver uses as a prefix for negative values.", "var_name": "negativePrefix"}, {"var_type": "String!", "var_description": "The string the receiver uses as a suffix for negative values.", "var_name": "negativeSuffix"}, {"var_type": "[String", "var_description": "The text attributes to be used in displaying negative values.", "var_name": "textAttributesForNegativeValues"}, {"var_type": "[String", "var_description": "The text attributes to be used in displaying positive values.", "var_name": "textAttributesForPositiveValues"}, {"var_type": "NSAttributedString", "var_description": "The attributed string that the receiver uses to display zero values.", "var_name": "attributedStringForZero"}, {"var_type": "[String", "var_description": "The text attributes used to display a zero value.", "var_name": "textAttributesForZero"}, {"var_type": "NSAttributedString", "var_description": "The attributed string the receiver uses to display nil values.", "var_name": "attributedStringForNil"}, {"var_type": "[String", "var_description": "The text attributes used to display the nil symbol.", "var_name": "textAttributesForNil"}, {"var_type": "NSAttributedString", "var_description": "The attributed string the receiver uses to display \u201cnot a number\u201d values.", "var_name": "attributedStringForNotANumber"}, {"var_type": "[String", "var_description": "The text attributes used to display the NaN (\u201cnot a number\u201d) string.", "var_name": "textAttributesForNotANumber"}, {"var_type": "[String", "var_description": "The text attributes used to display the positive infinity symbol.", "var_name": "textAttributesForPositiveInfinity"}, {"var_type": "[String", "var_description": "The text attributes used to display the negative infinity symbol.", "var_name": "textAttributesForNegativeInfinity"}, {"var_type": "String!", "var_description": "The string used by the receiver for a grouping separator.", "var_name": "groupingSeparator"}, {"var_type": "Bool", "var_description": "Determines whether the receiver displays the group separator.", "var_name": "usesGroupingSeparator"}, {"var_type": "String!", "var_description": "The character the receiver uses as a thousand separator.", "var_name": "thousandSeparator"}, {"var_type": "Bool", "var_description": "Determines whether the receiver uses thousand separators.", "var_name": "hasThousandSeparators"}, {"var_type": "String!", "var_description": "The character the receiver uses as a decimal separator.", "var_name": "decimalSeparator"}, {"var_type": "Bool", "var_description": "Determines whether the receiver always shows the decimal separator, even for integer numbers.", "var_name": "alwaysShowsDecimalSeparator"}, {"var_type": "String!", "var_description": "The string used by the receiver as a currency decimal separator.", "var_name": "currencyDecimalSeparator"}, {"var_type": "Int", "var_description": "The grouping size of the receiver.", "var_name": "groupingSize"}, {"var_type": "Int", "var_description": "The secondary grouping size of the receiver.", "var_name": "secondaryGroupingSize"}, {"var_type": "String!", "var_description": "The string that the receiver uses to pad numbers in the formatted string representation.", "var_name": "paddingCharacter"}, {"var_type": "NumberFormatter.PadPosition", "var_description": "The padding position used by the receiver.", "var_name": "paddingPosition"}, {"var_type": "Bool", "var_description": "Determines whether the receiver allows as input floating-point values (that is, values that include the period character [.]).", "var_name": "allowsFloats"}, {"var_type": "NSNumber", "var_description": "The lowest number allowed as input by the receiver.", "var_name": "minimum"}, {"var_type": "NSNumber", "var_description": "The highest number allowed as input by the receiver.", "var_name": "maximum"}, {"var_type": "Bool", "var_description": "Determines whether the receiver will use heuristics to guess at the number which is intended by a string.", "var_name": "isLenient"}, {"var_type": "Bool", "var_description": "Determines whether partial string validation is enabled for the receiver.", "var_name": "isPartialStringValidationEnabled"}], "subclass_list": [], "class_description": "Instances of NumberFormatter format the textual representation of cells that contain NSNumber objects and convert textual representations of numeric values into NSNumber objects. The representation encompasses integers, floats, and doubles; floats and doubles can be formatted to a specified decimal position. NumberFormatter objects can also impose ranges on the numeric values cells can accept.\nThe NumberFormatter class provides flexible options for displaying non-zero fractional parts of numbers.\nIf you set the usesSignificantDigits property to true, you can configure NumberFormatter to display significant digits using the minimumSignificantDigits and maximumSignificantDigits properties. If usesSignificantDigits is false, these properties are ignored. See Configuring Significant Digits.\nOtherwise, you can configure the minimum and maximum number of integer and fraction digits, or the numbers before and after the decimal separator, respectively, using the minimumIntegerDigits, maximumIntegerDigits, minimumFractionDigits, and maximumFractionDigits properties. See Configuring Integer and Fraction Digits.\nOn iOS 7 and later NumberFormatter is thread-safe.\nIn macOS 10.9 and later NumberFormatter is thread-safe so long as you are using the modern behavior in a 64-bit app.\nOn earlier versions of the operating system, or when using the legacy formatter behavior or running in 32-bit in macOS, NumberFormatter is not thread-safe, and you therefore must not mutate a number formatter simultaneously from multiple threads.\n", "class_name": "NumberFormatter"}
{"package_name": "foundation", "interface_list": ["CVarArg", "Equatable", "Hashable"], "class_inherit_list": ["NSScriptObjectSpecifier"], "Methods": [], "Vars": [{"var_type": "Any", "var_description": "Returns the ID encapsulated by the receiver.", "var_name": "uniqueID"}], "subclass_list": [], "class_description": "This specifier works only for objects that have an ID property. The unique ID object passed to an instance of  NSUniqueIDSpecifier must be either an NSNumber object or an NSString object. The exact type should match the scripting dictionary declaration of the ID attribute for the relevant scripting class.\nYou can expect that the ID property will be read only for any object that supports it. Therefore a scripter can obtain the unique ID for an object and refer to the object by the ID, but cannot set the unique ID.\nYou don\u2019t normally subclass NSUniqueIDSpecifier.\nThe evaluation of NSUniqueIDSpecifier objects follows these steps until the specified object is found:\nIf the container implements a method whose selector matches the relevant valueIn<Key>WithUniqueID: pattern established by scripting key-value coding, the method is invoked. This method can potentially be very fast, and it may be relatively easy to implement.\nAs is the case when evaluating any script object specifier, the container of the specified object is given a chance to evaluate the object specifier. If the container class implements the indicesOfObjects(byEvaluatingObjectSpecifier:) method, the method is invoked. This method can potentially be very fast, but it is relatively difficult to implement.\nAn NSWhoseSpecifier object that specifies the first object whose relevant 'ID  ' attribute matches the ID is synthesized and evaluated. The NSWhoseSpecifier object must search through all of the keyed elements in the container, looking for a match. The search is potentially very slow.\n", "class_name": "NSUniqueIDSpecifier"}
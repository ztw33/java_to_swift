{"class_description": "A type that conforms to RangeExpression can convert itself to a Range<Bound> of indices within a given collection.\n", "package_name": "swift", "interface_list": [], "Methods": [{"return_value": {"return_name": [""], "return_description": ["true if element is contained in the range expression; otherwise, false."], "return_type": ["Bool"]}, "class_name": "RangeExpression", "method_description": "Returns a Boolean value indicating whether the given element is contained within the range expression.Required.", "method_name": "contains", "params": [{"param_type": "Self.Bound", "param_name": ["element"], "param_description": "The element to check for containment."}]}, {"return_value": {"return_name": [""], "return_description": ["A range suitable for slicing collection. The returned range is not guaranteed to be inside the bounds of collection. Callers should apply the same preconditions to the return value as they would to a range provided directly by the user."], "return_type": ["Range<Self.Bound>"]}, "class_name": "RangeExpression", "method_description": "Returns the range of indices described by this range expression within the given collection.Required.", "method_name": "relative", "params": [{"param_type": "Collection", "param_name": ["to", "collection"], "param_description": "The collection to evaluate this range expression in relation to."}]}, {"return_value": {"return_name": [""], "return_description": [], "return_type": ["Bool"]}, "class_name": "RangeExpression", "method_description": "", "method_name": "~=", "params": [{"param_type": "Self", "param_name": ["pattern"], "param_description": ""}, {"param_type": "Self.Bound", "param_name": ["value"], "param_description": ""}]}], "class_inherit_list": [], "Vars": [], "subclass_list": [], "class_name": "RangeExpression"}